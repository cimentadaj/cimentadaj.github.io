<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scraping on Jorge Cimentada</title>
    <link>/tags/scraping/</link>
    <description>Recent content in Scraping on Jorge Cimentada</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Tue, 19 Jun 2018 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="/tags/scraping/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Exploring Google Scholar coauthorship</title>
      <link>/blog/2018-06-19-exploring-google-scholar-coauthorship/exploring-google-scholar-coauthorship/</link>
      <pubDate>Tue, 19 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/2018-06-19-exploring-google-scholar-coauthorship/exploring-google-scholar-coauthorship/</guid>
      <description>&lt;p&gt;I woke up today to read Maëlle Salmon’s latest blog entry in which she scraped her own &lt;a href=&#34;https://masalmon.eu/2018/06/18/mathtree/&#34;&gt;mathematical tree&lt;/a&gt;. Running through the code I had an idea about scraping the coauthorship list that a Google Scholar profile has. With this, I could visualize the network of coauthorship of important scientists and explore whether they have closed or open collaborations.&lt;/p&gt;
&lt;p&gt;I sat down this morning and created the &lt;code&gt;coauthornetwork&lt;/code&gt; package that allows you to do just that! It’s actually very simple. First, install it with the usual:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;devtools::install_github(&amp;quot;cimentadaj/coauthornetwork&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There’s two functions: &lt;code&gt;grab_network&lt;/code&gt; and &lt;code&gt;plot_coauthors&lt;/code&gt;. The first scrapes and returns a data frame of a Google Scholar profile, their coauthors and the coauthors of their coauthors (what?). More simply, by default, the data frame returns this:&lt;/p&gt;
&lt;p&gt;Google Scholar Profile –&amp;gt; Coauthors –&amp;gt; Coauthors&lt;/p&gt;
&lt;p&gt;It’s not that hard after all. The only thing you need to provide is the end of the URL of a Google Scholar profile. For example, a typical URL looks like this: &lt;code&gt;https://scholar.google.com/citations?user=F0kCgy8AAAAJ&amp;amp;hl=en&lt;/code&gt;. &lt;code&gt;grab_network&lt;/code&gt; will accept the latter part of the URL, namely: &lt;code&gt;citations?user=F0kCgy8AAAAJ&amp;amp;hl=en&lt;/code&gt;. Let’s test it:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(coauthornetwork)

network &amp;lt;- grab_network(&amp;quot;citations?user=F0kCgy8AAAAJ&amp;amp;hl=en&amp;quot;)
network&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 21 x 4
##    author               href            coauthors    coauthors_href       
##    &amp;lt;chr&amp;gt;                &amp;lt;chr&amp;gt;           &amp;lt;chr&amp;gt;        &amp;lt;chr&amp;gt;                
##  1 Hans-Peter Blossfeld citations?user~ Melinda Mil~ /citations?user=HX9K~
##  2 Hans-Peter Blossfeld citations?user~ Karl Ulrich~ /citations?user=iuzu~
##  3 Hans-Peter Blossfeld citations?user~ Yossi Shavit /citations?user=brfW~
##  4 Hans-Peter Blossfeld citations?user~ Jan Skopek   /citations?user=Mmo1~
##  5 Hans-Peter Blossfeld citations?user~ Andreas Timm /citations?user=NnRu~
##  6 Melinda Mills        /citations?use~ Hans-Peter ~ /citations?user=F0kC~
##  7 Melinda Mills        /citations?use~ Tanturri Ma~ /citations?user=xN3X~
##  8 Melinda Mills        /citations?use~ René Veenst~ /citations?user=_9OV~
##  9 Melinda Mills        /citations?use~ Francesco C~ /citations?user=-JR6~
## 10 Karl Ulrich Mayer    /citations?use~ Paul B. Bal~ /citations?user=vcOZ~
## # ... with 11 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The main author here is Hans-Peter Blossfeld, a well known Sociologist. We also see that Melinda Mills is one of his coauthors, so we also have the coauthors of Melinda Mills right after him. &lt;code&gt;grab_networks&lt;/code&gt; also has the &lt;code&gt;n_coauthors&lt;/code&gt; argument to control how many coauthors you can extract (limited to 20 by Google Scholar). You’ll notice that once you go over 10 coauthors things start to get very messy when we visualize this.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot_coauthors(network, size_labels = 3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, :
## font family not found in Windows font database

## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, :
## font family not found in Windows font database&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/blog/2018-06-19-exploring-google-scholar-coauthorship/2018-06-19-exploring-google-scholar-coauthorship_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Cool eh? We can play around with more coauthors as well.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot_coauthors(grab_network(&amp;quot;citations?user=F0kCgy8AAAAJ&amp;amp;hl=en&amp;quot;, n_coauthors = 7), size_labels = 3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, :
## font family not found in Windows font database

## Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, :
## font family not found in Windows font database&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/blog/2018-06-19-exploring-google-scholar-coauthorship/2018-06-19-exploring-google-scholar-coauthorship_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Hope you enjoy it!&lt;/p&gt;
&lt;!-- To make it more accesible to non-R users, I [created a Shiny app](https://cimentadaj.shinyapps.io/gs_coauthorsip/) where everyone can explore their own coauthors. Enjoy! --&gt;
</description>
    </item>
    
    <item>
      <title>Login in, scraping and hidden fields</title>
      <link>/blog/2018-04-05-login-in-scraping-and-hidden-fields/login-in-scraping-and-hidden-fields/</link>
      <pubDate>Thu, 05 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/2018-04-05-login-in-scraping-and-hidden-fields/login-in-scraping-and-hidden-fields/</guid>
      <description>&lt;p&gt;Lightning post. Earlier today I was trying to scrape the emails from all the PhD candidates in my program and I had to log in from our ‘Aula Global’. I did so using &lt;code&gt;httr&lt;/code&gt; but something was off: I introduced both my username and password but the website did not log in. Apparently, when loging in through &lt;code&gt;POST&lt;/code&gt;, sometimes there’s a thing call hidden fields that you need to fill out! I would’ve never though about this. Below is a case study, that excludes my credentials.&lt;/p&gt;
&lt;p&gt;The first thing we have to do is identify the &lt;code&gt;POST&lt;/code&gt; method and the inputs to the request. Using Google Chrome, go to the website &lt;a href=&#34;https://sso.upf.edu/CAS/index.php/login?service=https%3A%2F%2Faulaglobal.upf.edu%2Flogin%2Findex.php&#34;&gt;https://sso.upf.edu/CAS/index.php/login?service=https%3A%2F%2Faulaglobal.upf.edu%2Flogin%2Findex.php&lt;/a&gt; and then on the Google Chrome menu go to -&amp;gt; Settings -&amp;gt; More tools -&amp;gt; Developer tools. Here we have the complete html of the website.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;We identify the POST method and the URL&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- &lt;img src=&#34;/img/post_method.png&#34; alt=&#34;Drawing&#34; style=&#34;width: 600px;&#34;/&gt; --&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/img/post_method.png&#34; /&gt;

&lt;/div&gt;
&lt;p&gt;It’s the branch with &lt;code&gt;form&lt;/code&gt; that has &lt;code&gt;method=&#39;post&#39;&lt;/code&gt;.&lt;/p&gt;
&lt;ol start=&#34;2&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Open the &lt;code&gt;POST&lt;/code&gt; branch and find all fields. We can see the two ‘hidden’ fields.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/img/hidden_fields.png&#34; /&gt;

&lt;/div&gt;
&lt;p&gt;Below the &lt;code&gt;form&lt;/code&gt; tag, we see two &lt;code&gt;input&lt;/code&gt; tags set to hidden, there they are! Even though we want to login, we also have to provide the two hidden fields. Take note of both their &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt; tags.&lt;/p&gt;
&lt;ol start=&#34;3&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Dive deeper down the branch and find other fields. In our case, username and password.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For username:&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/img/username.png&#34; /&gt;

&lt;/div&gt;
&lt;p&gt;For password:&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/img/password.png&#34; /&gt;

&lt;/div&gt;
&lt;ol start=&#34;4&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Write down the field names with the correspoding values.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;all_fields &amp;lt;-
  list(
    adAS_username = &amp;quot;private&amp;quot;,
    adAS_password = &amp;quot;private&amp;quot;,
    adAS_i18n_theme = &amp;#39;en&amp;#39;,
    adAS_mode = &amp;#39;authn&amp;#39;
  )&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;5&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Load our packages and our URL’s&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(httr)
library(xml2)

login &amp;lt;- &amp;quot;https://sso.upf.edu/CAS/index.php/login?service=https%3A%2F%2Faulaglobal.upf.edu%2Flogin%2Findex.php&amp;quot;
website &amp;lt;- &amp;quot;https://aulaglobal.upf.edu/user/index.php?page=0&amp;amp;perpage=5000&amp;amp;mode=1&amp;amp;accesssince=0&amp;amp;search&amp;amp;roleid=5&amp;amp;contextid=185837&amp;amp;id=9829&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Login using all of our fields.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;upf &amp;lt;- handle(&amp;quot;https://aulaglobal.upf.edu&amp;quot;)

access &amp;lt;- POST(login,
               body = all_fields,
               handle = upf)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note how I set the &lt;code&gt;handle&lt;/code&gt;. If the website you want to visit and the website that hosts the login information have the same root of the URL (&lt;code&gt;aulaglobal.upf.edu&lt;/code&gt; for example), then you can avoid using &lt;code&gt;handle&lt;/code&gt; (it’s done behind the scenes). In my case, I set the &lt;code&gt;handle&lt;/code&gt; to the same root URL of the website I WANT to visit after I log in (because they have different root URL’s). This way the cookies and login information from the login are preserved through out the session.&lt;/p&gt;
&lt;ol start=&#34;4&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Request the information from the website you’re interested&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;emails &amp;lt;- GET(website, handle = upf)&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;5&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Scrape away!&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;all_emails &amp;lt;-
  read_html(emails) %&amp;gt;% 
  xml_ns_strip() %&amp;gt;% 
  xml_find_all(&amp;quot;//table//a&amp;quot;) %&amp;gt;% 
  as_list() %&amp;gt;% 
  unlist() %&amp;gt;% 
  str_subset(&amp;quot;.+@upf.edu$&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Unfortunately you won’t be able to reproduce this script because you don’t have a log information unless you belong to the same PhD program as I do. However, I hope you find the hidden fields explanation useful, I’m sure I will come back to this in the near future for reference!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Scraping at scale: daily scraping to your database</title>
      <link>/blog/2018-01-31-scraping-at-scale-daily-scraping-to-your-database/scraping-at-scale-daily-scraping-to-your-database/</link>
      <pubDate>Wed, 31 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/2018-01-31-scraping-at-scale-daily-scraping-to-your-database/scraping-at-scale-daily-scraping-to-your-database/</guid>
      <description>&lt;p&gt;I’ve been working on a personal project to gather daily data from public bicycles in Barcelona to create a historical timeline of a few stations. Since the data is only available live, I had to scrape the data and store in a database daily. This is a short tutorial showing the steps I had to take to setup a database on my remote server and connect both from my local computer as well as from my server. I also show the R script that scrapes data, connects to the server and appends the information every day for a certain amouint of time.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: This worked for my Digital Ocean droplet 512 MB and 20 GB disk with Ubuntu 16.04.3 x64.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Let’s get to it. It’s better to do &lt;em&gt;ALL&lt;/em&gt; of this as a user in your server but remember to append &lt;code&gt;sudo&lt;/code&gt; to everything. Nonetheless, beware of problems like the ones I encountered. For example, when installing R packages that where ran by &lt;code&gt;cron&lt;/code&gt; in a script, if installed through a non-root user the packages were said to be &lt;code&gt;&#39;not installed&#39;&lt;/code&gt; (when I fact running the script separately was fine). However, when I installed the packages logged in as root the packages were installed successfully.&lt;/p&gt;
&lt;div id=&#34;setting-up-the-data-base&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Setting up the data base&lt;/h2&gt;
&lt;p&gt;All steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-install-r-on-ubuntu-16-04-2&#34;&gt;Install R&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-install-mysql-on-ubuntu-16-04&#34;&gt;Install MySQL&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Type &lt;code&gt;mysql -u root -p&lt;/code&gt; to log in to MySQL&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Follow these steps to create an empty table within a database&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;sql&#34;&gt;&lt;code&gt;CREATE DATABASE bicing;
USE bicing;
CREATE TABLE bicing_station (id VARCHAR(30), slots VARCHAR(30), bikes VARCHAR(30), status VARCHAR(30), time VARCHAR(30), error VARCHAR(30));&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-set-up-a-remote-database-to-optimize-site-performance-with-mysql&#34;&gt;This&lt;/a&gt; is an outdated guide by Digital Ocean which might be helpful. Some of the steps below are taken from that guide.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Alter &lt;code&gt;sudo nano /etc/mysql/mysql.conf.d/mysqld.cnf&lt;/code&gt; and change &lt;code&gt;bind-address&lt;/code&gt; to have the ‘0.0.0.0’ This is so your server can listen to IP’s from outside the localhost network.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create two users to access the data base: a user from your local computer and a user from your server.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;mysql -u root -p # Log in to MySQL. -u stands for user and -p for password&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;sql&#34;&gt;&lt;code&gt;/* Create user for local computer. Note that when username and ip are in &amp;#39;&amp;#39; they need to be in those quotes. Also, the ip address you can find easily by writing what&amp;#39;s my ip in Google*/

CREATE USER &amp;#39;username&amp;#39;@&amp;#39;ip_address_of_your_computer&amp;#39; IDENTIFIED BY &amp;#39;password&amp;#39;;
GRANT ALL ON bicing.* TO username@ip_address_of_your_computer;

/* Create user for server. For this user don&amp;#39;t change localhost as that already specifies that it belongs to the same computer. */

CREATE USER &amp;#39;username&amp;#39;@&amp;#39;localhost&amp;#39; IDENTIFIED BY &amp;#39;password&amp;#39;;
GRANT ALL ON bicing.* TO username@localhost;

/* Make sure the privileges are isntalled */
FLUSH PRIVILEGES;

quit /* To quit MySQL*/&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Test whether the access worked for both users&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;# Login from your server. Replace username for your username 
# -u stands for user and -p will ask for your password 
mysql -u username -h localhost -p


# Login from your LOCAL computer. Replace username for your username and your_server_ip from the server&amp;#39;s IP
mysql -u username -h your_server_ip -p&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Now install &lt;code&gt;odbc&lt;/code&gt; in your Ubuntu server. I follow &lt;a href=&#34;I%20followed%20this:%20https://askubuntu.com/questions/800216/installing-ubuntu-16-04-lts-how-to-install-odbc&#34;&gt;this&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;sudo mkdir mysql &amp;amp;&amp;amp; cd mysql

# Download odbc in mysql folder
sudo wget https://dev.mysql.com/get/Downloads/Connector-ODBC/5.3/mysql-connector-odbc-5.3.9-linux-ubuntu16.04-x86-64bit.tar.gz

# Unzip it and copy it somewhere.
sudo tar -xvf mysql-connector-odbc-5.3.9-linux-ubuntu16.04-x86-64bit.tar.gz 
sudo cp mysql/mysql-connector-odbc-5.3.9-linux-ubuntu16.04-x86-64bit/lib/libmyodbc5a.so /usr/lib/x86_64-linux-gnu/odbc/
# If the odbc folder doesn&amp;#39;t exists, create it with mkdir /usr/lib/x86_64-linux-gnu/odbc/&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note: you might need to change the url’s and directories to a &lt;strong&gt;newer&lt;/strong&gt; version of &lt;code&gt;odbc&lt;/code&gt; so don’t simply copy and paste the links from below.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create and update the &lt;code&gt;odbc&lt;/code&gt; settings.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;sudo touch /etc/odbcinst.ini

sudo nano /etc/odbcinst.ini

# And add

[MySQL Driver]
Description = MySQL
Driver = /usr/lib/x86_64-linux-gnu/odbc/libmyodbc5a.so
Setup = /usr/lib/x86_64-linux-gnu/odbc/libodbcmyS.so
FileUsage = 1

# close the nano
# And continue

sudo touch /etc/odbc.ini

sudo nano /etc/odbc.ini

# and add

[MySQL]
Description           = MySQL connection to database
Driver                = MySQL Driver
Database              = dbname
Server                = 127.0.0.1
User                  = root
Password              = password
Port                  = 3306
Socket                = /var/run/mysqld/mysqld.sock

# Change Database to your database name
# The password to your root password

# Finally, run

sudo ln -s /var/run/mysqld/mysqld.sock /tmp/mysql.sock

# to move the socket to the folder where the DBI pkgs
# search for it

# Finish by

sudo service mysql restart;

# to restart mysql server&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;connecting-to-the-database-locally-and-remotely&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Connecting to the database locally and remotely&lt;/h2&gt;
&lt;p&gt;From my local computer:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(DBI)
library(RMySQL)

con &amp;lt;- dbConnect(MySQL(), # If the database changed, change this
                 host = your_server_ip, # in &amp;quot;&amp;quot; quotes.
                 dbname = &amp;quot;bicing&amp;quot;,
                 user = username, # remember to change to your username (in quotes)
                 password = password, # remember to change to your password (in quotes)
                 port = 3306)

dbListTables(con)

bike_stations &amp;lt;- dbReadTable(con, &amp;quot;bicing_station&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From R in the server&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;con &amp;lt;- dbConnect(RMySQL::MySQL(),
                 dbname = &amp;quot;bicing&amp;quot;,
                 user = username, # remember to change to your username (in quotes)
                 password = password, # remember to change to your password (in quotes)
                 port = 3306)

dbListTables(con)

bike_stations &amp;lt;- dbReadTable(con, &amp;quot;bicing_station&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That did it for me. Now I could connect to the database from R from my local computer and from the server itself.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;scraping-automatically&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Scraping automatically&lt;/h2&gt;
&lt;p&gt;So far you should have a database in your server which you can connect locally and remotely. I assume you have a working script that can actually add/retrieve information from the remote database. Here I will explain how to set up the scraping to run automatically as a &lt;code&gt;cron&lt;/code&gt; job and get a final email with the summary of the scrape.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Create a text file to save the output of the scraping with &lt;code&gt;sudo touch scrape_log.txt&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write &lt;code&gt;cron -e&lt;/code&gt; logged in as your non-root user.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;At the bottom of the interactive &lt;code&gt;cron&lt;/code&gt; specify these options:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;SHELL=/bin/bash # the path to the predetermined program to run cron jobs. Default bash

PATH=bla/bla/bla # PATH I’m not sure what’s for but I pasted the output of echo $PATH.

HOME= your/dr/ofinteres # Path to the directory where the scripts will be executed (where the script is)

MAILTO=&amp;quot;your@email.com&amp;quot; # Your email to receive emails

# The actual cron jobs. Below each job I explain them
30-59 11 * * * /usr/bin/Rscript scrape_bicing.R &amp;gt;&amp;gt;scrape_log.txt 2&amp;gt;&amp;amp;1

# Run this cron job from 11:30 to 11:59 every day (*), every month (*), every year(*): 30-59 11 * * *

# Use R to run the script: /usr/bin/Rscript
# You can find this directory with which Rscript

# Execute the file scrape_bicing.R (which is looked for in the HOME variable specified above)
# &amp;gt;&amp;gt;scrape_log.txt 2&amp;gt;&amp;amp;1: Save the output to scrape_log.txt (which we created) and DON&amp;#39;T send an email
# because we don&amp;#39;t want to received 29 emails.

00 12 * * * /bin/bash sql_query.sh
# Instead of receiving 29 emails, run a query the minute after the scraping ends
# to filter how many rows were added between 11:30 and 11:59
# By default it will send the result of the query to your email&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Great but what does &lt;code&gt;scrape_bicing.R&lt;/code&gt; have?&lt;/p&gt;
&lt;p&gt;The script should do something along the lines of:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Load libraries
library(httr)
library(DBI)
library(RMySQL)

# The url of your api
api_url &amp;lt;- &amp;quot;bla/bla&amp;quot;

# Wrap GET so that whenever the request fails it returns an R error
my_GET &amp;lt;- function(x, config = list(), ...) {
  stop_for_status(GET(url = x, config = config, ...))
}

# If it can&amp;#39;t connect to the API will throw an R error
test_bike &amp;lt;- my_GET(api_url)


## Do API calls here
## I assume the result is a data.frame or something like that
## It should have the same column names as the SQL database.

# Establish the connection to the database.
# This script is run within the server, so the connection
# should not specify the server ip, it assumes it&amp;#39;s
# the localhost

con &amp;lt;- dbConnect(MySQL(),
                 dbname = database_name, # in &amp;quot;&amp;quot; quotes
                 user = your_user, # in &amp;quot;&amp;quot; quotes
                 password = your_password, # in &amp;quot;&amp;quot; quotes
                 port = 3306)

# Append the table
write_success &amp;lt;-
  dbWriteTable(conn = con, # connection from above
              &amp;quot;table name&amp;quot;, # name of the table to append (in quotes)
              api output, # data frame from the API output
              append = TRUE, row.names = FALSE) # to append instead of overwrite and ignore row.names

# Write your results to the database. In my API call
# I considered many possible errors and coded the request
# very defensively, running the script many times under certain
# scenarios (no internet, getting different results).
# If you get unexpected results from your API request then this step will
# not succeed.


# If the append was successfull, write_success should be TRUE
if (write_success) print(&amp;quot;Append success&amp;quot;) else print(&amp;quot;No success&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Something to keep in mind, by default you can connect from the your local computer to the remote DB by port 3306. This port can be closed if you’re in a public internet network or a network connection from a university. If you can’t connect, make you sort this out with the personnel from that network (it happened to me with my university network).&lt;/p&gt;
&lt;p&gt;What does &lt;code&gt;sql_query.sh&lt;/code&gt; have?&lt;/p&gt;
&lt;p&gt;A very simple SQL query:&lt;/p&gt;
&lt;pre class=&#34;sql&#34;&gt;&lt;code&gt;read PASS &amp;lt; pw.txt /* Read the password from a pw.txt file you create with your user pasword*/

mysql -uroot -p$PASS database_name -e &amp;quot;SELECT id, error_msg, COUNT(*) AS count FROM bicing_station WHERE time &amp;gt;= CONCAT(CURDATE(),&amp;#39; &amp;#39;,&amp;#39;11:30:00&amp;#39;) AND time &amp;lt;= CONCAT(CURDATE(),&amp;#39; &amp;#39;,&amp;#39;12:00:00&amp;#39;) GROUP BY id, error_msg;&amp;quot;

/*
mysql: run mysql

-uroot: specify your mysql username (note there are no spaces)

-p$PASS: -p is for password and $PASS is the variable with the password

database_name: is the data base name

-e: is short for -execute a query

The remaining is the query to execute. I would make sure the query
works by running this same line in the server interactively.

What this query means is to get the counts of the id and error messages
where the time is between the scheduele cron of the API request.

This way I get a summary of the error messages and how many lines were
appended between the time the script should&amp;#39;ve started and should&amp;#39;ve ended
*/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As stated in the first line of the code chunk, create a text file with your password. You can do so with &lt;code&gt;echo &amp;quot;Your SQL username password&amp;quot; &amp;gt;&amp;gt; pw.txt&lt;/code&gt;. That should allow PASS to read in the password just fine.&lt;/p&gt;
&lt;p&gt;And that should be it! Make sure you run each of these steps separately so that they work on it’s own and you don’get weird errors. This workflow will now run &lt;code&gt;cron&lt;/code&gt; jobs at whatever time you set it, return the output to a text file (in case something bad happens and you want to look at the log) and run a query after it finishes so that you only get one email with a summary of API requests.&lt;/p&gt;
&lt;p&gt;Hope this was helpful!&lt;/p&gt;
&lt;p&gt;PS:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.digitalocean.com/community/tutorials/a-basic-mysql-tutorial&#34;&gt;Basic MySQL tutorial&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I use SQL Workbench to run queries from my local computer&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>How long should I wait for my bike?</title>
      <link>/blog/2017-12-01-how-long-should-i-wait-for-my-bike/how-long-should-i-wait-for-my-bike/</link>
      <pubDate>Fri, 01 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/blog/2017-12-01-how-long-should-i-wait-for-my-bike/how-long-should-i-wait-for-my-bike/</guid>
      <description>&lt;p&gt;I’ve just started a project which I’m very excited about. Everyday I take my bike to work and most days I have one of two problems. First, whenever I get to my station there are no bikes available; no problem, there’s an app that shows the closest stations with bikes available. The problem is that these stations might be far and sometimes I’m relucant to walk that much. I’d love for bicing to give me some time estimation until a new bike arrives.&lt;/p&gt;
&lt;p&gt;Second, whenever you’re trying to return a bike the station might not have any parking spaces available. Similarly, it would be very cool if bicing (the public bicycle company) gave me an estimate of how much time I should wait until a new bike will be taken. I started thinking on how I could implement this and started looking for bicing data online. To my surprise, bicing actually releases their &lt;strong&gt;live&lt;/strong&gt; data as a json! But for this type of estimation I need historical data. I want to know the pattern usage of the station and use that information for the prediction.&lt;/p&gt;
&lt;p&gt;With that idea in mind, I got to work. I needed to set up my Virtual Private Server (VPS) to pull the data from the bicing API everyday. Because this is still a work in progress, I will only describe here how I set my VPS to scrape the bicing API everyday and how I set &lt;code&gt;cron&lt;/code&gt; to send me an email after every scrape.&lt;/p&gt;
&lt;p&gt;I have a VPS from &lt;a href=&#34;https://www.digitalocean.com/&#34;&gt;Digital Ocean&lt;/a&gt; with an Ubuntu OS and 512 mb of RAM and 2 GB of hard disk. That’s enough for this task because the data should not be very big, even in the long run. In any case you can adjust for your VPS to have more memory/ram without losing information. Assuming you have &lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-install-r-on-ubuntu-16-04-2&#34;&gt;R installed in your Ubuntu VPS&lt;/a&gt; with your favorite packages, then make sure your script works by running &lt;code&gt;Rscript path/to/your/script.R&lt;/code&gt;. It might be better to type &lt;code&gt;which Rscript&lt;/code&gt; in the terminal and paste the path to the executable, similar to &lt;code&gt;/usr/bin/Rscript path/to/your/script.R&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;My workflow is as follows: I first create an empty dataset saved as &lt;code&gt;.rds&lt;/code&gt; and my script reads the data, scrapes the bicing data and then saves the data by appending both the empty and the scraped data. It finishes by saving the same &lt;code&gt;.rds&lt;/code&gt; for a later scrape. I tested this very thoroughly to make sure the script wouldn’t fail and I always get the expected data.&lt;/p&gt;
&lt;p&gt;All good so far, right? This took me no time. The hard problem came when setting the &lt;code&gt;cron&lt;/code&gt; job, which is a way of scheduling tasks in OSx and Ubuntu. For an explanation of how &lt;code&gt;cron&lt;/code&gt; works, check out how I set &lt;a href=&#34;blog/2017-03-08-my-pisa-twitter-bot/my-pisa-twitter-bot/index.html&#34;&gt;my PISA twitter bot&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First, make sure you have &lt;code&gt;cron&lt;/code&gt; &lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-use-cron-to-automate-tasks-on-a-vps&#34;&gt;installed&lt;/a&gt;. I followed &lt;strong&gt;a lot&lt;/strong&gt; of tutorials and dispered information. What worked for me perhaps does not work for you, but here it is.&lt;/p&gt;
&lt;p&gt;Type &lt;code&gt;crontab -e&lt;/code&gt; and the cron interface should appear. The lines starting with &lt;code&gt;#&lt;/code&gt; are coments, so scroll down until the end of the comments. First we have to set a few environmental variables that &lt;code&gt;cron&lt;/code&gt; uses to execute your script. I followed &lt;a href=&#34;http://krisjordan.com/essays/timesaving-crontab-tips&#34;&gt;these tips&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When I finished my crontab looked like this:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;SHELL=/bin/bash
PATH=/home/cimentadaj/bin:/home/cimentadaj/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
HOME=/home/cimentadaj/bicycle
MAILTO=my_email # set email here!
15,50 16  * * * /usr/bin/Rscript scrape_bicing.R&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;SHELL is the path to the pre-determined program to run on the cron job. Be default I set it to bash (but it could be anything else you want).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;PATH I’m not sure what’s for but I pasted the output of &lt;code&gt;echo $PATH&lt;/code&gt;, as the tips suggested.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;HOME is the root directory where the script will be executed, I set it to where the script is (or where your project is at).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;MAILTO is the email where I will get the cron job alert when it finishes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;15,50 16  * * * /usr/bin/Rscript scrape_bicing.R&lt;/code&gt; is the schedule, program and script to run. Here I set arbitrary times, so the the script is scheduled to run at &lt;code&gt;16:15&lt;/code&gt; and &lt;code&gt;16:50&lt;/code&gt; every day, every month and every year. I will run using &lt;code&gt;Rscript&lt;/code&gt; and the name of the script to run.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;WARNING:&lt;/strong&gt; remember that the &lt;code&gt;cron&lt;/code&gt; is set relative to the time of where your server is. Mine did not have the same timezone of where I lived, so I had to set the &lt;code&gt;cron&lt;/code&gt; one hour before of my actual time. Use &lt;code&gt;date&lt;/code&gt; to print the time of your VPS.&lt;/p&gt;
&lt;p&gt;Even after this, the &lt;code&gt;cron&lt;/code&gt; job was still not running. Nothing, no email, no log, no change in the data. I then figured out that Ubuntu systems have some &lt;a href=&#34;https://serverfault.com/a/754104&#34;&gt;pecularities&lt;/a&gt; when it comes to &lt;code&gt;cron&lt;/code&gt;. So I went to &lt;code&gt;./etc/&lt;/code&gt; and renamed every &lt;code&gt;cron.&lt;/code&gt; file for &lt;code&gt;cron-&lt;/code&gt; with &lt;code&gt;rename &#39;s/cron./cron-/g&#39; *&lt;/code&gt;, thanks to this &lt;a href=&#34;https://stackoverflow.com/a/20657563/3617958&#34;&gt;answer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Run again and it worked! Great. However, I didn’t receive an email stating that the &lt;code&gt;cron&lt;/code&gt; job finished. I looked up many solutions and ended up installing &lt;code&gt;ssmtp&lt;/code&gt; which is a library for sending emails from terminal. I won’t bore you with the details. Here are the steps I took:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Install &lt;code&gt;ssmtp&lt;/code&gt; with &lt;code&gt;sudo apt-get update&lt;/code&gt; and &lt;code&gt;sudo apt-get install ssmtp&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Edit &lt;code&gt;ssmtp.conf&lt;/code&gt; with &lt;code&gt;sudo nano /etc/ssmtp/ssmtp.conf&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here’s the config that worked for me using &lt;code&gt;gmail&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;# Config file for sSMTP sendmail
#
# The person who gets all mail for userids &amp;lt; 1000
# Make this empty to disable rewriting.
root=your_email@gmail.com

# The place where the mail goes. The actual machine name is required no 
# MX records are consulted. Commonly mailhosts are named mail.domain.com
mailhub=smtp.gmail.com:587

AuthUser=your_email@gmail.com
AuthPass=your_password
UseTLS=YES
UseSTARTTLS=yes
TLS_CA_FILE=/etc/ssl/certs/ca-certificates.crt

# Where will the mail seem to come from?
#rewriteDomain=gmail.com

# The full hostname
hostname=your_host_name

# Are users allowed to set their own From: address?
# YES - Allow the user to specify their own From: address
# NO - Use the system generated From: address
#FromLineOverride=YES&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Three caveats that took me a lot of time to figure out.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;First, &lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-use-google-s-smtp-server&#34;&gt;some docs&lt;/a&gt; say you should use another port in &lt;code&gt;mailhub&lt;/code&gt;, but &lt;code&gt;587&lt;/code&gt; worked for me.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;TLS_CA_FILE&lt;/code&gt;: make sure that &lt;a href=&#34;https://askubuntu.com/questions/342484/etc-pki-tls-certs-ca-bundle-crt-not-found&#34;&gt;this file exists&lt;/a&gt;! For Ubuntu/Debian the file is at &lt;code&gt;/etc/ssl/certs/ca-certificates.crt&lt;/code&gt; while on other platforms it might be in &lt;code&gt;/etc/pki/tls/certs/ca-bundle.crt&lt;/code&gt;. Note the different file names!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;hostname&lt;/code&gt; should be the result of typing &lt;code&gt;hostname&lt;/code&gt; in your server.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lastly, I also added the line &lt;code&gt;root:your_EMAIL_@gmail.com:smtp.gmail.com:587&lt;/code&gt; with &lt;code&gt;sudo nano /etc/ssmtp/revaliases&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;After an entire day figuring out all this information, the &lt;code&gt;cron&lt;/code&gt; job worked! I now set my &lt;code&gt;cron&lt;/code&gt; job and whenever it finished I receive an email directly showing the log of the script.&lt;/p&gt;
&lt;p&gt;I wrote this primarily for me not to forget any of this, but it might be useful for other people.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Scraping and visualizing How I Met Your Mother</title>
      <link>/blog/2017-10-16-scraping-and-visualizing-how-i-met-your-mother/scraping-and-visualizing-how-i-met-your-mother/</link>
      <pubDate>Mon, 16 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/blog/2017-10-16-scraping-and-visualizing-how-i-met-your-mother/scraping-and-visualizing-how-i-met-your-mother/</guid>
      <description>&lt;p&gt;How I Met Your Mother (HIMYM from here after) is a television series very similar to the classical ‘Friends’ series from the 90’s. Following the release of the &lt;a href=&#34;http://tidytextmining.com/&#34;&gt;tidy text&lt;/a&gt; book I was looking for a project in which I could apply these skills. I decided I would scrape all the transcripts from HIMYM and analyze patterns between characters. This post really took me to the limit in terms of web scraping and pattern matching, which was specifically what I wanted to improve in the first place. Let’s begin!&lt;/p&gt;
&lt;p&gt;My first task was whether there was any consistency in the URL’s that stored the transcripts. If you ever watched HIMYM, we know there’s around nine seasons, each one with about 22 episodes. This makes about 200 episodes give or take. It would be a big pain to manually write down 200 complicated URL’s. Luckily, there is a way of finding the 200 links without writing them down manually.&lt;/p&gt;
&lt;p&gt;First, we create the links for the 9 websites that contain all episodes (1 through season 9)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(rvest)
library(tidyverse)
library(stringr)
library(tidytext)

main_url &amp;lt;- &amp;quot;http://transcripts.foreverdreaming.org&amp;quot;
all_pages &amp;lt;- paste0(&amp;quot;http://transcripts.foreverdreaming.org/viewforum.php?f=177&amp;amp;start=&amp;quot;, seq(0, 200, 25))
characters &amp;lt;- c(&amp;quot;ted&amp;quot;, &amp;quot;lily&amp;quot;, &amp;quot;marshall&amp;quot;, &amp;quot;barney&amp;quot;, &amp;quot;robin&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Each of the URL’s of &lt;code&gt;all_pages&lt;/code&gt; contains all episodes for that season (so around 22 URL’s). I also picked the characters we’re gonna concentrate for now. From here the job is very easy. We create a function that reads each link and parses the section containing all links for that season. We can do that using &lt;a href=&#34;http://selectorgadget.com/.&#34;&gt;SelectorGadget&lt;/a&gt; to find the section we’re interested in. We then search for the &lt;code&gt;href&lt;/code&gt; attribute to grab all links in that attribute and finally create a tibble with each episode together with it’s link.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;episode_getter &amp;lt;- function(link) {
  title_reference &amp;lt;-
    link %&amp;gt;%
    read_html() %&amp;gt;%
    html_nodes(&amp;quot;.topictitle&amp;quot;) # Get the html node name with &amp;#39;selector gadget&amp;#39;
  
  episode_links &amp;lt;-
    title_reference %&amp;gt;%
    html_attr(&amp;quot;href&amp;quot;) %&amp;gt;%
    gsub(&amp;quot;^.&amp;quot;, &amp;quot;&amp;quot;, .) %&amp;gt;%
    paste0(main_url, .) %&amp;gt;%
    setNames(title_reference %&amp;gt;% html_text()) %&amp;gt;%
    enframe(name = &amp;quot;episode_name&amp;quot;, value = &amp;quot;link&amp;quot;)
  
  episode_links
}

all_episodes &amp;lt;- map_df(all_pages, episode_getter) # loop over all seasons and get all episode links
all_episodes$id &amp;lt;- 1:nrow(all_episodes)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There we go! Now we have a very organized &lt;code&gt;tibble&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;all_episodes
# # A tibble: 208 x 3
#    episode_name                   link                                  id
#    &amp;lt;chr&amp;gt;                          &amp;lt;chr&amp;gt;                              &amp;lt;int&amp;gt;
#  1 01x01 - Pilot                  http://transcripts.foreverdreamin~     1
#  2 01x02 - Purple Giraffe         http://transcripts.foreverdreamin~     2
#  3 01x03 - Sweet Taste of Liberty http://transcripts.foreverdreamin~     3
#  4 01x04 - Return of the Shirt    http://transcripts.foreverdreamin~     4
#  5 01x05 - Okay Awesome           http://transcripts.foreverdreamin~     5
#  6 01x06 - Slutty Pumpkin         http://transcripts.foreverdreamin~     6
#  7 01x07 - Matchmaker             http://transcripts.foreverdreamin~     7
#  8 01x08 - The Duel               http://transcripts.foreverdreamin~     8
#  9 01x09 - Belly Full of Turkey   http://transcripts.foreverdreamin~     9
# 10 01x10 - The Pineapple Incident http://transcripts.foreverdreamin~    10
# # ... with 198 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The remaining part is to actually scrape the text from each episode. We can work that out for a single episode and then turn that into a function and apply for all episodes.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;episode_fun &amp;lt;- function(file) {
  
  file %&amp;gt;%
    read_html() %&amp;gt;%
    html_nodes(&amp;quot;.postbody&amp;quot;) %&amp;gt;%
    html_text() %&amp;gt;%
    str_split(&amp;quot;\n|\t&amp;quot;) %&amp;gt;%
    .[[1]] %&amp;gt;%
    data_frame(text = .) %&amp;gt;%
    filter(str_detect(text, &amp;quot;&amp;quot;), # Lots of empty spaces
           !str_detect(text, &amp;quot;^\\t&amp;quot;), # Lots of lines with \t to delete
           !str_detect(text, &amp;quot;^\\[.*\\]$&amp;quot;), # Text that start with brackets
           !str_detect(text, &amp;quot;^\\(.*\\)$&amp;quot;), # Text that starts with parenthesis
           str_detect(text, &amp;quot;^*.:&amp;quot;), # I want only lines with start with dialogue (:)
           !str_detect(text, &amp;quot;^ad&amp;quot;)) # Remove lines that start with ad (for &amp;#39;ads&amp;#39;, the link of google ads)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above function reads each episode, turns the html text into a data frame and organizes it clearly for text analysis. For example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;episode_fun(all_episodes$link[15])
# # A tibble: 195 x 1
#    text                                                                   
#    &amp;lt;chr&amp;gt;                                                                  
#  1 Ted from 2030: Kids, something you might not know about your Uncle Mar~
#  2 &amp;quot;Ted: You don&amp;#39;t have to shout out \&amp;quot;poker\&amp;quot; when you win.&amp;quot;             
#  3 Marshall: I know. It&amp;#39;s just fun to say.                                
#  4 &amp;quot;Ted from 2030: We all finally agreed Marshall should be running our g~
#  5 &amp;quot;Marshall: It&amp;#39;s called \&amp;quot;Marsh-gammon.\&amp;quot; It combines all the best feat~
#  6 Robin: Backgammon, obviously.                                          
#  7 &amp;quot;Marshall: No. Backgammon sucks. I took the only good part of backgamm~
#  8 Lily: I&amp;#39;m so excited Victoria&amp;#39;s coming.                                
#  9 Robin: I&amp;#39;m going to go get another round.                              
# 10 Ted: Okay, I want to lay down some ground rules for tonight. Barney, I~
# # ... with 185 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We now have a data frame with only dialogue for each character. We need to apply that function to each episode and &lt;code&gt;bind&lt;/code&gt; everything together. We first apply the function to every episode.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;all_episodes$text &amp;lt;- map(all_episodes$link, episode_fun)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;text&lt;/code&gt; list-column is an organized list with text for each episode. However, manual inspection of some episodes actually denotes a small error that limits our analysis greatly. Among the main interests of this document is to study relationships and presence between characters. For that, we need each line of text to be accompanied by the character who said it. Unfortunately, some of these scripts don’t have that.&lt;/p&gt;
&lt;p&gt;For example, check any episode from season &lt;a href=&#34;http://transcripts.foreverdreaming.org/viewforum.php?f=177&amp;amp;start=175&#34;&gt;8&lt;/a&gt; and &lt;a href=&#34;http://transcripts.foreverdreaming.org/viewforum.php?f=177&amp;amp;start=200&#34;&gt;9&lt;/a&gt;. The writer didn’t write the dialogue and just rewrote the lines. There’s nothing we can do so far to improve that and we’ll be excluding these episodes. This pattern is also present in random episodes like in season 4 or season 6. We can exclude chapters based on the number of lines we parsed. On average, each of these episodes has about 200 lines of dialogue. Anything significantly lower, like 30 or 50 lines, is an episode which doesn’t have a lot of dialogue.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;all_episodes$count &amp;lt;- map_dbl(all_episodes$text, nrow)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can extend the previous &lt;code&gt;tibble&lt;/code&gt; to be a bit more organized by separating the episode-season column into separate season and episo numbers.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;all_episodes &amp;lt;-
  all_episodes %&amp;gt;%
  separate(episode_name, c(&amp;quot;season&amp;quot;, &amp;quot;episode&amp;quot;), &amp;quot;-&amp;quot;, extra = &amp;quot;merge&amp;quot;) %&amp;gt;%
  separate(season, c(&amp;quot;season&amp;quot;, &amp;quot;episode_number&amp;quot;), sep = &amp;quot;x&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Great! We now have a very organized &lt;code&gt;tibble&lt;/code&gt; with all the information we need. Next step is to actually break down the lines into words and start looking for general patterns. We can do that by looping through all episodes that have over 100 lines (just an arbitrary threshold) and unnesting each line for each &lt;strong&gt;valid&lt;/strong&gt; character.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lines_characters &amp;lt;-
  map(filter(all_episodes, count &amp;gt; 100) %&amp;gt;% pull(text), ~ { 
    # only loop over episodes that have over 100 lines
    .x %&amp;gt;%
      separate(text, c(&amp;quot;character&amp;quot;, &amp;quot;text&amp;quot;), sep = &amp;quot;:&amp;quot;, extra = &amp;#39;merge&amp;#39;) %&amp;gt;%
      # separate character dialogue from actual dialogo
      unnest_tokens(character, character) %&amp;gt;%
      filter(str_detect(character, paste0(paste0(&amp;quot;^&amp;quot;, characters, &amp;quot;$&amp;quot;), collapse = &amp;quot;|&amp;quot;))) %&amp;gt;%
      # only count the lines of our chosen characters
      mutate(episode_lines_id = 1:nrow(.))
  }) %&amp;gt;%
  setNames(filter(all_episodes, count &amp;gt; 100) %&amp;gt;% # name according to episode
             unite(season_episode, season, episode_number, sep = &amp;quot;x&amp;quot;) %&amp;gt;%
             pull(season_episode)) %&amp;gt;%
  enframe() %&amp;gt;%
  unnest() %&amp;gt;%
  mutate(all_lines_id = 1:nrow(.))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ok, our text is sort of ready. Let’s remove some bad words.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;words_per_character &amp;lt;-
  lines_characters %&amp;gt;%
  unnest_tokens(word, text) %&amp;gt;% # expand all sentences into words
  anti_join(stop_words) %&amp;gt;% # remove bad words
  filter(!word %in% characters) %&amp;gt;% # only select characters we&amp;#39;re interested
  arrange(name) %&amp;gt;%
  separate(name, c(&amp;quot;season&amp;quot;, &amp;quot;episode&amp;quot;), sep = &amp;quot;x&amp;quot;, remove = FALSE) %&amp;gt;%
  mutate(name = factor(name, ordered = TRUE),
         season = factor(season, ordered = TRUE),
         episode = factor(episode, ordered = TRUE)) %&amp;gt;%
  filter(season != &amp;quot;07&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Just to make sure, let’s look at the &lt;code&gt;tibble&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;words_per_character
# # A tibble: 88,174 x 7
#    name     season episode character episode_lines_id all_lines_id word   
#    &amp;lt;ord&amp;gt;    &amp;lt;ord&amp;gt;  &amp;lt;ord&amp;gt;   &amp;lt;chr&amp;gt;                &amp;lt;int&amp;gt;        &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;  
#  1 &amp;quot;01x01 &amp;quot; 01     &amp;quot;01 &amp;quot;   marshall                 1            1 ring   
#  2 &amp;quot;01x01 &amp;quot; 01     &amp;quot;01 &amp;quot;   marshall                 1            1 marry  
#  3 &amp;quot;01x01 &amp;quot; 01     &amp;quot;01 &amp;quot;   ted                      2            2 perfect
#  4 &amp;quot;01x01 &amp;quot; 01     &amp;quot;01 &amp;quot;   ted                      2            2 engaged
#  5 &amp;quot;01x01 &amp;quot; 01     &amp;quot;01 &amp;quot;   ted                      2            2 pop    
#  6 &amp;quot;01x01 &amp;quot; 01     &amp;quot;01 &amp;quot;   ted                      2            2 champa~
#  7 &amp;quot;01x01 &amp;quot; 01     &amp;quot;01 &amp;quot;   ted                      2            2 drink  
#  8 &amp;quot;01x01 &amp;quot; 01     &amp;quot;01 &amp;quot;   ted                      2            2 toast  
#  9 &amp;quot;01x01 &amp;quot; 01     &amp;quot;01 &amp;quot;   ted                      2            2 kitchen
# 10 &amp;quot;01x01 &amp;quot; 01     &amp;quot;01 &amp;quot;   ted                      2            2 floor  
# # ... with 88,164 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Perfect! One row per word, per character, per episode with the id of the line of the word.&lt;/p&gt;
&lt;p&gt;Alright, let’s get our hands dirty. First, let visualize the presence of each character in terms of words over time.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Filtering position of first episode of all seasons to
# position the X axis in the next plot.
first_episodes &amp;lt;-
  all_episodes %&amp;gt;%
  filter(count &amp;gt; 100, episode_number == &amp;quot;01 &amp;quot;) %&amp;gt;%
  pull(id)

words_per_character %&amp;gt;%
  split(.$name) %&amp;gt;%
  setNames(1:length(.)) %&amp;gt;%
  enframe(name = &amp;quot;episode_id&amp;quot;) %&amp;gt;%
  unnest() %&amp;gt;%
  count(episode_id, character) %&amp;gt;%
  group_by(episode_id) %&amp;gt;%
  mutate(total_n = sum(n),
         perc = round(n / total_n, 2)) %&amp;gt;%
  ggplot(aes(as.numeric(episode_id), perc, group = character, colour = character)) +
  geom_line() +
  geom_smooth(method = &amp;quot;lm&amp;quot;) +
  scale_colour_discrete(guide = FALSE) +
  scale_x_continuous(name = &amp;quot;Seasons&amp;quot;,
                     breaks = first_episodes, labels = paste0(&amp;quot;S&amp;quot;, 1:7)) +
  scale_y_continuous(name = &amp;quot;Percentage of words per episode&amp;quot;) +
  theme_minimal() +
  facet_wrap(~ character, ncol = 3)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/blog/2017-10-16-scraping-and-visualizing-how-i-met-your-mother/2017-10-16-scraping-and-visualizing-how-i-met-your-mother_files/figure-html/unnamed-chunk-13-1.png&#34; width=&#34;768&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Ted is clearly the character with the highest number of words per episode followed by Barney. Lily and Robin, the only two women have very low presence compared to the men. In fact, if one looks closely, Lily seemed to have decreased slightly over time, having an all time low in season 4. Marshall, Lily’s partner in the show, does have much lower presence than both Barney and Ted but he has been catching up over time.&lt;/p&gt;
&lt;p&gt;We also see an interesting pattern where Barney has a lot of peaks, suggesting that in some specific episodes he gains predominance, where Ted has an overall higher level of words per episode. And when Ted has peaks, it’s usually below its trend-line.&lt;/p&gt;
&lt;p&gt;Looking at the distribution:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# devtools::install_github(&amp;quot;clauswilke/ggjoy&amp;quot;)
library(ggjoy)

words_per_character %&amp;gt;%
  split(.$name) %&amp;gt;%
  setNames(1:length(.)) %&amp;gt;%
  enframe(name = &amp;quot;episode_id&amp;quot;) %&amp;gt;%
  unnest() %&amp;gt;%
  count(season, episode_id, character) %&amp;gt;%
  group_by(episode_id) %&amp;gt;%
  mutate(total_n = sum(n),
         perc = round(n / total_n, 2)) %&amp;gt;%
  ggplot(aes(x = perc, y = character, fill = character)) +
  geom_joy(scale = 0.85) +
  scale_fill_discrete(guide = F) +
  scale_y_discrete(name = NULL, expand=c(0.01, 0)) +
  scale_x_continuous(name = &amp;quot;Percentage of words&amp;quot;, expand=c(0.01, 0)) +
  ggtitle(&amp;quot;Percentage of words per season&amp;quot;) +
  facet_wrap(~ season, ncol = 7) +
  theme_minimal()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/blog/2017-10-16-scraping-and-visualizing-how-i-met-your-mother/2017-10-16-scraping-and-visualizing-how-i-met-your-mother_files/figure-html/unnamed-chunk-14-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;we see the differences much clearer. For example, we see Barney’s peaks through out every season with Season 6 seeing a clear peak of 40%. On the other hand, we see that their distributions don’t change that much over time! Suggesting that the presence of each character is very similar in all seasons. Don’t get me wrong, there are differences like Lily in Season 2 and then in Season 6, but in overall terms the previous plot suggests no increase over seasons, and this plot suggests that between seasons, there’s not a lot of change in their distributions that affects the overall mean.&lt;/p&gt;
&lt;p&gt;If you’ve watched the TV series, you’ll remember Barney always repeating one similar trademark word: legendary! Although it is a bit cumbersome for us to count the number of occurrences of that sentence once we unnested each sentence, we can at least count the number of words per character and see whether some characters have particular words.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;count_words &amp;lt;-
  words_per_character %&amp;gt;%
  filter(!word %in% characters) %&amp;gt;%
  count(character, word, sort = TRUE)

count_words %&amp;gt;%
  group_by(character) %&amp;gt;%
  top_n(20) %&amp;gt;%
  ggplot(aes(reorder(word, n), n)) +
  geom_col(alpha = 0.8) +
  coord_flip() +
  facet_wrap(~ character, scales = &amp;quot;free_y&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/blog/2017-10-16-scraping-and-visualizing-how-i-met-your-mother/2017-10-16-scraping-and-visualizing-how-i-met-your-mother_files/figure-html/unnamed-chunk-15-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Here we see that a lot of the words we capture are actually nouns or expressions which are common to everyone, such as ‘yeah’, ‘hey’ or ‘time’. We can weight down commonly used words for other words which are important but don’t get repeated a lot. We can exclude those words using &lt;code&gt;bind_tf_idf()&lt;/code&gt;, which for each character decreases the weight for commonly used words and increases the weight for words that are not used very much in a collection or corpus of documents (see 3.3 in &lt;a href=&#34;http://tidytextmining.com/tfidf.html&#34; class=&#34;uri&#34;&gt;http://tidytextmining.com/tfidf.html&lt;/a&gt;).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;count_words %&amp;gt;%
  bind_tf_idf(word, character, n) %&amp;gt;%
  arrange(desc(tf_idf)) %&amp;gt;%
  group_by(character) %&amp;gt;%
  top_n(20) %&amp;gt;%
  ggplot(aes(reorder(word, n), n)) +
  geom_col(alpha = 0.8) +
  coord_flip() +
  facet_wrap(~ character, scales = &amp;quot;free_y&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/blog/2017-10-16-scraping-and-visualizing-how-i-met-your-mother/2017-10-16-scraping-and-visualizing-how-i-met-your-mother_files/figure-html/unnamed-chunk-16-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now Barney has a very distinctive word usage, one particularly sexist with words such as couger, bang and tits. Also, we see the word legendary as the thirdly repeated word, something we were expecting! On the other hand, we see Ted with things like professor (him), aunt (because of aunt Lily and such).&lt;/p&gt;
&lt;p&gt;Knowing that Ted is the main character in the series is no surprise. To finish off, we’re interested in knowing which characters are related to each other. First, let’s turn the data frame into a suitable format.&lt;/p&gt;
&lt;p&gt;Here we turn all lines to lower case and check which characters are present in the text of each dialogue. The loop will return a vector of logicals whether there was a mention of any of the characters. For simplicity I exclude all lines where there is more than 1 mention of a character, that is, 2 or more characters.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lines_characters &amp;lt;-
  lines_characters %&amp;gt;%
  mutate(text = str_to_lower(text))

rows_fil &amp;lt;-
  map(characters, ~ str_detect(lines_characters$text, .x)) %&amp;gt;%
  reduce(`+`) %&amp;gt;%
  ifelse(. &amp;gt;= 2, 0, .) # excluding sentences which have 2 or more mentions for now
  # ideally we would want to choose to count the number of mentions
  # per line or randomly choose another a person that was mentioned.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we have the rows that have a mention of another character, we subset only those rows. Then we want know which character was mentioned in which line. I loop through each line and test which character is present in that specific dialogue line. The loop returns the actual character name for each dialogue. Because we already filtered lines that &lt;strong&gt;have&lt;/strong&gt; a character name mentioned, the loop should return a vector of the same length.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;character_relation &amp;lt;-
  lines_characters %&amp;gt;%
  filter(as.logical(rows_fil)) %&amp;gt;%
  mutate(who_said_what =
           map_chr(.$text, ~ { # loop over all each line
             who_said_what &amp;lt;- map_lgl(characters, function(.y) str_detect(.x, .y))
             # loop over each character and check whether he/she was mentioned
             # in that line
             characters[who_said_what]
             # subset the character that matched
           }))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we plot the relationship using the &lt;code&gt;ggraph&lt;/code&gt; package.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggraph)
library(igraph)

character_relation %&amp;gt;%
  count(character, who_said_what) %&amp;gt;%
  graph_from_data_frame() %&amp;gt;%
  ggraph(layout = &amp;quot;linear&amp;quot;, circular = TRUE) +
  geom_edge_arc(aes(edge_alpha = n, edge_width = n),
                width = 2.5, show.legend = FALSE) +
  geom_node_text(aes(label = name), repel = TRUE) +
  theme_void()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/blog/2017-10-16-scraping-and-visualizing-how-i-met-your-mother/2017-10-16-scraping-and-visualizing-how-i-met-your-mother_files/figure-html/unnamed-chunk-19-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;A very clear pattern emerges. There is a strong relationship between Robin and Barney towards Ted. In fact, their direct relationship is very weak, but both are very well connected to Ted. On the other hand, Marshall and Lily are also reasonably connected to Ted but with a weaker link. Both of them are indeed very connected, as should be expected since they were a couple in the TV series.&lt;/p&gt;
&lt;p&gt;We also see that the weakest members of the group are Robin and Barney with only strong bonds toward Ted but no strong relationship with the other from the group. Overall, there seems to be a division: Marshall and Lily hold a somewhat close relationship with each other and towards Ted and Barney and Robin tend to be related to Ted but no one else.&lt;/p&gt;
&lt;p&gt;As a follow-up question, is this pattern of relationships the same across all seasons? We can do that very quickly by filtering each season using the previous plot.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(cowplot)

# Loop through each season
seasons &amp;lt;- paste0(0, 1:7)

all_season_plots &amp;lt;- lapply(seasons, function(season_num) {

  set.seed(2131)
  
  character_relation %&amp;gt;%
    # Extract the season number from the `name` column
    mutate(season = str_replace_all(character_relation$name, &amp;quot;x(.*)$&amp;quot;, &amp;quot;&amp;quot;)) %&amp;gt;%
    filter(season == season_num) %&amp;gt;%
    count(character, who_said_what) %&amp;gt;%
    graph_from_data_frame() %&amp;gt;%
    ggraph(layout = &amp;quot;linear&amp;quot;, circular = TRUE) +
    geom_edge_arc(aes(edge_alpha = n, edge_width = n),
                  width = 2.5, show.legend = FALSE) +
    geom_node_text(aes(label = name), repel = TRUE) +
    theme_void()
})

# Plot all graphs side-by-side
cowplot::plot_grid(plotlist = all_season_plots, labels = seasons)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/blog/2017-10-16-scraping-and-visualizing-how-i-met-your-mother/2017-10-16-scraping-and-visualizing-how-i-met-your-mother_files/figure-html/unnamed-chunk-20-1.png&#34; width=&#34;960&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;There are reasonable changes for all non-Ted relationship! For example, for season 2 the relationship Marshall-Lily-Ted becomes much stronger and it disappears in season 3. Let’s remember that these results might be affected by the fact that I excluded some episodes because of low number of dialogue lines. Keeping that in mind, we also see that for season 7 the Robin-Barney relationship became much stronger (is this the season the started dating?). All in all, the relationships don’t look dramatically different from the previous plot. Everyone seems to be strongly related to Ted. The main difference is the changes in relationship between the other members of the cast.&lt;/p&gt;
&lt;p&gt;This dataset has a lot of potential and I’m sure I’ve scratched the surface of what one can do with this data. I encourage anyone interested in the topic to use the code to analyze the data further. One idea I might explore in the future is to build a model that attempts to predict who said what for all dialogue lines that didn’t have a character member. This can be done by extracting features from all sentences and using these patterns try to classify which. Any feedback is welcome, so feel free to message me at &lt;a href=&#34;mailto:cimentadaj@gmail.com&#34;&gt;cimentadaj@gmail.com&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
