<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Projects on Jorge Cimentada</title>
    <link>/tags/projects/</link>
    <description>Recent content in Projects on Jorge Cimentada</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Sat, 26 Jan 2019 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="/tags/projects/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Turning a pdf book into machine readable format</title>
      <link>/blog/2019-01-26-turning-a-pdf-book-into-machine-readable-format/turning-a-pdf-book-into-machine-readable-format/</link>
      <pubDate>Sat, 26 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019-01-26-turning-a-pdf-book-into-machine-readable-format/turning-a-pdf-book-into-machine-readable-format/</guid>
      <description>


&lt;p&gt;A few days ago a well known Sociologist, Erik Olin Wright, died from Leukemia. Torkild Lyngstand then &lt;a href=&#34;https://twitter.com/torkildl/status/1088325262758969344&#34;&gt;posted on twitter&lt;/a&gt; his &lt;a href=&#34;https://www.ssc.wisc.edu/~wright/Published%20writing/FallingIntoMarxismChoosingToStay.pdf&#34;&gt;‘intellectual biography’&lt;/a&gt; which is an interesting document that outlines how he ended up being a Marxist. This document is a pdf book that has two actual book pages per pdf page.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/blog/2019-01-26-turning-a-pdf-book-into-machine-readable-format/2019-01-26-turning-a-pdf-book-into-machine-readable-format_files/figure-html/unnamed-chunk-1-1.png&#34; width=&#34;702&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Although this is perfectly fine for reading on a computer, I usually don’t like to read anything longer than 15 pages on my computer. So I decided I would turn this book into machine readable text with R for my Kindle.&lt;/p&gt;
&lt;p&gt;Spoiler: I couldn’t do it, so help me out!&lt;/p&gt;
&lt;p&gt;Firs things first. I will use the &lt;code&gt;magick&lt;/code&gt; and &lt;code&gt;tabulizer&lt;/code&gt; packages. &lt;code&gt;tabulizer&lt;/code&gt; has a dependency with &lt;code&gt;rJava&lt;/code&gt; which is a bit difficult to handle. I wrote &lt;a href=&#34;blog/2018-05-25-installing-rjava-on-windows-10/installing-rjava-on-windows-10/index.html&#34;&gt;this blogpost&lt;/a&gt; explaining how to install &lt;code&gt;rJava&lt;/code&gt; on Windows 10 and it’s helped me inmensely not to waste time in the installation process.&lt;/p&gt;
&lt;p&gt;After installing both packages successfully, I loaded them, and split the pdf into separate pages using &lt;code&gt;tabulizer::split_pdf&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(magick)
Sys.setenv(JAVA_HOME=&amp;quot;C:/Program Files/Java/jdk-11.0.2/&amp;quot;)
library(tabulizer)

url &amp;lt;- &amp;quot;https://www.ssc.wisc.edu/~wright/Published%20writing/FallingIntoMarxismChoosingToStay.pdf&amp;quot;
all_pages &amp;lt;- tabulizer::split_pdf(url)

all_pages&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;C:\\Users\\Cimentadaj\\AppData\\Local\\Temp\\RtmpYnb7KJ\\file1ba438de3ce401.pdf&amp;quot;
##  [2] &amp;quot;C:\\Users\\Cimentadaj\\AppData\\Local\\Temp\\RtmpYnb7KJ\\file1ba438de3ce402.pdf&amp;quot;
##  [3] &amp;quot;C:\\Users\\Cimentadaj\\AppData\\Local\\Temp\\RtmpYnb7KJ\\file1ba438de3ce403.pdf&amp;quot;
##  [4] &amp;quot;C:\\Users\\Cimentadaj\\AppData\\Local\\Temp\\RtmpYnb7KJ\\file1ba438de3ce404.pdf&amp;quot;
##  [5] &amp;quot;C:\\Users\\Cimentadaj\\AppData\\Local\\Temp\\RtmpYnb7KJ\\file1ba438de3ce405.pdf&amp;quot;
##  [6] &amp;quot;C:\\Users\\Cimentadaj\\AppData\\Local\\Temp\\RtmpYnb7KJ\\file1ba438de3ce406.pdf&amp;quot;
##  [7] &amp;quot;C:\\Users\\Cimentadaj\\AppData\\Local\\Temp\\RtmpYnb7KJ\\file1ba438de3ce407.pdf&amp;quot;
##  [8] &amp;quot;C:\\Users\\Cimentadaj\\AppData\\Local\\Temp\\RtmpYnb7KJ\\file1ba438de3ce408.pdf&amp;quot;
##  [9] &amp;quot;C:\\Users\\Cimentadaj\\AppData\\Local\\Temp\\RtmpYnb7KJ\\file1ba438de3ce409.pdf&amp;quot;
## [10] &amp;quot;C:\\Users\\Cimentadaj\\AppData\\Local\\Temp\\RtmpYnb7KJ\\file1ba438de3ce410.pdf&amp;quot;
## [11] &amp;quot;C:\\Users\\Cimentadaj\\AppData\\Local\\Temp\\RtmpYnb7KJ\\file1ba438de3ce411.pdf&amp;quot;
## [12] &amp;quot;C:\\Users\\Cimentadaj\\AppData\\Local\\Temp\\RtmpYnb7KJ\\file1ba438de3ce412.pdf&amp;quot;
## [13] &amp;quot;C:\\Users\\Cimentadaj\\AppData\\Local\\Temp\\RtmpYnb7KJ\\file1ba438de3ce413.pdf&amp;quot;
## [14] &amp;quot;C:\\Users\\Cimentadaj\\AppData\\Local\\Temp\\RtmpYnb7KJ\\file1ba438de3ce414.pdf&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;tabulizer::split_df&lt;/code&gt; saved each page on a separate pdf in a temporary directory. Now we only have to develop a function to clean one page and apply it to all middle pages (that is, excluding the first and last because they have a slightly different format).&lt;/p&gt;
&lt;p&gt;After hard work, I developed the function &lt;code&gt;convert_page&lt;/code&gt; which accepts one pdf page crops all the corners so that only text is available.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;convert_page &amp;lt;- function(page) {
  page &amp;lt;- magick::image_read_pdf(page)
  separator &amp;lt;- image_info(page)$width / 2
  first_page &amp;lt;- image_crop(page, geometry_area(width = separator))
  second_page &amp;lt;- image_crop(page, geometry_area(x_off = separator, y_off = 1))
  
  size &amp;lt;- geometry_area(width = 1400,
                        height = 2200,
                        x_off = 300,
                        y_off = 200)
  
  first_page &amp;lt;- image_crop(first_page, size)
  
  
  size &amp;lt;- geometry_area(width = 1400,
                        height = 2200,
                        x_off = 130,
                        y_off = 200)
  
  second_page &amp;lt;- image_crop(second_page, size)
  
  f_text &amp;lt;- image_ocr(first_page)
  s_text &amp;lt;- image_ocr(second_page)
  
  complete_page &amp;lt;- paste0(f_text, s_text)
  
  complete_page
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s look at an actual example. Below is a picture of page 4:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;page_four &amp;lt;- magick::image_read_pdf(all_pages[4])
image_resize(page_four, geometry_size_percent(width = 40))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/blog/2019-01-26-turning-a-pdf-book-into-machine-readable-format/2019-01-26-turning-a-pdf-book-into-machine-readable-format_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;702&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;convert_page&lt;/code&gt; crops the sides to obtain the leftmost page:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;separator &amp;lt;- image_info(page_four)$width / 2
first_page &amp;lt;- image_crop(page_four, geometry_area(width = separator))
second_page &amp;lt;- image_crop(page_four, geometry_area(x_off = separator, y_off = 1))

size &amp;lt;- geometry_area(width = 1400,
                      height = 2200,
                      x_off = 300,
                      y_off = 200)

first_page &amp;lt;- image_crop(first_page, size)


size &amp;lt;- geometry_area(width = 1400,
                      height = 2200,
                      x_off = 130,
                      y_off = 200)

second_page &amp;lt;- image_crop(second_page, size)

image_resize(first_page, geometry_size_percent(width = 40))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/blog/2019-01-26-turning-a-pdf-book-into-machine-readable-format/2019-01-26-turning-a-pdf-book-into-machine-readable-format_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;280&#34; /&gt;&lt;/p&gt;
&lt;p&gt;And for the rightmost page:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;image_resize(second_page, geometry_size_percent(width = 40))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/blog/2019-01-26-turning-a-pdf-book-into-machine-readable-format/2019-01-26-turning-a-pdf-book-into-machine-readable-format_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;280&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Finally, it converts and merges both pages into text with:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;f_text &amp;lt;- image_ocr(first_page)
s_text &amp;lt;- image_ocr(second_page)

complete_page &amp;lt;- paste0(f_text, s_text)

cat(complete_page)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## thusiastic and involved in their children’s school projects and intellectual pur-
## suits. My mother would carefully go over term papers with each of us, giving us
## both editorial advice and substantive suggestions. We were members of the Law-
## rence Unitarian Fellowship, which was made up of, to a substantial extent, uni-
## versity families. Sunday morning services were basically interdisciplinary semi-
## nars on matters of philosophical and social concern; Sunday school was an
## extended curriculum on world religions. | knew by about age ten that | wanted
## to be a professor. Both of my parents were academics. Both of my siblings be-
## came academics. Both of their spouses are academics. (Only my wife, a clinical
## psychologist, is not an academic, although her father was a professor.) ‘The only
## social mobility in my family was interdepartmental. It just felt natural to go into
## the family business.
## 
## Lawrence was a delightful, easy place to grow up. Although Kansas was a po-
## litically conservative state, Lawrence was a vibrant, liberal community. My ear-
## liest form of political activism centered on religion: | was an active member of a
## Unitarian youth group called Liberal Religious Youth, and in high school { went
## out of my way to argue with Bible Belt Christians about their belief in God. The
## early 1960s also witnessed my earliest engagement with social activism. The civil
## rights movement came to Lawrence first in the form of an organized boycott of
## a local segregated swimming pool in the 1950s and then in the form of civil rights
## rallies in the 1960s. In 1963 I went to the Civil Rights March on Washington and
## heard Martin Luther King Jr’s “I have a dream” speech. My earliest sense of pol-
## itics was that at its core it was about moral questions of social justice, not prob-
## lems of economic power and interests.
## 
## My family, also, was liberal, supporting the civil rights movement and other
## liberal causes; but while the family culture encouraged an intellectual interest in
## social and moral concerns, it was not intensely political. We would often talk
## about values, and the Unitarian Fellowship we attended also stressed humanis-
## tic, socially concerned values, but these were mostly framed as matters of indi-
## vidual responsibility and morality not as the grounding of a coherent political
## challenge to social injustice. My only real exposure toa more radical political per-
## spective came through my maternal grandparents, Russian Jewish immigrants
## who had come to the United States before World War I and lived near us in Law-
## rence, and my mother’s sister’s family in New York. Although I was not aware of
## this at the time, my grandparents and the New York relatives were Communists.
## This was never openly talked about, but from time to time I would hear glowing
## things said about the Soviet Union, socialism would be held out as an ideal, and
## America and capitalism would be criticized in emotionally laden ways. My cous-
## ins in New York were especially vocal about this, and in the mid-1g60s when I be-
## came more engaged in political matters, intense political discussions with my
## New York relatives contributed significantly to anchoring my radical sensibilities.
## 
## My interest in social sciences began in earnest in high school. fn Lawrence it
## was easy for academically oriented kids to take courses at the University of Kan-
## sas, and in my senior year | took a political science course on American politics.
## For my term project | decided to do a survey of children’s attitudes toward the
## American presidency and got permission to administer a questionnaire to several
## hundred students from grades 1-12 in the public schools. | then organized a party
## with my friends to code the data and produce graphs of how various attitudes
## changed by age. I&amp;#39;he most striking finding was that, in response to the question,
## “Would you like to be President of the United States when you grow up?” there
## were more girls who said yes than boys through third grade, after which the rate
## for girls declined dramatically.
## 
## By the time I graduated from high school in 1964, I had enough university
## credits and advanced placement credits to enter KU as a second-semester soph-
## omore, and that is what | had planned to do. Nearly all of my friends were going
## to KU. It just seemed like the thing to do. A friend of my parents, Karl Heider,
## gave me, as a Christmas present in my senior year in high school, an application
## form to Harvard. He was a graduate student at Harvard in anthropology at the
## time. I filled it out and sent it in. Harvard was the only place to which I applied,
## not out of inflated self-confidence but because it was the only application I got as
## a Christmas present. When | eventually was accepted (initially I was on the wait-
## ing list), the choice was thus between KU and Harvard. I suppose this was a
## “choice” since I could have decided to stay at KU. However, it just seemed so ob-
## vious; there was no angst, no weighing of alternatives, no thinking about the pros
## and cons. Thus, going to Harvard in a way just happened.
## 
## Like many students who began university in the mid-1960s, my political ideas
## were rapidly radicalized as the Viet Nam War escalated and began to impinge on
## our lives. I was not a student leader in activist politics, but I did actively partici-
## pate in demonstrations, rallies, fasts for peace, and endless political debate. At
## Harvard I majored in social studies, an intense interdisciplinary social science
## major centering on the classics of social theory, and in that program I was first ex-
## posed to the more abstract theoretical issues that bore on the political concerns
## of the day: the dynamics of capitalism, the nature of power and domination, the
## importance of elites in shaping American foreign policy, and the problem of&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we pass the pdf page directly to &lt;code&gt;convert_page&lt;/code&gt;, it will do it all in one take:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cat(convert_page(all_pages[4]))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## thusiastic and involved in their children’s school projects and intellectual pur-
## suits. My mother would carefully go over term papers with each of us, giving us
## both editorial advice and substantive suggestions. We were members of the Law-
## rence Unitarian Fellowship, which was made up of, to a substantial extent, uni-
## versity families. Sunday morning services were basically interdisciplinary semi-
## nars on matters of philosophical and social concern; Sunday school was an
## extended curriculum on world religions. | knew by about age ten that | wanted
## to be a professor. Both of my parents were academics. Both of my siblings be-
## came academics. Both of their spouses are academics. (Only my wife, a clinical
## psychologist, is not an academic, although her father was a professor.) ‘The only
## social mobility in my family was interdepartmental. It just felt natural to go into
## the family business.
## 
## Lawrence was a delightful, easy place to grow up. Although Kansas was a po-
## litically conservative state, Lawrence was a vibrant, liberal community. My ear-
## liest form of political activism centered on religion: | was an active member of a
## Unitarian youth group called Liberal Religious Youth, and in high school { went
## out of my way to argue with Bible Belt Christians about their belief in God. The
## early 1960s also witnessed my earliest engagement with social activism. The civil
## rights movement came to Lawrence first in the form of an organized boycott of
## a local segregated swimming pool in the 1950s and then in the form of civil rights
## rallies in the 1960s. In 1963 I went to the Civil Rights March on Washington and
## heard Martin Luther King Jr’s “I have a dream” speech. My earliest sense of pol-
## itics was that at its core it was about moral questions of social justice, not prob-
## lems of economic power and interests.
## 
## My family, also, was liberal, supporting the civil rights movement and other
## liberal causes; but while the family culture encouraged an intellectual interest in
## social and moral concerns, it was not intensely political. We would often talk
## about values, and the Unitarian Fellowship we attended also stressed humanis-
## tic, socially concerned values, but these were mostly framed as matters of indi-
## vidual responsibility and morality not as the grounding of a coherent political
## challenge to social injustice. My only real exposure toa more radical political per-
## spective came through my maternal grandparents, Russian Jewish immigrants
## who had come to the United States before World War I and lived near us in Law-
## rence, and my mother’s sister’s family in New York. Although I was not aware of
## this at the time, my grandparents and the New York relatives were Communists.
## This was never openly talked about, but from time to time I would hear glowing
## things said about the Soviet Union, socialism would be held out as an ideal, and
## America and capitalism would be criticized in emotionally laden ways. My cous-
## ins in New York were especially vocal about this, and in the mid-1g60s when I be-
## came more engaged in political matters, intense political discussions with my
## New York relatives contributed significantly to anchoring my radical sensibilities.
## 
## My interest in social sciences began in earnest in high school. fn Lawrence it
## was easy for academically oriented kids to take courses at the University of Kan-
## sas, and in my senior year | took a political science course on American politics.
## For my term project | decided to do a survey of children’s attitudes toward the
## American presidency and got permission to administer a questionnaire to several
## hundred students from grades 1-12 in the public schools. | then organized a party
## with my friends to code the data and produce graphs of how various attitudes
## changed by age. I&amp;#39;he most striking finding was that, in response to the question,
## “Would you like to be President of the United States when you grow up?” there
## were more girls who said yes than boys through third grade, after which the rate
## for girls declined dramatically.
## 
## By the time I graduated from high school in 1964, I had enough university
## credits and advanced placement credits to enter KU as a second-semester soph-
## omore, and that is what | had planned to do. Nearly all of my friends were going
## to KU. It just seemed like the thing to do. A friend of my parents, Karl Heider,
## gave me, as a Christmas present in my senior year in high school, an application
## form to Harvard. He was a graduate student at Harvard in anthropology at the
## time. I filled it out and sent it in. Harvard was the only place to which I applied,
## not out of inflated self-confidence but because it was the only application I got as
## a Christmas present. When | eventually was accepted (initially I was on the wait-
## ing list), the choice was thus between KU and Harvard. I suppose this was a
## “choice” since I could have decided to stay at KU. However, it just seemed so ob-
## vious; there was no angst, no weighing of alternatives, no thinking about the pros
## and cons. Thus, going to Harvard in a way just happened.
## 
## Like many students who began university in the mid-1960s, my political ideas
## were rapidly radicalized as the Viet Nam War escalated and began to impinge on
## our lives. I was not a student leader in activist politics, but I did actively partici-
## pate in demonstrations, rallies, fasts for peace, and endless political debate. At
## Harvard I majored in social studies, an intense interdisciplinary social science
## major centering on the classics of social theory, and in that program I was first ex-
## posed to the more abstract theoretical issues that bore on the political concerns
## of the day: the dynamics of capitalism, the nature of power and domination, the
## importance of elites in shaping American foreign policy, and the problem of&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We pass all middle pages to &lt;code&gt;convert_page&lt;/code&gt; to convert them to text:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;middle_pages &amp;lt;- lapply(all_pages[3:(length(all_pages) - 1)], convert_page)
cat(middle_pages[[1]])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## versity of Western Australia); music camp (1 played viola); assisting in a lab. And
## in college, it was much the same: volunteering as a photographer on an archae-
## ological dig in Hawaii; teaching in a high school enrichment program for mi-
## nority kids; traveling in urope. The closest thing to an ordinary paying job |
## ever had was occasionally selling hot dogs at football games in my freshman year
## in college. What is more, the ivory towers that [ have inhabited since the mid-
## 1960s have been located in beautiful physical settings, filled with congenial and
## interesting colleagues and students, and animated by exciting ideas. This, then,
## is the first fundamental fact of my life as an academic: [ have been extraordinar-
## ily lucky and have always lived what can only be considered a life of extreme priv-
## ilege. Nearly all of the time [ am doing what [ want to do; what I do gives me a
## sense of fulfillment and purpose; and | am paid well for doing it.
## 
## Here is the second fundamental fact of my academic life: since the early
## 19708, my intellectual life has been firmly anchored in the Marxist tradition. The
## core of my teaching as a professor has centered on communicating the central
## ideas and debates of contemporary Marxism and allied traditions of emancipa-
## tory social theory. The courses I have taught have had names like Class, State and
## Ideology: An Introduction to Marxist Sociology; Envisioning Real Utopias; Mars-
## ist Theories of the State; Alternative Foundations of Class Analysis. My energies
## in institution building have all involved creating and expanding arenas within
## which radical system-challenging ideas could flourish: creating a graduate pro-
## gram in class analysis and historical change in the Sociology Department at the
## University of Wisconsin—Madison; establishing the A. E. Havens Center, a re-
## search institute for critical scholarship at Wisconsin; organizing an annual con-
## ference for activists and academics, now called RadFest, which has been held
## every year since 1983. And my scholarship has been primarily devoted to recon-
## structing Marxism as a theoretical framework and research tradition. While the
## substantive preoccupations of this scholarship have shifted over the past thirty
## years, its central mission has not.
## 
## As in any biography, this pair of facts is the result of a trajectory of circum-
## stances and choices: circumstances that formed me and shaped the range of
## choices I encountered, and choices that in turn shaped my future circumstances.
## Some of these choices were made easily, with relatively little weighing of alter-
## natives, sometimes even without much awareness that a choice was actually be-
## ing made; others were the result of protracted reflection and conscious decision
## making, sometimes with the explicit understanding that the choice being made
## would constrain possible choices in the future. Six such junctures of circum-
## stance and choice seem especially important to me in shaping the contours of
## my academic career. ‘The first was posed incrementally in the early 1970s: the
## choice to identify my work primarily as contributing to Marxism rather than
## simply using Marxism. The second concerns the choice, made just before grad-
## uate school at the University of California, Berkeley, to be a sociologist, rather
## than some other ist. ‘The third was the choice to become what some people de-
## scribe as multivariate Marxist: to be a Marxist sociologist who engages in grandi-
## ose, perhaps overblown, quantitative research, The fourth choice was the choice
## of which academic department to be in. This choice was acutely posed to me
## in 1987 when I spent a year as a visiting professor at the University of Califor-
## nia, Berkeley. | had been offered a position there, and | had to decide whether
## I wanted to return to Wisconsin. Returning to Madison was unquestionably a
## choice that shaped subsequent contexts of choice. The fifth choice has been
## posed and reposed to me with increasing intensity since the late 1980s: the
## choice to stay a Marxist in this world of post-Marxisms when many of my intel-
## lectual comrades have decided for various good, and sometimes perhaps not so
## good, reasons to recast their intellectual agenda as being perhaps friendly to, but
## outside of, the Marxist tradition. Finally, the sixth important choice was to shift
## my central academic work from the study of class structure to the problem of en-
## visioning real utopias.
## 
## To set the stage for this reflection on choice and constraint, I need to give a
## brief account of the circumstances of my life that brought me into the arena of
## these choices.
## 
## Growing Up
## 
## I was born in Berkeley, California, in 1947 while my father, who had received a
## PhD in psychology before World War II, was in medical school on the GI Bill.
## When he finished his medical training in 1951, we moved to Lawrence, Kansas,
## where he became the head of the program in clinical psychology at Kansas Uni-
## versity (KU) and a professor of psychiatry in the KU Medical School. Because of
## antinepotism rules at the time, my mother, who also had a PhD in psychology,
## was not allowed to be employed at the university, so throughout the 1950s she did
## research on various research grants. In 1961, when the state law on such things
## changed, she became a professor of rehabilitation psychology.
## 
## Life in my family was intensely intellectual. Dinner table conversation would
## often revolve around intellectual matters, and my parents were always deeply en-&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ok, everything’s looking good. Because the first and last pages have different croping dimensions, I slightly adapt the &lt;code&gt;geometry_area&lt;/code&gt; to do it manually:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;### First page
first_page &amp;lt;- magick::image_read_pdf(all_pages[2])
image_resize(first_page, geometry_size_percent(width = 40))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/blog/2019-01-26-turning-a-pdf-book-into-machine-readable-format/2019-01-26-turning-a-pdf-book-into-machine-readable-format_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;702&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;separator &amp;lt;- image_info(first_page)$width / 2

size &amp;lt;- geometry_area(width = 1400,
                      height = 1700,
                      x_off = separator + 100,
                      y_off = 650)

first_page &amp;lt;- image_crop(first_page, size)
image_resize(first_page, geometry_size_percent(width = 40))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/blog/2019-01-26-turning-a-pdf-book-into-machine-readable-format/2019-01-26-turning-a-pdf-book-into-machine-readable-format_files/figure-html/unnamed-chunk-11-2.png&#34; width=&#34;280&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;first_page &amp;lt;- image_ocr(first_page)
###


### Last page
last_page &amp;lt;- magick::image_read_pdf(all_pages[14])
image_resize(last_page, geometry_size_percent(width = 40))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/blog/2019-01-26-turning-a-pdf-book-into-machine-readable-format/2019-01-26-turning-a-pdf-book-into-machine-readable-format_files/figure-html/unnamed-chunk-11-3.png&#34; width=&#34;702&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;separator &amp;lt;- image_info(last_page)$width / 2

size &amp;lt;- geometry_area(width = separator - 400,
                      height = 500,
                      x_off = 150,
                      y_off = 260)

last_page &amp;lt;- image_crop(last_page, size)
image_resize(last_page, geometry_size_percent(width = 70))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/blog/2019-01-26-turning-a-pdf-book-into-machine-readable-format/2019-01-26-turning-a-pdf-book-into-machine-readable-format_files/figure-html/unnamed-chunk-11-4.png&#34; width=&#34;474&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;last_page &amp;lt;- image_ocr(last_page)
###&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ok, the hard work is over! Now we need to merge all of the pages together and print a subset of the text:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;final_document &amp;lt;- paste0(first_page, Reduce(paste0, middle_pages), last_page)
cat(paste0(substring(final_document, 0, 5000), &amp;quot;...&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Falling into Marxism; Choosing to Stay
## 
## Erik Olin Wright received his PhD from the University of California, Berkeley, and
## has taught at the University of Wisconsin since then. His academic work has been
## centrally concerned with reconstructing the Marxist tradition of social theory and
## research in ways that attempt to make it more relevant to contemporary concerns
## and more cogent as a scientific framework of analysis. His empirical research has
## focused especially on the changing character of class relations in developed capi-
## talist societies. Since 1992 he has directed the Real Utopias Project, which explores
## a range of proposals for new institutional designs that embody emancipatory ideals
## and yet are attentive to issues of pragmatic feasibility. His principle publications
## include The Politics of Punishment: A Critical Analysis of Prisons in America;
## Class, Crisis and the State; Classes; Reconstructing Marxism (with Elliott Sober
## and Andrew Levine); Interrogating Inequality; Class Counts: Comparative Stud-
## ies in Class Analysis; and Deepening Democracy: Innovations in Empowered
## Participatory Governance (with Archon Fung). He is married to Marcia Kahn
## Wright, a clinical psychologist working in community mental health, and has tvo
## grown daughters, Jennifer and Rebecca.
## 
## [ have been in school continuously for more than fifty vears: since I entered
## kindergarten in 1952, there has never been a September when I wasn’t beginning
## a school year. | have never held a nine-to-five job with fixed hours and a boss
## telling me what to do. In high school, my summers were always spent in vari-
## ous kinds of interesting and engaging activities — traveling home from Australia
## where my family spent a year (my parents were Fulbright professors at the Uni-
## versity of Western Australia); music camp (1 played viola); assisting in a lab. And
## in college, it was much the same: volunteering as a photographer on an archae-
## ological dig in Hawaii; teaching in a high school enrichment program for mi-
## nority kids; traveling in urope. The closest thing to an ordinary paying job |
## ever had was occasionally selling hot dogs at football games in my freshman year
## in college. What is more, the ivory towers that [ have inhabited since the mid-
## 1960s have been located in beautiful physical settings, filled with congenial and
## interesting colleagues and students, and animated by exciting ideas. This, then,
## is the first fundamental fact of my life as an academic: [ have been extraordinar-
## ily lucky and have always lived what can only be considered a life of extreme priv-
## ilege. Nearly all of the time [ am doing what [ want to do; what I do gives me a
## sense of fulfillment and purpose; and | am paid well for doing it.
## 
## Here is the second fundamental fact of my academic life: since the early
## 19708, my intellectual life has been firmly anchored in the Marxist tradition. The
## core of my teaching as a professor has centered on communicating the central
## ideas and debates of contemporary Marxism and allied traditions of emancipa-
## tory social theory. The courses I have taught have had names like Class, State and
## Ideology: An Introduction to Marxist Sociology; Envisioning Real Utopias; Mars-
## ist Theories of the State; Alternative Foundations of Class Analysis. My energies
## in institution building have all involved creating and expanding arenas within
## which radical system-challenging ideas could flourish: creating a graduate pro-
## gram in class analysis and historical change in the Sociology Department at the
## University of Wisconsin—Madison; establishing the A. E. Havens Center, a re-
## search institute for critical scholarship at Wisconsin; organizing an annual con-
## ference for activists and academics, now called RadFest, which has been held
## every year since 1983. And my scholarship has been primarily devoted to recon-
## structing Marxism as a theoretical framework and research tradition. While the
## substantive preoccupations of this scholarship have shifted over the past thirty
## years, its central mission has not.
## 
## As in any biography, this pair of facts is the result of a trajectory of circum-
## stances and choices: circumstances that formed me and shaped the range of
## choices I encountered, and choices that in turn shaped my future circumstances.
## Some of these choices were made easily, with relatively little weighing of alter-
## natives, sometimes even without much awareness that a choice was actually be-
## ing made; others were the result of protracted reflection and conscious decision
## making, sometimes with the explicit understanding that the choice being made
## would constrain possible choices in the future. Six such junctures of circum-
## stance and choice seem especially important to me in shaping the contours of
## my academic career. ‘The first was posed incrementally in the early 1970s: the
## choice to identify my work primarily as contributing to Marxism rather than
## simply using Marxism. The second concerns the choice, made just before grad-
## uate school at the University ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There we go, nicely formatted text all obtained from pdf images (after carefully revising the text there are many mistakes, but this was a lightning post, so no time to tidy up the text).&lt;/p&gt;
&lt;div id=&#34;converting-the-text-to-an-epub&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Converting the text to an epub&lt;/h3&gt;
&lt;p&gt;I thought this was going to be much easier, but &lt;code&gt;knitr&lt;/code&gt; seems to crash when compiling this text. According to &lt;a href=&#34;https://bookdown.org/yihui/bookdown/build-the-book.html&#34;&gt;bookdown&lt;/a&gt;, I would need a &lt;code&gt;.Rmd&lt;/code&gt; file and then use &lt;code&gt;bookdown::render_book(&amp;quot;my_book.Rmd&amp;quot;, bookdown::epub_book())&lt;/code&gt;. However, I cannot compile the &lt;code&gt;.Rmd&lt;/code&gt; file using this text because it runs out of memory. Run the example below:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rmd_path &amp;lt;- tempfile(pattern = &amp;#39;our_book&amp;#39;, fileext = &amp;quot;.Rmd&amp;quot;)

rmd_preamble &amp;lt;-&amp;quot;---
  title: &amp;#39;Final Book&amp;#39;
  output: html_document
---\n\n&amp;quot;

final_document &amp;lt;- paste0(rmd_preamble, final_document)
  
writeLines(final_document, con = rmd_path, useBytes = TRUE)

# Bookdown compiles all .Rmd in the working directory, so we move
# to the temporary directory where the book is
setwd(dirname(rmd_path))
bookdown::render_book(rmd_path, bookdown::epub_book())&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you figure out how make to this work, I’d love to hear about it in the comment section.&lt;/p&gt;
&lt;p&gt;EDIT:&lt;/p&gt;
&lt;p&gt;Thanks to the &lt;a href=&#34;https://twitter.com/leonawicz/status/1089537068550651907&#34;&gt;tweet by Matthew Leonawicz&lt;/a&gt; I managed to do it!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;txt_path &amp;lt;- tempfile(pattern = &amp;#39;our_book&amp;#39;, fileext = &amp;quot;.txt&amp;quot;)

writeLines(final_document, con = txt_path, useBytes = TRUE)

# First download Calibre
path &amp;lt;- paste0(Sys.getenv(&amp;quot;PATH&amp;quot;), &amp;quot;;&amp;quot;, &amp;quot;C:\\Program Files\\Calibre2&amp;quot;)
Sys.setenv(PATH = path)
bookdown::calibre(txt_path, paste0(dirname(txt_path), &amp;quot;/erik_wright.mobi&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Some guides and pre-project documents on ML</title>
      <link>/blog/2019-01-22-some-guides-and-preproject-documents-on-ml/some-guides-and-pre-project-documents-on-ml/</link>
      <pubDate>Tue, 22 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019-01-22-some-guides-and-preproject-documents-on-ml/some-guides-and-pre-project-documents-on-ml/</guid>
      <description>


&lt;p&gt;I was just browsing the web and found &lt;a href=&#34;https://developers.google.com/machine-learning/guides/rules-of-ml/&#34;&gt;this cool resource on ML from Google&lt;/a&gt;. They’re not like you’re typical tutorial but rather bullet-point type questions with advice on what to do on certain scenarios. I just came up with the idea of an interesting series of posts where each of the questions outlined in the documents is accompanied with a concrete example that shows how it works under certain scenarios.&lt;/p&gt;
&lt;p&gt;There’s also other tutorial on that website such as with &lt;a href=&#34;https://developers.google.com/machine-learning/guides/text-classification/&#34;&gt;text classification&lt;/a&gt;. This reminds me of the &lt;a href=&#34;https://github.com/cimentadaj/info_to_read&#34;&gt;list I keep of interesting blog posts/books/courses&lt;/a&gt; I would to follow through in the future&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A list of must pre-project questions</title>
      <link>/blog/2018-05-23-a-list-of-must-preproject-questions/a-list-of-must-pre-project-questions/</link>
      <pubDate>Wed, 23 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/2018-05-23-a-list-of-must-preproject-questions/a-list-of-must-pre-project-questions/</guid>
      <description>


&lt;p&gt;Rumbling through Twitter I found a Jupyter Notebook of Paige Bailey written at the rOpensci unconf about Ethical Machine Learning which you can read &lt;a href=&#34;https://github.com/ropenscilabs/proxy-bias-vignette/blob/master/EthicalMachineLearning.ipynb&#34;&gt;here&lt;/a&gt;. It was very interesting to look at her workflow but even more interesting was the set of questions she asked herself before and during the analysis. I paste them here just to keep them as a reference.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;As you design the goal and the purpose of your machine learning product, you must first ask: Who is your audience?&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Is your product or analysis meant to include all people?&lt;/li&gt;
&lt;li&gt;And, if not: is it targeted to an exclusive audience?&lt;/li&gt;
&lt;li&gt;Is there a person on your team tasked specifically with identifying and resolving bias and discrimination issues?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Once the concept and scope have been defined, it is time to focus on the acquisition, evaluation, and cleaning of data. We have received a single .csv file filled with information on customers from the bank’s manager. Some questions to consider:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Did the data come from a system prone to human error?&lt;/li&gt;
&lt;li&gt;Is the data current?&lt;/li&gt;
&lt;li&gt;What technology facilitated the collection of the data?&lt;/li&gt;
&lt;li&gt;Was participation of the data subjects voluntary?&lt;/li&gt;
&lt;li&gt;Does the context of the collection match the context of your use?&lt;/li&gt;
&lt;li&gt;Was your data collected by people or a system that was operating with quotas or a particular incentive structure?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Now that your data has been collected, it would be a great idea to evaluate and describe it:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Who is represented in the data?&lt;/li&gt;
&lt;li&gt;Who is under-represented or absent from your data?&lt;/li&gt;
&lt;li&gt;Can you find additional data, or use statistical methods, to make your data more inclusive?&lt;/li&gt;
&lt;li&gt;Was the data collected in an environment where data subjects had meaningful choices?&lt;/li&gt;
&lt;li&gt;How does the data reflect the perspective of the institution that collected it?&lt;/li&gt;
&lt;li&gt;Were fields within the data inferred or appended beyond what was clear to the data subject?
Would this use of the data surprise the data subjects?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;The next step would be cleaning the data.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Are there any fields that should be eliminated from your data?&lt;/li&gt;
&lt;li&gt;Can you use anonymization or pseudonymization techniques to avoid needless evaluation or processing of individual data?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Establishing logic for variables&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Can you describe the logic that connects the variables to the output of your equation?&lt;/li&gt;
&lt;li&gt;Do your variables have a causal relationship to the results they predict?&lt;/li&gt;
&lt;li&gt;How did you determine what weight to give each variable?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Identifying assumptions&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Will your variables apply equally across race, gender, age, disability, ethnicity, socioeconomic status, education, etc.?&lt;/li&gt;
&lt;li&gt;What are you assuming about the kinds of people in your data set?&lt;/li&gt;
&lt;li&gt;Would you be comfortable explaining your assumptions to the public?&lt;/li&gt;
&lt;li&gt;What assumptions are you relying on to determine the relevant variables and their weights?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Defining success&lt;/strong&gt;
- What amount and type of error do you expect?
- How will you ensure your system is behaving the way you intend? How reliable is it?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How will you choose your analytical method? For example, predictive analytics, machine learning (supervised, unsupervised), neural networks or deep learning, etc.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How much transparency does this method allow your end users and yourself?&lt;/li&gt;
&lt;li&gt;Are non-deterministic outcomes acceptable given your legal or ethical obligations around transparency and explainability?&lt;/li&gt;
&lt;li&gt;Does your choice of analytical method allow you to sufficiently explain your results?&lt;/li&gt;
&lt;li&gt;What particular tasks are associated with the type of analytical method you are using?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Tools&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How could results that look successful still contain bias?&lt;/li&gt;
&lt;li&gt;Is there a trustworthy or audited source for the tools you need?&lt;/li&gt;
&lt;li&gt;Have the tools you are using been associated with biased products?&lt;/li&gt;
&lt;li&gt;Or, if you build from scratch: can you or a third-party test your tools for any features that can result in biased or unfair outcomes?&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Cleaning in-door positioning data</title>
      <link>/blog/2018-02-03-predicting-location-via-indoor-positioning-systems/predicting-location-via-indoor-positioning-systems/</link>
      <pubDate>Sat, 03 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/2018-02-03-predicting-location-via-indoor-positioning-systems/predicting-location-via-indoor-positioning-systems/</guid>
      <description>


&lt;p&gt;I’ve just started reading the wonderful book &lt;a href=&#34;http://rdatasciencecases.org/&#34;&gt;Data Science in R: A Case Studies Approach to Computational Reasoning and Problem Solving&lt;/a&gt;. I’ve just begun the first chapter and I wanted to document some of the things I found interesting. In this post I’ll walkthrough the example on how to transform a text file with GPS locations into a well formatted rectangular dataset. For a detailed explanation see their book, which I highly recommend buying.&lt;/p&gt;
&lt;p&gt;Note: When it makes senses/it’s possible, I always try to find an equivalent tidyverse solution to everything they do in the book.&lt;/p&gt;
&lt;p&gt;This is the data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)

ex_file &amp;lt;- read_lines(&amp;quot;http://rdatasciencecases.org/Data/offline.final.trace.txt&amp;quot;)
ex_file[1:4]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;# timestamp=2006-02-11 08:31:58&amp;quot;                                                                                                                                                                                                                                                                                                                                                                                                                                 
## [2] &amp;quot;# usec=250&amp;quot;                                                                                                                                                                                                                                                                                                                                                                                                                                                      
## [3] &amp;quot;# minReadings=110&amp;quot;                                                                                                                                                                                                                                                                                                                                                                                                                                               
## [4] &amp;quot;t=1139643118358;id=00:02:2D:21:0F:33;pos=0.0,0.0,0.0;degree=0.0;00:14:bf:b1:97:8a=-38,2437000000,3;00:14:bf:b1:97:90=-56,2427000000,3;00:0f:a3:39:e1:c0=-53,2462000000,3;00:14:bf:b1:97:8d=-65,2442000000,3;00:14:bf:b1:97:81=-65,2422000000,3;00:14:bf:3b:c7:c6=-66,2432000000,3;00:0f:a3:39:dd:cd=-75,2412000000,3;00:0f:a3:39:e0:4b=-78,2462000000,3;00:0f:a3:39:e2:10=-87,2437000000,3;02:64:fb:68:52:e6=-88,2447000000,1;02:00:42:55:31:00=-84,2457000000,1&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Some lines are comments and the 4th line is the actual data. Basically, everything that is &lt;code&gt;something=&lt;/code&gt; is the name of the column and columns are separated by a &lt;code&gt;;&lt;/code&gt;. Now, within each column there can also be several values like in the column &lt;code&gt;pos&lt;/code&gt; where numbers are separated by a comma.&lt;/p&gt;
&lt;p&gt;First, let’s separate everything now that we know all of the delimiters.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tokens &amp;lt;- str_split(ex_file[4], pattern = &amp;quot;[;=,]&amp;quot;)[[1]]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From the documentation we know that the first 4 columns are constant in every line. The remaining columns can vary by each line, which is why they decide to transform the data into stacked/long format. So each unique &lt;code&gt;id&lt;/code&gt; will be repeate the number of times that there’s MAC columns (the columns that vary).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tmp &amp;lt;- matrix(tokens[-(1:10)], ncol = 4, byrow = TRUE)
# We got the MAC in a long format, now we have to get unique id
# of each of the macs (along with time and other vars) to be repeated
# the number of rows that tmp has


# There we go
tmp_two &amp;lt;- matrix(tokens[c(2, 4, 6:8, 10)], nrow = nrow(tmp), ncol = 6, byrow = TRUE)

mat &amp;lt;- cbind(tmp_two, tmp)
mat&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       [,1]            [,2]                [,3]  [,4]  [,5]  [,6] 
##  [1,] &amp;quot;1139643118358&amp;quot; &amp;quot;00:02:2D:21:0F:33&amp;quot; &amp;quot;0.0&amp;quot; &amp;quot;0.0&amp;quot; &amp;quot;0.0&amp;quot; &amp;quot;0.0&amp;quot;
##  [2,] &amp;quot;1139643118358&amp;quot; &amp;quot;00:02:2D:21:0F:33&amp;quot; &amp;quot;0.0&amp;quot; &amp;quot;0.0&amp;quot; &amp;quot;0.0&amp;quot; &amp;quot;0.0&amp;quot;
##  [3,] &amp;quot;1139643118358&amp;quot; &amp;quot;00:02:2D:21:0F:33&amp;quot; &amp;quot;0.0&amp;quot; &amp;quot;0.0&amp;quot; &amp;quot;0.0&amp;quot; &amp;quot;0.0&amp;quot;
##  [4,] &amp;quot;1139643118358&amp;quot; &amp;quot;00:02:2D:21:0F:33&amp;quot; &amp;quot;0.0&amp;quot; &amp;quot;0.0&amp;quot; &amp;quot;0.0&amp;quot; &amp;quot;0.0&amp;quot;
##  [5,] &amp;quot;1139643118358&amp;quot; &amp;quot;00:02:2D:21:0F:33&amp;quot; &amp;quot;0.0&amp;quot; &amp;quot;0.0&amp;quot; &amp;quot;0.0&amp;quot; &amp;quot;0.0&amp;quot;
##  [6,] &amp;quot;1139643118358&amp;quot; &amp;quot;00:02:2D:21:0F:33&amp;quot; &amp;quot;0.0&amp;quot; &amp;quot;0.0&amp;quot; &amp;quot;0.0&amp;quot; &amp;quot;0.0&amp;quot;
##  [7,] &amp;quot;1139643118358&amp;quot; &amp;quot;00:02:2D:21:0F:33&amp;quot; &amp;quot;0.0&amp;quot; &amp;quot;0.0&amp;quot; &amp;quot;0.0&amp;quot; &amp;quot;0.0&amp;quot;
##  [8,] &amp;quot;1139643118358&amp;quot; &amp;quot;00:02:2D:21:0F:33&amp;quot; &amp;quot;0.0&amp;quot; &amp;quot;0.0&amp;quot; &amp;quot;0.0&amp;quot; &amp;quot;0.0&amp;quot;
##  [9,] &amp;quot;1139643118358&amp;quot; &amp;quot;00:02:2D:21:0F:33&amp;quot; &amp;quot;0.0&amp;quot; &amp;quot;0.0&amp;quot; &amp;quot;0.0&amp;quot; &amp;quot;0.0&amp;quot;
## [10,] &amp;quot;1139643118358&amp;quot; &amp;quot;00:02:2D:21:0F:33&amp;quot; &amp;quot;0.0&amp;quot; &amp;quot;0.0&amp;quot; &amp;quot;0.0&amp;quot; &amp;quot;0.0&amp;quot;
## [11,] &amp;quot;1139643118358&amp;quot; &amp;quot;00:02:2D:21:0F:33&amp;quot; &amp;quot;0.0&amp;quot; &amp;quot;0.0&amp;quot; &amp;quot;0.0&amp;quot; &amp;quot;0.0&amp;quot;
##       [,7]                [,8]  [,9]         [,10]
##  [1,] &amp;quot;00:14:bf:b1:97:8a&amp;quot; &amp;quot;-38&amp;quot; &amp;quot;2437000000&amp;quot; &amp;quot;3&amp;quot;  
##  [2,] &amp;quot;00:14:bf:b1:97:90&amp;quot; &amp;quot;-56&amp;quot; &amp;quot;2427000000&amp;quot; &amp;quot;3&amp;quot;  
##  [3,] &amp;quot;00:0f:a3:39:e1:c0&amp;quot; &amp;quot;-53&amp;quot; &amp;quot;2462000000&amp;quot; &amp;quot;3&amp;quot;  
##  [4,] &amp;quot;00:14:bf:b1:97:8d&amp;quot; &amp;quot;-65&amp;quot; &amp;quot;2442000000&amp;quot; &amp;quot;3&amp;quot;  
##  [5,] &amp;quot;00:14:bf:b1:97:81&amp;quot; &amp;quot;-65&amp;quot; &amp;quot;2422000000&amp;quot; &amp;quot;3&amp;quot;  
##  [6,] &amp;quot;00:14:bf:3b:c7:c6&amp;quot; &amp;quot;-66&amp;quot; &amp;quot;2432000000&amp;quot; &amp;quot;3&amp;quot;  
##  [7,] &amp;quot;00:0f:a3:39:dd:cd&amp;quot; &amp;quot;-75&amp;quot; &amp;quot;2412000000&amp;quot; &amp;quot;3&amp;quot;  
##  [8,] &amp;quot;00:0f:a3:39:e0:4b&amp;quot; &amp;quot;-78&amp;quot; &amp;quot;2462000000&amp;quot; &amp;quot;3&amp;quot;  
##  [9,] &amp;quot;00:0f:a3:39:e2:10&amp;quot; &amp;quot;-87&amp;quot; &amp;quot;2437000000&amp;quot; &amp;quot;3&amp;quot;  
## [10,] &amp;quot;02:64:fb:68:52:e6&amp;quot; &amp;quot;-88&amp;quot; &amp;quot;2447000000&amp;quot; &amp;quot;1&amp;quot;  
## [11,] &amp;quot;02:00:42:55:31:00&amp;quot; &amp;quot;-84&amp;quot; &amp;quot;2457000000&amp;quot; &amp;quot;1&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There we go. We have a stacked matrix with all the variables we need. Let’s wrap the line maker into a function:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;processLine &amp;lt;- function(x) {
  tokens &amp;lt;- str_split(x, pattern = &amp;quot;[;=,]&amp;quot;)[[1]]
  
  # We got the MAC in a long format, now we have to get unique id
  # of each of the macs (along with time and other vars) to be repeated
  # the number of rows that tmp has
  tmp &amp;lt;- matrix(tokens[-(1:10)], ncol = 4, byrow = TRUE)
  
  # There we go
  tmp_two &amp;lt;- matrix(tokens[c(2, 4, 6:8, 10)], nrow = nrow(tmp), ncol = 6, byrow = TRUE)
  
  mat &amp;lt;- cbind(tmp_two, tmp)
  mat
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s apply it to a few sample rows:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tmp &amp;lt;- map(ex_file[4:20], processLine)

offline &amp;lt;- as.data.frame(do.call(&amp;quot;rbind&amp;quot;, tmp))
head(offline)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##              V1                V2  V3  V4  V5  V6                V7  V8
## 1 1139643118358 00:02:2D:21:0F:33 0.0 0.0 0.0 0.0 00:14:bf:b1:97:8a -38
## 2 1139643118358 00:02:2D:21:0F:33 0.0 0.0 0.0 0.0 00:14:bf:b1:97:90 -56
## 3 1139643118358 00:02:2D:21:0F:33 0.0 0.0 0.0 0.0 00:0f:a3:39:e1:c0 -53
## 4 1139643118358 00:02:2D:21:0F:33 0.0 0.0 0.0 0.0 00:14:bf:b1:97:8d -65
## 5 1139643118358 00:02:2D:21:0F:33 0.0 0.0 0.0 0.0 00:14:bf:b1:97:81 -65
## 6 1139643118358 00:02:2D:21:0F:33 0.0 0.0 0.0 0.0 00:14:bf:3b:c7:c6 -66
##           V9 V10
## 1 2437000000   3
## 2 2427000000   3
## 3 2462000000   3
## 4 2442000000   3
## 5 2422000000   3
## 6 2432000000   3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Good! Now we can apply it to all lines, excluding of course the ones which are commented out!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tmp &amp;lt;- map(ex_file[!str_sub(ex_file, 1, 1) == &amp;quot;#&amp;quot;], processLine)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in matrix(tokens[c(2, 4, 6:8, 10)], nrow = nrow(tmp), ncol = 6, :
## data length exceeds size of matrix

## Warning in matrix(tokens[c(2, 4, 6:8, 10)], nrow = nrow(tmp), ncol = 6, :
## data length exceeds size of matrix

## Warning in matrix(tokens[c(2, 4, 6:8, 10)], nrow = nrow(tmp), ncol = 6, :
## data length exceeds size of matrix

## Warning in matrix(tokens[c(2, 4, 6:8, 10)], nrow = nrow(tmp), ncol = 6, :
## data length exceeds size of matrix

## Warning in matrix(tokens[c(2, 4, 6:8, 10)], nrow = nrow(tmp), ncol = 6, :
## data length exceeds size of matrix

## Warning in matrix(tokens[c(2, 4, 6:8, 10)], nrow = nrow(tmp), ncol = 6, :
## data length exceeds size of matrix&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Aha.. so there’s a few warnings? What’s happening? If we ran the previous with &lt;code&gt;options(error, warn = 2)&lt;/code&gt; we would see that it looks like there are some anomalous cases where there’s no MAC information. We either fill out those values with NA’s or we simply exclude them. Because working with the MAC’s is of utmost importance for the analysis, we drop it to save memory. We redefine our function so that if there’s only the 10 starting values it returns a NULL.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;processLine &amp;lt;- function(x) {
  tokens &amp;lt;- str_split(x, pattern = &amp;quot;[;=,]&amp;quot;)[[1]]
  
  # We exclude rows where there&amp;#39;s no MAC information
  if (length(tokens) == 10) return(NULL)
  
  # We got the MAC in a long format, now we have to get unique id
  # of each of the macs (along with time and other vars) to be repeated
  # the number of rows that tmp has
  tmp &amp;lt;- matrix(tokens[-(1:10)], ncol = 4, byrow = TRUE)
  
  # There we go
  tmp_two &amp;lt;- matrix(tokens[c(2, 4, 6:8, 10)], nrow = nrow(tmp), ncol = 6, byrow = TRUE)
  
  mat &amp;lt;- cbind(tmp_two, tmp)
  mat
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And apply it now..&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tmp &amp;lt;- map(ex_file[!str_sub(ex_file, 1, 1) == &amp;quot;#&amp;quot;], processLine)

offline &amp;lt;- as_tibble(do.call(&amp;quot;rbind&amp;quot;, tmp))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Good, let’s set warnings back: &lt;code&gt;options(error = recover, warn = 1)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To finish off let’s set some names.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;names(offline) &amp;lt;- c(&amp;quot;time&amp;quot;, &amp;quot;scanMac&amp;quot;, &amp;quot;posX&amp;quot;, &amp;quot;posY&amp;quot;, &amp;quot;posZ&amp;quot;,
                    &amp;quot;orientation&amp;quot;, &amp;quot;mac&amp;quot;, &amp;quot;signal&amp;quot;, &amp;quot;channel&amp;quot;, &amp;quot;type&amp;quot;)

offline&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1,181,628 x 10
##    time   scanMac posX  posY  posZ  orientation mac   signal channel type 
##    &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;       &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;
##  1 11396~ 00:02:~ 0.0   0.0   0.0   0.0         00:1~ -38    243700~ 3    
##  2 11396~ 00:02:~ 0.0   0.0   0.0   0.0         00:1~ -56    242700~ 3    
##  3 11396~ 00:02:~ 0.0   0.0   0.0   0.0         00:0~ -53    246200~ 3    
##  4 11396~ 00:02:~ 0.0   0.0   0.0   0.0         00:1~ -65    244200~ 3    
##  5 11396~ 00:02:~ 0.0   0.0   0.0   0.0         00:1~ -65    242200~ 3    
##  6 11396~ 00:02:~ 0.0   0.0   0.0   0.0         00:1~ -66    243200~ 3    
##  7 11396~ 00:02:~ 0.0   0.0   0.0   0.0         00:0~ -75    241200~ 3    
##  8 11396~ 00:02:~ 0.0   0.0   0.0   0.0         00:0~ -78    246200~ 3    
##  9 11396~ 00:02:~ 0.0   0.0   0.0   0.0         00:0~ -87    243700~ 3    
## 10 11396~ 00:02:~ 0.0   0.0   0.0   0.0         02:6~ -88    244700~ 1    
## # ... with 1,181,618 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;— &lt;strong&gt;BONUS&lt;/strong&gt; —&lt;/p&gt;
&lt;p&gt;Just wanted to try to get the data in a wide format where each MAC indicator is a column rather than stacked.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Define the MAC colums as wide. Because each MAC columns
# has three associated values, I stack them up so there should
# be three rows pero every MAC column
right_col &amp;lt;- tokens[-(1:10)]

right_names &amp;lt;- seq(1, length(right_col), by = 4)

mac_tibble &amp;lt;-
  matrix(right_col[-right_names], nrow = 3, ncol = length(right_names),
         dimnames = list(NULL, right_col[right_names])) %&amp;gt;%
  as_tibble() %&amp;gt;%
  add_column(mac_indicators = c(&amp;quot;signal&amp;quot;, &amp;quot;chanel&amp;quot;, &amp;quot;type&amp;quot;),
             .before = 1)

# Define the first four columns
left_col &amp;lt;- tokens[1:10]

left_names &amp;lt;- seq(1, length(left_col), by = 2)

left_tibble &amp;lt;-
  matrix(left_col[-left_names], nrow = 3, ncol = length(left_names), byrow = TRUE,
         dimnames = list(NULL, left_col[left_names])) %&amp;gt;%
  as_tibble()

# Bind both dfs
mat &amp;lt;- bind_cols(left_tibble, mac_tibble)
mat&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 17
##   t         id         pos   `0.0` degree mac_indicators `00:14:bf:b1:97:~
##   &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;          &amp;lt;chr&amp;gt;            
## 1 11396431~ 00:02:2D:~ 0.0   0.0   0.0    signal         -38              
## 2 11396431~ 00:02:2D:~ 0.0   0.0   0.0    chanel         2437000000       
## 3 11396431~ 00:02:2D:~ 0.0   0.0   0.0    type           3                
## # ... with 10 more variables: `00:14:bf:b1:97:90` &amp;lt;chr&amp;gt;,
## #   `00:0f:a3:39:e1:c0` &amp;lt;chr&amp;gt;, `00:14:bf:b1:97:8d` &amp;lt;chr&amp;gt;,
## #   `00:14:bf:b1:97:81` &amp;lt;chr&amp;gt;, `00:14:bf:3b:c7:c6` &amp;lt;chr&amp;gt;,
## #   `00:0f:a3:39:dd:cd` &amp;lt;chr&amp;gt;, `00:0f:a3:39:e0:4b` &amp;lt;chr&amp;gt;,
## #   `00:0f:a3:39:e2:10` &amp;lt;chr&amp;gt;, `02:64:fb:68:52:e6` &amp;lt;chr&amp;gt;,
## #   `02:00:42:55:31:00` &amp;lt;chr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s wrap it into a function excluding those which dont have MAC values.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;processLine &amp;lt;- function(x) {
  tokens &amp;lt;- str_split(x, pattern = &amp;quot;[;=,]&amp;quot;)[[1]]
  
  if (length(tokens) == 10) return(NULL) # exclude non-MAC lines
  
  right_col &amp;lt;- tokens[-(1:10)]
  
  right_names &amp;lt;- seq(1, length(right_col), by = 4)
  
  mac_tibble &amp;lt;-
    matrix(right_col[-right_names], nrow = 3, ncol = length(right_names),
           dimnames = list(NULL, right_col[right_names]))

  # Define the first four columns
  left_col &amp;lt;- tokens[1:10]
  
  left_names &amp;lt;- seq(1, length(left_col), by = 2)
  
  left_tibble &amp;lt;-
    matrix(left_col[-left_names], nrow = 3, ncol = length(left_names), byrow = TRUE,
           dimnames = list(NULL, left_col[left_names]))

  # Bind both dfs
  mat &amp;lt;- cbind(left_tibble, mac_tibble)
  mat
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s apply it to each line:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tmp &amp;lt;- map(ex_file[!str_sub(ex_file, 1, 1) == &amp;quot;#&amp;quot;], processLine)

# Interestingly, applying as_tibble instead of as.data.frame is
# very slow. So I opt for data frame and then convert the binded
# df to a tibble
final_data &amp;lt;-
  bind_rows(map(tmp, as.data.frame, stringsAsFactors = FALSE)) %&amp;gt;%
  as_tibble() %&amp;gt;%
  add_column(mac_indicators = rep(c(&amp;quot;signal&amp;quot;, &amp;quot;chanel&amp;quot;, &amp;quot;type&amp;quot;), length(unique(.$t))),
             .after = &amp;quot;degree&amp;quot;)

final_data&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 438,222 x 40
##    t         id        pos   `0.0` degree mac_indicators `00:14:bf:b1:97:~
##    &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;          &amp;lt;chr&amp;gt;            
##  1 11396431~ 00:02:2D~ 0.0   0.0   0.0    signal         -38              
##  2 11396431~ 00:02:2D~ 0.0   0.0   0.0    chanel         2437000000       
##  3 11396431~ 00:02:2D~ 0.0   0.0   0.0    type           3                
##  4 11396431~ 00:02:2D~ 0.0   0.0   0.0    signal         -38              
##  5 11396431~ 00:02:2D~ 0.0   0.0   0.0    chanel         2437000000       
##  6 11396431~ 00:02:2D~ 0.0   0.0   0.0    type           3                
##  7 11396431~ 00:02:2D~ 0.0   0.0   0.0    signal         -38              
##  8 11396431~ 00:02:2D~ 0.0   0.0   0.0    chanel         2437000000       
##  9 11396431~ 00:02:2D~ 0.0   0.0   0.0    type           3                
## 10 11396431~ 00:02:2D~ 0.0   0.0   0.0    signal         -38              
## # ... with 438,212 more rows, and 33 more variables:
## #   `00:14:bf:b1:97:90` &amp;lt;chr&amp;gt;, `00:0f:a3:39:e1:c0` &amp;lt;chr&amp;gt;,
## #   `00:14:bf:b1:97:8d` &amp;lt;chr&amp;gt;, `00:14:bf:b1:97:81` &amp;lt;chr&amp;gt;,
## #   `00:14:bf:3b:c7:c6` &amp;lt;chr&amp;gt;, `00:0f:a3:39:dd:cd` &amp;lt;chr&amp;gt;,
## #   `00:0f:a3:39:e0:4b` &amp;lt;chr&amp;gt;, `00:0f:a3:39:e2:10` &amp;lt;chr&amp;gt;,
## #   `02:64:fb:68:52:e6` &amp;lt;chr&amp;gt;, `02:00:42:55:31:00` &amp;lt;chr&amp;gt;,
## #   `00:04:0e:5c:23:fc` &amp;lt;chr&amp;gt;, `00:30:bd:f8:7f:c5` &amp;lt;chr&amp;gt;, `1.0` &amp;lt;chr&amp;gt;,
## #   `2.0` &amp;lt;chr&amp;gt;, `3.0` &amp;lt;chr&amp;gt;, `4.0` &amp;lt;chr&amp;gt;, `5.0` &amp;lt;chr&amp;gt;, `6.0` &amp;lt;chr&amp;gt;,
## #   `7.0` &amp;lt;chr&amp;gt;, `8.0` &amp;lt;chr&amp;gt;, `9.0` &amp;lt;chr&amp;gt;, `10.0` &amp;lt;chr&amp;gt;, `11.0` &amp;lt;chr&amp;gt;,
## #   `12.0` &amp;lt;chr&amp;gt;, `13.0` &amp;lt;chr&amp;gt;, `00:e0:63:82:8b:a9` &amp;lt;chr&amp;gt;,
## #   `02:37:fd:3b:54:b5` &amp;lt;chr&amp;gt;, `02:2e:58:22:f1:ac` &amp;lt;chr&amp;gt;,
## #   `02:42:1c:4e:b5:c0` &amp;lt;chr&amp;gt;, `02:0a:3d:06:94:88` &amp;lt;chr&amp;gt;,
## #   `02:5c:e0:50:49:de` &amp;lt;chr&amp;gt;, `02:4f:99:43:30:cd` &amp;lt;chr&amp;gt;,
## #   `02:b7:00:bb:a9:35` &amp;lt;chr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There we go! It’s a bit refreshing to work on datasets that are not pre-cleaned for you.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How long should I wait for my bike?</title>
      <link>/blog/2017-12-01-how-long-should-i-wait-for-my-bike/how-long-should-i-wait-for-my-bike/</link>
      <pubDate>Fri, 01 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/blog/2017-12-01-how-long-should-i-wait-for-my-bike/how-long-should-i-wait-for-my-bike/</guid>
      <description>


&lt;p&gt;I’ve just started a project which I’m very excited about. Everyday I take my bike to work and most days I have one of two problems. First, whenever I get to my station there are no bikes available; no problem, there’s an app that shows the closest stations with bikes available. The problem is that these stations might be far and sometimes I’m relucant to walk that much. I’d love for bicing to give me some time estimation until a new bike arrives.&lt;/p&gt;
&lt;p&gt;Second, whenever you’re trying to return a bike the station might not have any parking spaces available. Similarly, it would be very cool if bicing (the public bicycle company) gave me an estimate of how much time I should wait until a new bike will be taken. I started thinking on how I could implement this and started looking for bicing data online. To my surprise, bicing actually releases their &lt;strong&gt;live&lt;/strong&gt; data as a json! But for this type of estimation I need historical data. I want to know the pattern usage of the station and use that information for the prediction.&lt;/p&gt;
&lt;p&gt;With that idea in mind, I got to work. I needed to set up my Virtual Private Server (VPS) to pull the data from the bicing API everyday. Because this is still a work in progress, I will only describe here how I set my VPS to scrape the bicing API everyday and how I set &lt;code&gt;cron&lt;/code&gt; to send me an email after every scrape.&lt;/p&gt;
&lt;p&gt;I have a VPS from &lt;a href=&#34;https://www.digitalocean.com/&#34;&gt;Digital Ocean&lt;/a&gt; with an Ubuntu OS and 512 mb of RAM and 2 GB of hard disk. That’s enough for this task because the data should not be very big, even in the long run. In any case you can adjust for your VPS to have more memory/ram without losing information. Assuming you have &lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-install-r-on-ubuntu-16-04-2&#34;&gt;R installed in your Ubuntu VPS&lt;/a&gt; with your favorite packages, then make sure your script works by running &lt;code&gt;Rscript path/to/your/script.R&lt;/code&gt;. It might be better to type &lt;code&gt;which Rscript&lt;/code&gt; in the terminal and paste the path to the executable, similar to &lt;code&gt;/usr/bin/Rscript path/to/your/script.R&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;My workflow is as follows: I first create an empty dataset saved as &lt;code&gt;.rds&lt;/code&gt; and my script reads the data, scrapes the bicing data and then saves the data by appending both the empty and the scraped data. It finishes by saving the same &lt;code&gt;.rds&lt;/code&gt; for a later scrape. I tested this very thoroughly to make sure the script wouldn’t fail and I always get the expected data.&lt;/p&gt;
&lt;p&gt;All good so far, right? This took me no time. The hard problem came when setting the &lt;code&gt;cron&lt;/code&gt; job, which is a way of scheduling tasks in OSx and Ubuntu. For an explanation of how &lt;code&gt;cron&lt;/code&gt; works, check out how I set &lt;a href=&#34;blog/2017-03-08-my-pisa-twitter-bot/my-pisa-twitter-bot/index.html&#34;&gt;my PISA twitter bot&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First, make sure you have &lt;code&gt;cron&lt;/code&gt; &lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-use-cron-to-automate-tasks-on-a-vps&#34;&gt;installed&lt;/a&gt;. I followed &lt;strong&gt;a lot&lt;/strong&gt; of tutorials and dispered information. What worked for me perhaps does not work for you, but here it is.&lt;/p&gt;
&lt;p&gt;Type &lt;code&gt;crontab -e&lt;/code&gt; and the cron interface should appear. The lines starting with &lt;code&gt;#&lt;/code&gt; are coments, so scroll down until the end of the comments. First we have to set a few environmental variables that &lt;code&gt;cron&lt;/code&gt; uses to execute your script. I followed &lt;a href=&#34;http://krisjordan.com/essays/timesaving-crontab-tips&#34;&gt;these tips&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When I finished my crontab looked like this:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;SHELL=/bin/bash
PATH=/home/cimentadaj/bin:/home/cimentadaj/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
HOME=/home/cimentadaj/bicycle
MAILTO=my_email # set email here!
15,50 16  * * * /usr/bin/Rscript scrape_bicing.R&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;SHELL is the path to the pre-determined program to run on the cron job. Be default I set it to bash (but it could be anything else you want).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;PATH I’m not sure what’s for but I pasted the output of &lt;code&gt;echo $PATH&lt;/code&gt;, as the tips suggested.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;HOME is the root directory where the script will be executed, I set it to where the script is (or where your project is at).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;MAILTO is the email where I will get the cron job alert when it finishes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;15,50 16  * * * /usr/bin/Rscript scrape_bicing.R&lt;/code&gt; is the schedule, program and script to run. Here I set arbitrary times, so the the script is scheduled to run at &lt;code&gt;16:15&lt;/code&gt; and &lt;code&gt;16:50&lt;/code&gt; every day, every month and every year. I will run using &lt;code&gt;Rscript&lt;/code&gt; and the name of the script to run.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;WARNING:&lt;/strong&gt; remember that the &lt;code&gt;cron&lt;/code&gt; is set relative to the time of where your server is. Mine did not have the same timezone of where I lived, so I had to set the &lt;code&gt;cron&lt;/code&gt; one hour before of my actual time. Use &lt;code&gt;date&lt;/code&gt; to print the time of your VPS.&lt;/p&gt;
&lt;p&gt;Even after this, the &lt;code&gt;cron&lt;/code&gt; job was still not running. Nothing, no email, no log, no change in the data. I then figured out that Ubuntu systems have some &lt;a href=&#34;https://serverfault.com/a/754104&#34;&gt;pecularities&lt;/a&gt; when it comes to &lt;code&gt;cron&lt;/code&gt;. So I went to &lt;code&gt;./etc/&lt;/code&gt; and renamed every &lt;code&gt;cron.&lt;/code&gt; file for &lt;code&gt;cron-&lt;/code&gt; with &lt;code&gt;rename &#39;s/cron./cron-/g&#39; *&lt;/code&gt;, thanks to this &lt;a href=&#34;https://stackoverflow.com/a/20657563/3617958&#34;&gt;answer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Run again and it worked! Great. However, I didn’t receive an email stating that the &lt;code&gt;cron&lt;/code&gt; job finished. I looked up many solutions and ended up installing &lt;code&gt;ssmtp&lt;/code&gt; which is a library for sending emails from terminal. I won’t bore you with the details. Here are the steps I took:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Install &lt;code&gt;ssmtp&lt;/code&gt; with &lt;code&gt;sudo apt-get update&lt;/code&gt; and &lt;code&gt;sudo apt-get install ssmtp&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Edit &lt;code&gt;ssmtp.conf&lt;/code&gt; with &lt;code&gt;sudo nano /etc/ssmtp/ssmtp.conf&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here’s the config that worked for me using &lt;code&gt;gmail&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;# Config file for sSMTP sendmail
#
# The person who gets all mail for userids &amp;lt; 1000
# Make this empty to disable rewriting.
root=your_email@gmail.com

# The place where the mail goes. The actual machine name is required no 
# MX records are consulted. Commonly mailhosts are named mail.domain.com
mailhub=smtp.gmail.com:587

AuthUser=your_email@gmail.com
AuthPass=your_password
UseTLS=YES
UseSTARTTLS=yes
TLS_CA_FILE=/etc/ssl/certs/ca-certificates.crt

# Where will the mail seem to come from?
#rewriteDomain=gmail.com

# The full hostname
hostname=your_host_name

# Are users allowed to set their own From: address?
# YES - Allow the user to specify their own From: address
# NO - Use the system generated From: address
#FromLineOverride=YES&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Three caveats that took me a lot of time to figure out.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;First, &lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-use-google-s-smtp-server&#34;&gt;some docs&lt;/a&gt; say you should use another port in &lt;code&gt;mailhub&lt;/code&gt;, but &lt;code&gt;587&lt;/code&gt; worked for me.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;TLS_CA_FILE&lt;/code&gt;: make sure that &lt;a href=&#34;https://askubuntu.com/questions/342484/etc-pki-tls-certs-ca-bundle-crt-not-found&#34;&gt;this file exists&lt;/a&gt;! For Ubuntu/Debian the file is at &lt;code&gt;/etc/ssl/certs/ca-certificates.crt&lt;/code&gt; while on other platforms it might be in &lt;code&gt;/etc/pki/tls/certs/ca-bundle.crt&lt;/code&gt;. Note the different file names!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;hostname&lt;/code&gt; should be the result of typing &lt;code&gt;hostname&lt;/code&gt; in your server.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lastly, I also added the line &lt;code&gt;root:your_EMAIL_@gmail.com:smtp.gmail.com:587&lt;/code&gt; with &lt;code&gt;sudo nano /etc/ssmtp/revaliases&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;After an entire day figuring out all this information, the &lt;code&gt;cron&lt;/code&gt; job worked! I now set my &lt;code&gt;cron&lt;/code&gt; job and whenever it finished I receive an email directly showing the log of the script.&lt;/p&gt;
&lt;p&gt;I wrote this primarily for me not to forget any of this, but it might be useful for other people.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Scraping and visualizing How I Met Your Mother</title>
      <link>/blog/2017-10-16-scraping-and-visualizing-how-i-met-your-mother/scraping-and-visualizing-how-i-met-your-mother/</link>
      <pubDate>Mon, 16 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/blog/2017-10-16-scraping-and-visualizing-how-i-met-your-mother/scraping-and-visualizing-how-i-met-your-mother/</guid>
      <description>


&lt;p&gt;How I Met Your Mother (HIMYM from here after) is a television series very similar to the classical ‘Friends’ series from the 90’s. Following the release of the &lt;a href=&#34;http://tidytextmining.com/&#34;&gt;tidy text&lt;/a&gt; book I was looking for a project in which I could apply these skills. I decided I would scrape all the transcripts from HIMYM and analyze patterns between characters. This post really took me to the limit in terms of web scraping and pattern matching, which was specifically what I wanted to improve in the first place. Let’s begin!&lt;/p&gt;
&lt;p&gt;My first task was whether there was any consistency in the URL’s that stored the transcripts. If you ever watched HIMYM, we know there’s around nine seasons, each one with about 22 episodes. This makes about 200 episodes give or take. It would be a big pain to manually write down 200 complicated URL’s. Luckily, there is a way of finding the 200 links without writing them down manually.&lt;/p&gt;
&lt;p&gt;First, we create the links for the 9 websites that contain all episodes (1 through season 9)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(rvest)
library(tidyverse)
library(stringr)
library(tidytext)

main_url &amp;lt;- &amp;quot;http://transcripts.foreverdreaming.org&amp;quot;
all_pages &amp;lt;- paste0(&amp;quot;http://transcripts.foreverdreaming.org/viewforum.php?f=177&amp;amp;start=&amp;quot;, seq(0, 200, 25))
characters &amp;lt;- c(&amp;quot;ted&amp;quot;, &amp;quot;lily&amp;quot;, &amp;quot;marshall&amp;quot;, &amp;quot;barney&amp;quot;, &amp;quot;robin&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Each of the URL’s of &lt;code&gt;all_pages&lt;/code&gt; contains all episodes for that season (so around 22 URL’s). I also picked the characters we’re gonna concentrate for now. From here the job is very easy. We create a function that reads each link and parses the section containing all links for that season. We can do that using &lt;a href=&#34;http://selectorgadget.com/.&#34;&gt;SelectorGadget&lt;/a&gt; to find the section we’re interested in. We then search for the &lt;code&gt;href&lt;/code&gt; attribute to grab all links in that attribute and finally create a tibble with each episode together with it’s link.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;episode_getter &amp;lt;- function(link) {
  title_reference &amp;lt;-
    link %&amp;gt;%
    read_html() %&amp;gt;%
    html_nodes(&amp;quot;.topictitle&amp;quot;) # Get the html node name with &amp;#39;selector gadget&amp;#39;
  
  episode_links &amp;lt;-
    title_reference %&amp;gt;%
    html_attr(&amp;quot;href&amp;quot;) %&amp;gt;%
    gsub(&amp;quot;^.&amp;quot;, &amp;quot;&amp;quot;, .) %&amp;gt;%
    paste0(main_url, .) %&amp;gt;%
    setNames(title_reference %&amp;gt;% html_text()) %&amp;gt;%
    enframe(name = &amp;quot;episode_name&amp;quot;, value = &amp;quot;link&amp;quot;)
  
  episode_links
}

all_episodes &amp;lt;- map_df(all_pages, episode_getter) # loop over all seasons and get all episode links
all_episodes$id &amp;lt;- 1:nrow(all_episodes)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There we go! Now we have a very organized &lt;code&gt;tibble&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;all_episodes
# # A tibble: 208 x 3
#    episode_name                   link                                  id
#    &amp;lt;chr&amp;gt;                          &amp;lt;chr&amp;gt;                              &amp;lt;int&amp;gt;
#  1 01x01 - Pilot                  http://transcripts.foreverdreamin~     1
#  2 01x02 - Purple Giraffe         http://transcripts.foreverdreamin~     2
#  3 01x03 - Sweet Taste of Liberty http://transcripts.foreverdreamin~     3
#  4 01x04 - Return of the Shirt    http://transcripts.foreverdreamin~     4
#  5 01x05 - Okay Awesome           http://transcripts.foreverdreamin~     5
#  6 01x06 - Slutty Pumpkin         http://transcripts.foreverdreamin~     6
#  7 01x07 - Matchmaker             http://transcripts.foreverdreamin~     7
#  8 01x08 - The Duel               http://transcripts.foreverdreamin~     8
#  9 01x09 - Belly Full of Turkey   http://transcripts.foreverdreamin~     9
# 10 01x10 - The Pineapple Incident http://transcripts.foreverdreamin~    10
# # ... with 198 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The remaining part is to actually scrape the text from each episode. We can work that out for a single episode and then turn that into a function and apply for all episodes.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;episode_fun &amp;lt;- function(file) {
  
  file %&amp;gt;%
    read_html() %&amp;gt;%
    html_nodes(&amp;quot;.postbody&amp;quot;) %&amp;gt;%
    html_text() %&amp;gt;%
    str_split(&amp;quot;\n|\t&amp;quot;) %&amp;gt;%
    .[[1]] %&amp;gt;%
    data_frame(text = .) %&amp;gt;%
    filter(str_detect(text, &amp;quot;&amp;quot;), # Lots of empty spaces
           !str_detect(text, &amp;quot;^\\t&amp;quot;), # Lots of lines with \t to delete
           !str_detect(text, &amp;quot;^\\[.*\\]$&amp;quot;), # Text that start with brackets
           !str_detect(text, &amp;quot;^\\(.*\\)$&amp;quot;), # Text that starts with parenthesis
           str_detect(text, &amp;quot;^*.:&amp;quot;), # I want only lines with start with dialogue (:)
           !str_detect(text, &amp;quot;^ad&amp;quot;)) # Remove lines that start with ad (for &amp;#39;ads&amp;#39;, the link of google ads)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above function reads each episode, turns the html text into a data frame and organizes it clearly for text analysis. For example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;episode_fun(all_episodes$link[15])
# # A tibble: 195 x 1
#    text                                                                   
#    &amp;lt;chr&amp;gt;                                                                  
#  1 Ted from 2030: Kids, something you might not know about your Uncle Mar~
#  2 &amp;quot;Ted: You don&amp;#39;t have to shout out \&amp;quot;poker\&amp;quot; when you win.&amp;quot;             
#  3 Marshall: I know. It&amp;#39;s just fun to say.                                
#  4 &amp;quot;Ted from 2030: We all finally agreed Marshall should be running our g~
#  5 &amp;quot;Marshall: It&amp;#39;s called \&amp;quot;Marsh-gammon.\&amp;quot; It combines all the best feat~
#  6 Robin: Backgammon, obviously.                                          
#  7 &amp;quot;Marshall: No. Backgammon sucks. I took the only good part of backgamm~
#  8 Lily: I&amp;#39;m so excited Victoria&amp;#39;s coming.                                
#  9 Robin: I&amp;#39;m going to go get another round.                              
# 10 Ted: Okay, I want to lay down some ground rules for tonight. Barney, I~
# # ... with 185 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We now have a data frame with only dialogue for each character. We need to apply that function to each episode and &lt;code&gt;bind&lt;/code&gt; everything together. We first apply the function to every episode.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;all_episodes$text &amp;lt;- map(all_episodes$link, episode_fun)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;text&lt;/code&gt; list-column is an organized list with text for each episode. However, manual inspection of some episodes actually denotes a small error that limits our analysis greatly. Among the main interests of this document is to study relationships and presence between characters. For that, we need each line of text to be accompanied by the character who said it. Unfortunately, some of these scripts don’t have that.&lt;/p&gt;
&lt;p&gt;For example, check any episode from season &lt;a href=&#34;http://transcripts.foreverdreaming.org/viewforum.php?f=177&amp;amp;start=175&#34;&gt;8&lt;/a&gt; and &lt;a href=&#34;http://transcripts.foreverdreaming.org/viewforum.php?f=177&amp;amp;start=200&#34;&gt;9&lt;/a&gt;. The writer didn’t write the dialogue and just rewrote the lines. There’s nothing we can do so far to improve that and we’ll be excluding these episodes. This pattern is also present in random episodes like in season 4 or season 6. We can exclude chapters based on the number of lines we parsed. On average, each of these episodes has about 200 lines of dialogue. Anything significantly lower, like 30 or 50 lines, is an episode which doesn’t have a lot of dialogue.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;all_episodes$count &amp;lt;- map_dbl(all_episodes$text, nrow)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can extend the previous &lt;code&gt;tibble&lt;/code&gt; to be a bit more organized by separating the episode-season column into separate season and episo numbers.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;all_episodes &amp;lt;-
  all_episodes %&amp;gt;%
  separate(episode_name, c(&amp;quot;season&amp;quot;, &amp;quot;episode&amp;quot;), &amp;quot;-&amp;quot;, extra = &amp;quot;merge&amp;quot;) %&amp;gt;%
  separate(season, c(&amp;quot;season&amp;quot;, &amp;quot;episode_number&amp;quot;), sep = &amp;quot;x&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Great! We now have a very organized &lt;code&gt;tibble&lt;/code&gt; with all the information we need. Next step is to actually break down the lines into words and start looking for general patterns. We can do that by looping through all episodes that have over 100 lines (just an arbitrary threshold) and unnesting each line for each &lt;strong&gt;valid&lt;/strong&gt; character.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lines_characters &amp;lt;-
  map(filter(all_episodes, count &amp;gt; 100) %&amp;gt;% pull(text), ~ { 
    # only loop over episodes that have over 100 lines
    .x %&amp;gt;%
      separate(text, c(&amp;quot;character&amp;quot;, &amp;quot;text&amp;quot;), sep = &amp;quot;:&amp;quot;, extra = &amp;#39;merge&amp;#39;) %&amp;gt;%
      # separate character dialogue from actual dialogo
      unnest_tokens(character, character) %&amp;gt;%
      filter(str_detect(character, paste0(paste0(&amp;quot;^&amp;quot;, characters, &amp;quot;$&amp;quot;), collapse = &amp;quot;|&amp;quot;))) %&amp;gt;%
      # only count the lines of our chosen characters
      mutate(episode_lines_id = 1:nrow(.))
  }) %&amp;gt;%
  setNames(filter(all_episodes, count &amp;gt; 100) %&amp;gt;% # name according to episode
             unite(season_episode, season, episode_number, sep = &amp;quot;x&amp;quot;) %&amp;gt;%
             pull(season_episode)) %&amp;gt;%
  enframe() %&amp;gt;%
  unnest() %&amp;gt;%
  mutate(all_lines_id = 1:nrow(.))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ok, our text is sort of ready. Let’s remove some bad words.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;words_per_character &amp;lt;-
  lines_characters %&amp;gt;%
  unnest_tokens(word, text) %&amp;gt;% # expand all sentences into words
  anti_join(stop_words) %&amp;gt;% # remove bad words
  filter(!word %in% characters) %&amp;gt;% # only select characters we&amp;#39;re interested
  arrange(name) %&amp;gt;%
  separate(name, c(&amp;quot;season&amp;quot;, &amp;quot;episode&amp;quot;), sep = &amp;quot;x&amp;quot;, remove = FALSE) %&amp;gt;%
  mutate(name = factor(name, ordered = TRUE),
         season = factor(season, ordered = TRUE),
         episode = factor(episode, ordered = TRUE)) %&amp;gt;%
  filter(season != &amp;quot;07&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Just to make sure, let’s look at the &lt;code&gt;tibble&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;words_per_character
# # A tibble: 88,174 x 7
#    name     season episode character episode_lines_id all_lines_id word   
#    &amp;lt;ord&amp;gt;    &amp;lt;ord&amp;gt;  &amp;lt;ord&amp;gt;   &amp;lt;chr&amp;gt;                &amp;lt;int&amp;gt;        &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;  
#  1 &amp;quot;01x01 &amp;quot; 01     &amp;quot;01 &amp;quot;   marshall                 1            1 ring   
#  2 &amp;quot;01x01 &amp;quot; 01     &amp;quot;01 &amp;quot;   marshall                 1            1 marry  
#  3 &amp;quot;01x01 &amp;quot; 01     &amp;quot;01 &amp;quot;   ted                      2            2 perfect
#  4 &amp;quot;01x01 &amp;quot; 01     &amp;quot;01 &amp;quot;   ted                      2            2 engaged
#  5 &amp;quot;01x01 &amp;quot; 01     &amp;quot;01 &amp;quot;   ted                      2            2 pop    
#  6 &amp;quot;01x01 &amp;quot; 01     &amp;quot;01 &amp;quot;   ted                      2            2 champa~
#  7 &amp;quot;01x01 &amp;quot; 01     &amp;quot;01 &amp;quot;   ted                      2            2 drink  
#  8 &amp;quot;01x01 &amp;quot; 01     &amp;quot;01 &amp;quot;   ted                      2            2 toast  
#  9 &amp;quot;01x01 &amp;quot; 01     &amp;quot;01 &amp;quot;   ted                      2            2 kitchen
# 10 &amp;quot;01x01 &amp;quot; 01     &amp;quot;01 &amp;quot;   ted                      2            2 floor  
# # ... with 88,164 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Perfect! One row per word, per character, per episode with the id of the line of the word.&lt;/p&gt;
&lt;p&gt;Alright, let’s get our hands dirty. First, let visualize the presence of each character in terms of words over time.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Filtering position of first episode of all seasons to
# position the X axis in the next plot.
first_episodes &amp;lt;-
  all_episodes %&amp;gt;%
  filter(count &amp;gt; 100, episode_number == &amp;quot;01 &amp;quot;) %&amp;gt;%
  pull(id)

words_per_character %&amp;gt;%
  split(.$name) %&amp;gt;%
  setNames(1:length(.)) %&amp;gt;%
  enframe(name = &amp;quot;episode_id&amp;quot;) %&amp;gt;%
  unnest() %&amp;gt;%
  count(episode_id, character) %&amp;gt;%
  group_by(episode_id) %&amp;gt;%
  mutate(total_n = sum(n),
         perc = round(n / total_n, 2)) %&amp;gt;%
  ggplot(aes(as.numeric(episode_id), perc, group = character, colour = character)) +
  geom_line() +
  geom_smooth(method = &amp;quot;lm&amp;quot;) +
  scale_colour_discrete(guide = FALSE) +
  scale_x_continuous(name = &amp;quot;Seasons&amp;quot;,
                     breaks = first_episodes, labels = paste0(&amp;quot;S&amp;quot;, 1:7)) +
  scale_y_continuous(name = &amp;quot;Percentage of words per episode&amp;quot;) +
  theme_minimal() +
  facet_wrap(~ character, ncol = 3)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/blog/2017-10-16-scraping-and-visualizing-how-i-met-your-mother/2017-10-16-scraping-and-visualizing-how-i-met-your-mother_files/figure-html/unnamed-chunk-13-1.png&#34; width=&#34;768&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Ted is clearly the character with the highest number of words per episode followed by Barney. Lily and Robin, the only two women have very low presence compared to the men. In fact, if one looks closely, Lily seemed to have decreased slightly over time, having an all time low in season 4. Marshall, Lily’s partner in the show, does have much lower presence than both Barney and Ted but he has been catching up over time.&lt;/p&gt;
&lt;p&gt;We also see an interesting pattern where Barney has a lot of peaks, suggesting that in some specific episodes he gains predominance, where Ted has an overall higher level of words per episode. And when Ted has peaks, it’s usually below its trend-line.&lt;/p&gt;
&lt;p&gt;Looking at the distribution:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# devtools::install_github(&amp;quot;clauswilke/ggjoy&amp;quot;)
library(ggjoy)

words_per_character %&amp;gt;%
  split(.$name) %&amp;gt;%
  setNames(1:length(.)) %&amp;gt;%
  enframe(name = &amp;quot;episode_id&amp;quot;) %&amp;gt;%
  unnest() %&amp;gt;%
  count(season, episode_id, character) %&amp;gt;%
  group_by(episode_id) %&amp;gt;%
  mutate(total_n = sum(n),
         perc = round(n / total_n, 2)) %&amp;gt;%
  ggplot(aes(x = perc, y = character, fill = character)) +
  geom_joy(scale = 0.85) +
  scale_fill_discrete(guide = F) +
  scale_y_discrete(name = NULL, expand=c(0.01, 0)) +
  scale_x_continuous(name = &amp;quot;Percentage of words&amp;quot;, expand=c(0.01, 0)) +
  ggtitle(&amp;quot;Percentage of words per season&amp;quot;) +
  facet_wrap(~ season, ncol = 7) +
  theme_minimal()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/blog/2017-10-16-scraping-and-visualizing-how-i-met-your-mother/2017-10-16-scraping-and-visualizing-how-i-met-your-mother_files/figure-html/unnamed-chunk-14-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;we see the differences much clearer. For example, we see Barney’s peaks through out every season with Season 6 seeing a clear peak of 40%. On the other hand, we see that their distributions don’t change that much over time! Suggesting that the presence of each character is very similar in all seasons. Don’t get me wrong, there are differences like Lily in Season 2 and then in Season 6, but in overall terms the previous plot suggests no increase over seasons, and this plot suggests that between seasons, there’s not a lot of change in their distributions that affects the overall mean.&lt;/p&gt;
&lt;p&gt;If you’ve watched the TV series, you’ll remember Barney always repeating one similar trademark word: legendary! Although it is a bit cumbersome for us to count the number of occurrences of that sentence once we unnested each sentence, we can at least count the number of words per character and see whether some characters have particular words.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;count_words &amp;lt;-
  words_per_character %&amp;gt;%
  filter(!word %in% characters) %&amp;gt;%
  count(character, word, sort = TRUE)

count_words %&amp;gt;%
  group_by(character) %&amp;gt;%
  top_n(20) %&amp;gt;%
  ggplot(aes(reorder(word, n), n)) +
  geom_col(alpha = 0.8) +
  coord_flip() +
  facet_wrap(~ character, scales = &amp;quot;free_y&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/blog/2017-10-16-scraping-and-visualizing-how-i-met-your-mother/2017-10-16-scraping-and-visualizing-how-i-met-your-mother_files/figure-html/unnamed-chunk-15-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Here we see that a lot of the words we capture are actually nouns or expressions which are common to everyone, such as ‘yeah’, ‘hey’ or ‘time’. We can weight down commonly used words for other words which are important but don’t get repeated a lot. We can exclude those words using &lt;code&gt;bind_tf_idf()&lt;/code&gt;, which for each character decreases the weight for commonly used words and increases the weight for words that are not used very much in a collection or corpus of documents (see 3.3 in &lt;a href=&#34;http://tidytextmining.com/tfidf.html&#34; class=&#34;uri&#34;&gt;http://tidytextmining.com/tfidf.html&lt;/a&gt;).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;count_words %&amp;gt;%
  bind_tf_idf(word, character, n) %&amp;gt;%
  arrange(desc(tf_idf)) %&amp;gt;%
  group_by(character) %&amp;gt;%
  top_n(20) %&amp;gt;%
  ggplot(aes(reorder(word, n), n)) +
  geom_col(alpha = 0.8) +
  coord_flip() +
  facet_wrap(~ character, scales = &amp;quot;free_y&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/blog/2017-10-16-scraping-and-visualizing-how-i-met-your-mother/2017-10-16-scraping-and-visualizing-how-i-met-your-mother_files/figure-html/unnamed-chunk-16-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now Barney has a very distinctive word usage, one particularly sexist with words such as couger, bang and tits. Also, we see the word legendary as the thirdly repeated word, something we were expecting! On the other hand, we see Ted with things like professor (him), aunt (because of aunt Lily and such).&lt;/p&gt;
&lt;p&gt;Knowing that Ted is the main character in the series is no surprise. To finish off, we’re interested in knowing which characters are related to each other. First, let’s turn the data frame into a suitable format.&lt;/p&gt;
&lt;p&gt;Here we turn all lines to lower case and check which characters are present in the text of each dialogue. The loop will return a vector of logicals whether there was a mention of any of the characters. For simplicity I exclude all lines where there is more than 1 mention of a character, that is, 2 or more characters.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lines_characters &amp;lt;-
  lines_characters %&amp;gt;%
  mutate(text = str_to_lower(text))

rows_fil &amp;lt;-
  map(characters, ~ str_detect(lines_characters$text, .x)) %&amp;gt;%
  reduce(`+`) %&amp;gt;%
  ifelse(. &amp;gt;= 2, 0, .) # excluding sentences which have 2 or more mentions for now
  # ideally we would want to choose to count the number of mentions
  # per line or randomly choose another a person that was mentioned.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we have the rows that have a mention of another character, we subset only those rows. Then we want know which character was mentioned in which line. I loop through each line and test which character is present in that specific dialogue line. The loop returns the actual character name for each dialogue. Because we already filtered lines that &lt;strong&gt;have&lt;/strong&gt; a character name mentioned, the loop should return a vector of the same length.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;character_relation &amp;lt;-
  lines_characters %&amp;gt;%
  filter(as.logical(rows_fil)) %&amp;gt;%
  mutate(who_said_what =
           map_chr(.$text, ~ { # loop over all each line
             who_said_what &amp;lt;- map_lgl(characters, function(.y) str_detect(.x, .y))
             # loop over each character and check whether he/she was mentioned
             # in that line
             characters[who_said_what]
             # subset the character that matched
           }))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we plot the relationship using the &lt;code&gt;ggraph&lt;/code&gt; package.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggraph)
library(igraph)

character_relation %&amp;gt;%
  count(character, who_said_what) %&amp;gt;%
  graph_from_data_frame() %&amp;gt;%
  ggraph(layout = &amp;quot;linear&amp;quot;, circular = TRUE) +
  geom_edge_arc(aes(edge_alpha = n, edge_width = n),
                width = 2.5, show.legend = FALSE) +
  geom_node_text(aes(label = name), repel = TRUE) +
  theme_void()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/blog/2017-10-16-scraping-and-visualizing-how-i-met-your-mother/2017-10-16-scraping-and-visualizing-how-i-met-your-mother_files/figure-html/unnamed-chunk-19-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;A very clear pattern emerges. There is a strong relationship between Robin and Barney towards Ted. In fact, their direct relationship is very weak, but both are very well connected to Ted. On the other hand, Marshall and Lily are also reasonably connected to Ted but with a weaker link. Both of them are indeed very connected, as should be expected since they were a couple in the TV series.&lt;/p&gt;
&lt;p&gt;We also see that the weakest members of the group are Robin and Barney with only strong bonds toward Ted but no strong relationship with the other from the group. Overall, there seems to be a division: Marshall and Lily hold a somewhat close relationship with each other and towards Ted and Barney and Robin tend to be related to Ted but no one else.&lt;/p&gt;
&lt;p&gt;As a follow-up question, is this pattern of relationships the same across all seasons? We can do that very quickly by filtering each season using the previous plot.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(cowplot)

# Loop through each season
seasons &amp;lt;- paste0(0, 1:7)

all_season_plots &amp;lt;- lapply(seasons, function(season_num) {

  set.seed(2131)
  
  character_relation %&amp;gt;%
    # Extract the season number from the `name` column
    mutate(season = str_replace_all(character_relation$name, &amp;quot;x(.*)$&amp;quot;, &amp;quot;&amp;quot;)) %&amp;gt;%
    filter(season == season_num) %&amp;gt;%
    count(character, who_said_what) %&amp;gt;%
    graph_from_data_frame() %&amp;gt;%
    ggraph(layout = &amp;quot;linear&amp;quot;, circular = TRUE) +
    geom_edge_arc(aes(edge_alpha = n, edge_width = n),
                  width = 2.5, show.legend = FALSE) +
    geom_node_text(aes(label = name), repel = TRUE) +
    theme_void()
})

# Plot all graphs side-by-side
cowplot::plot_grid(plotlist = all_season_plots, labels = seasons)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/blog/2017-10-16-scraping-and-visualizing-how-i-met-your-mother/2017-10-16-scraping-and-visualizing-how-i-met-your-mother_files/figure-html/unnamed-chunk-20-1.png&#34; width=&#34;960&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;There are reasonable changes for all non-Ted relationship! For example, for season 2 the relationship Marshall-Lily-Ted becomes much stronger and it disappears in season 3. Let’s remember that these results might be affected by the fact that I excluded some episodes because of low number of dialogue lines. Keeping that in mind, we also see that for season 7 the Robin-Barney relationship became much stronger (is this the season the started dating?). All in all, the relationships don’t look dramatically different from the previous plot. Everyone seems to be strongly related to Ted. The main difference is the changes in relationship between the other members of the cast.&lt;/p&gt;
&lt;p&gt;This dataset has a lot of potential and I’m sure I’ve scratched the surface of what one can do with this data. I encourage anyone interested in the topic to use the code to analyze the data further. One idea I might explore in the future is to build a model that attempts to predict who said what for all dialogue lines that didn’t have a character member. This can be done by extracting features from all sentences and using these patterns try to classify which. Any feedback is welcome, so feel free to message me at &lt;a href=&#34;mailto:cimentadaj@gmail.com&#34;&gt;cimentadaj@gmail.com&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>perccalc package</title>
      <link>/blog/2017-08-01-perccalc-package/perccalc-package/</link>
      <pubDate>Tue, 01 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>/blog/2017-08-01-perccalc-package/perccalc-package/</guid>
      <description>


&lt;p&gt;Reardon (2011) introduced a very interesting concept in which he calculates percentile differences from ordered categorical variables. He explains his procedure very much in detail in the appendix of the book chapter but no formal implementation has been yet available on the web. With this package I introduce a function that applies the procedure, following a step-by-step Stata script that Sean Reardon kindly sent me.&lt;/p&gt;
&lt;p&gt;In this vignette I show you how to use the function and match the results to the Stata code provided by Reardon himself.&lt;/p&gt;
&lt;p&gt;For this example, we’ll use a real world data set, one I’m very much familiar with: PISA. We’ll use the PISA 2012 wave for Germany because it asked parents about their income category. For this example we’ll need the packages below.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# install.packages(c(&amp;quot;devtools&amp;quot;, &amp;quot;matrixStats&amp;quot;, &amp;quot;tidyverse&amp;quot;))
# devtools::install_github(&amp;quot;pbiecek/PISA2012lite&amp;quot;)

library(matrixStats)
library(tidyverse)
library(haven)
library(PISA2012lite)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you haven’t installed any of the packages above, uncomment the first two lines to install them. Beware that the &lt;code&gt;PISA2012lite&lt;/code&gt; package contains the PISA 2012 data and takes a while to download.&lt;/p&gt;
&lt;p&gt;Let’s prepare the data. Below we filter only German students, select only the math test results and calculate the median of all math plausible values to get one single math score. Finally, we match each student with their corresponding income data from their parents data and their sample weights.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ger_student &amp;lt;- student2012 %&amp;gt;%
  filter(CNT == &amp;quot;Germany&amp;quot;) %&amp;gt;%
  select(CNT, STIDSTD, matches(&amp;quot;^PV*.MATH$&amp;quot;)) %&amp;gt;%
  transmute(CNT, STIDSTD,
            avg_score = rowMeans(student2012[student2012$CNT == &amp;quot;Germany&amp;quot;, paste0(&amp;quot;PV&amp;quot;, 1:5, &amp;quot;MATH&amp;quot;)]))

ger_parent &amp;lt;-
  parent2012 %&amp;gt;%
  filter(CNT == &amp;quot;Germany&amp;quot;) %&amp;gt;%
  select(CNT, STIDSTD, PA07Q01)

ger_weights &amp;lt;-
  student2012weights %&amp;gt;%
  filter(CNT == &amp;quot;Germany&amp;quot;) %&amp;gt;%
  select(CNT, STIDSTD, W_FSTUWT)

dataset_ready &amp;lt;-
  ger_student %&amp;gt;%
  left_join(ger_parent, by = c(&amp;quot;CNT&amp;quot;, &amp;quot;STIDSTD&amp;quot;)) %&amp;gt;%
  left_join(ger_weights, by = c(&amp;quot;CNT&amp;quot;, &amp;quot;STIDSTD&amp;quot;)) %&amp;gt;%
  as_tibble() %&amp;gt;%
  rename(income = PA07Q01,
         score = avg_score,
         wt = W_FSTUWT) %&amp;gt;%
  select(-CNT, -STIDSTD)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The final results is this dataset:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 10 x 3
##   score income            wt
##   &amp;lt;dbl&amp;gt; &amp;lt;fct&amp;gt;          &amp;lt;dbl&amp;gt;
## 1  440. Less than &amp;lt;$A&amp;gt;  137.
## 2  523. Less than &amp;lt;$A&amp;gt;  170.
## 3  291. Less than &amp;lt;$A&amp;gt;  162.
## 4  437. Less than &amp;lt;$A&amp;gt;  162.
## 5  367. Less than &amp;lt;$A&amp;gt;  115.
## # ... with 5 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is the minimum dataset that the function will accept. This means that it needs to have at least a categorical variable and a continuous variable (the vector of weights is optional).&lt;/p&gt;
&lt;p&gt;The package is called &lt;code&gt;perccalc&lt;/code&gt;, short for percentile calculator and we can install and load it with this code:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;quot;perccalc&amp;quot;, repo = &amp;quot;https://cran.rediris.es/&amp;quot;)
## package &amp;#39;perccalc&amp;#39; successfully unpacked and MD5 sums checked
## 
## The downloaded binary packages are in
##  C:\Users\cimentadaj\AppData\Local\Temp\RtmpYFnDzN\downloaded_packages
library(perccalc)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The package has two functions, which I’ll show some examples. The first one is called &lt;code&gt;perc_diff&lt;/code&gt; and it’s very easy to use, we just specify the data, the name of the categorical and continuous variable and the percentile difference we want.&lt;/p&gt;
&lt;p&gt;Let’s put it to use!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;perc_diff(dataset_ready, income, score, percentiles = c(90, 10))
## Error: is_ordered_fct is not TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I generated that error on purpose to raise a very important requirement of the function. The categorical variable needs to be an ordered factor (categorical). It is very important because otherwise we could be calculating percentile differences of categorical variables such as married, single and widowed, which doesn’t make a lot of sense.&lt;/p&gt;
&lt;p&gt;We can turn it into an ordered factor with the code below.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dataset_ready &amp;lt;-
  dataset_ready %&amp;gt;%
  mutate(income = factor(income, ordered = TRUE))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now it’ll work.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;perc_diff(dataset_ready, income, score, percentiles = c(90, 10))
## difference         se 
##   97.00706    8.74790&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can play around with other percentiles&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;perc_diff(dataset_ready, income, score, percentiles = c(50, 10))
## difference         se 
##  58.776200   8.291083&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And we can add a vector of weights&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;perc_diff(dataset_ready, income, score, weights = wt, percentiles = c(90, 10))
## difference         se 
##  95.228517   8.454902&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, how are we sure that these estimates are as accurate as the Reardon (2011) implementation? We can compare the Stata ouput using this data set.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Saving the dataset to a path
dataset_ready %&amp;gt;%
  write_dta(path = &amp;quot;/Users/cimentadaj/Downloads/pisa_income.dta&amp;quot;, version = 13)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Running the code below using the &lt;code&gt;pisa_income.dta&lt;/code&gt;..&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;*--------
use &amp;quot;/Users/cimentadaj/Downloads/pisa_income.dta&amp;quot;, clear

tab income, gen(inc)
*--------

/*-----------------------
    Making a data set that has 
    one observation per income category
    and has mean and se(mean) in each category
    and percent of population in the category
------------------------*/

tempname memhold
tempfile results
postfile `memhold&amp;#39; income mean se_mean per using `results&amp;#39;

forv i = 1/6 {
    qui sum inc`i&amp;#39; [aw=wt]
    loc per`i&amp;#39; = r(mean)    
                                
    qui sum score if inc`i&amp;#39;==1 
                            
    if `r(N)&amp;#39;&amp;gt;0 {
        qui regress score if inc`i&amp;#39;==1 [aw=wt]
        post `memhold&amp;#39; (`i&amp;#39;) (_b[_cons]) (_se[_cons]) (`per`i&amp;#39;&amp;#39;)
                            
    }               
}
postclose `memhold&amp;#39; 

/*-----------------------
    Making income categories
    into percentiles
------------------------*/


    use `results&amp;#39;, clear

    sort income
    gen cathi = sum(per)
    gen catlo = cathi[_n-1]
    replace catlo = 0 if income==1
    gen catmid = (catlo+cathi)/2
    
    /*-----------------------
        Calculate income 
        achievement gaps
    ------------------------*/

    sort income
    
    g x1 = catmid
    g x2 = catmid^2 + ((cathi-catlo)^2)/12
    g x3 = catmid^3 + ((cathi-catlo)^2)/4

    g cimnhi = mean + 1.96*se_mean
    g cimnlo = mean - 1.96*se_mean

    reg mean x1 x2 x3 [aw=1/se_mean^2] 

    twoway (rcap cimnhi cimnlo catmid) (scatter mean catmid) ///
        (function y = _b[_cons] + _b[x1]*x + _b[x2]*x^2 + _b[x3]*x^3, ran(0 1)) 
    
    loc hi_p = 90
    loc lo_p = 10

    loc d1 = [`hi_p&amp;#39; - `lo_p&amp;#39;]/100
    loc d2 = [(`hi_p&amp;#39;)^2 - (`lo_p&amp;#39;)^2]/(100^2)
    loc d3 = [(`hi_p&amp;#39;)^3 - (`lo_p&amp;#39;)^3]/(100^3)

    lincom `d1&amp;#39;*x1 + `d2&amp;#39;*x2 + `d3&amp;#39;*x3
    loc diff`hi_p&amp;#39;`lo_p&amp;#39; = r(estimate)
    loc se`hi_p&amp;#39;`lo_p&amp;#39; = r(se)
    
    di &amp;quot;`hi_p&amp;#39;-`lo_p&amp;#39; gap:     `diff`hi_p&amp;#39;`lo_p&amp;#39;&amp;#39;&amp;quot;
    di &amp;quot;se(`hi_p&amp;#39;-`lo_p&amp;#39; gap): `se`hi_p&amp;#39;`lo_p&amp;#39;&amp;#39;&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I get that the 90/10 difference is &lt;code&gt;95.22&lt;/code&gt; with a standard error of &lt;code&gt;8.45&lt;/code&gt;. Does it sound familiar?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;perc_diff(dataset_ready, income, score, weights = wt, percentiles = c(90, 10))
## difference         se 
##  95.228517   8.454902&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The second function of the package is called &lt;code&gt;perc_dist&lt;/code&gt; and instead of calculating the difference of two percentiles, it returns the score and standard error of every percentile. The arguments of the function are exactly the same but without the &lt;code&gt;percentiles&lt;/code&gt; argument, because this will return the whole set of percentiles.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;perc_dist(dataset_ready, income, score)
## # A tibble: 100 x 3
##   percentile estimate std.error
##        &amp;lt;int&amp;gt;    &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;
## 1          1     3.69      1.33
## 2          2     7.28      2.59
## 3          3    10.8       3.79
## 4          4    14.1       4.93
## 5          5    17.4       6.01
## # ... with 95 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can also add the optional set of weights and graph it:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;perc_dist(dataset_ready, income, score, wt) %&amp;gt;%
  mutate(ci_low = estimate - 1.96 * std.error,
         ci_hi = estimate + 1.96 * std.error) %&amp;gt;%
  ggplot(aes(percentile, estimate)) +
  geom_point() +
  geom_errorbar(aes(ymin = ci_low, ymax = ci_hi))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/blog/2017-08-01-perccalc-package/2017-08-01-perccalc-package_files/figure-html/unnamed-chunk-15-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Please note that for calculating the difference between two percentiles it is more accurate to use the &lt;code&gt;perc_diff&lt;/code&gt; function. The &lt;code&gt;perc_diff&lt;/code&gt; calculates the difference through a linear combination of coefficients resulting in a different standard error.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;perc_dist(dataset_ready, income, score, wt) %&amp;gt;%
  filter(percentile %in% c(90, 10)) %&amp;gt;%
  summarize(diff = diff(estimate),
            se_diff = diff(std.error))
## # A tibble: 1 x 2
##    diff se_diff
##   &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;
## 1  95.2    5.68&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;compared to&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;perc_diff(dataset_ready, income, score, weights = wt, percentiles = c(90, 10))
## difference         se 
##  95.228517   8.454902&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;They both have the same point estimate but a different standard error.&lt;/p&gt;
&lt;p&gt;I hope this was a convincing example, I know this will be useful for me. All the intelectual ideas come from Sean Reardon and the Stata code was written by Sean Reardon, Ximena Portilla, and Jenna Finch. The R implemention is my own work.&lt;/p&gt;
&lt;p&gt;You can find the package repository &lt;a href=&#34;https://github.com/cimentadaj/perccalc&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reardon, Sean F. “The widening academic achievement gap between the rich and the poor: New evidence and possible explanations.” Whither opportunity (2011): 91-116.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>My PISA twitter bot</title>
      <link>/blog/2017-03-08-my-pisa-twitter-bot/my-pisa-twitter-bot/</link>
      <pubDate>Wed, 08 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>/blog/2017-03-08-my-pisa-twitter-bot/my-pisa-twitter-bot/</guid>
      <description>


&lt;p&gt;I’ve long wanted to prepare a project with R related to education. I knew I’d found the idea when I read Thomas Lumley’s &lt;a href=&#34;http://notstatschat.tumblr.com/post/156007757906/a-bus-watching-bot&#34;&gt;attempt to create a Twitter bot in which he tweeted bus arrivals in New Zealand&lt;/a&gt;. Quoting him, “Is it really hard to write a bot? No. Even I can do it. And I’m old.”&lt;/p&gt;
&lt;p&gt;So I said to myself, alright, you have to create a Twitter bot but it has to be related to education. It’s an easy project which shouldn’t take a lot of your time. I then came up with this idea: what if you could randomly sample questions from the &lt;a href=&#34;http://www.oecd.org/pisa/aboutpisa/&#34;&gt;PISA databases&lt;/a&gt; and create a sort of random facts generator. The result would be one graph a day, showing a question for some random sample of countries. I figured, why not prepare a post (both for me to remember how I did it but also so others can contribute to the project) where I explained step-by-step how I did it?&lt;/p&gt;
&lt;p&gt;The repository for the project is &lt;a href=&#34;https://github.com/cimentadaj/PISAfacts_twitterBot&#34;&gt;here&lt;/a&gt;, so feel free to drop any comments or improvements. The idea is to load the &lt;a href=&#34;http://vs-web-fs-1.oecd.org/pisa/PUF_SPSS_COMBINED_CMB_STU_QQQ.zip&#34;&gt;PISA 2015 data&lt;/a&gt;, randomly pick a question that doesn’t have a lot of labels (because then it’s very difficult to plot it nicely), and based on the type of question create an appropriate graph. Of course, all of this needs to be done on the fly, without human assistance. You can follow this twitter account at &lt;span class=&#34;citation&#34;&gt;@DailyPISA_Facts&lt;/span&gt;. Let’s start!&lt;/p&gt;
&lt;div id=&#34;data-wrangling&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Data wrangling&lt;/h2&gt;
&lt;p&gt;First we load some of the packages we’ll use and read the PISA 2015 student data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(forcats)
library(haven)
library(intsvy) # For correct estimation of PISA estimates
library(countrycode) # For countrycodes
library(cimentadaj) # devtools::install_github(&amp;quot;cimentadaj/cimentadaj&amp;quot;)
library(lazyeval)
library(ggthemes) # devtools::install_github(&amp;quot;jrnold/ggthemes&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;file_name &amp;lt;- file.path(tempdir(), &amp;quot;pisa.zip&amp;quot;)

download.file(
  &amp;quot;http://vs-web-fs-1.oecd.org/pisa/PUF_SPSS_COMBINED_CMB_STU_QQQ.zip&amp;quot;,
  destfile = file_name
)

unzip(file_name, exdir = tempdir())

pisa_2015 &amp;lt;- read_spss(file.path(tempdir(), &amp;quot;CY6_MS_CMB_STU_QQQ.sav&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Downloading the data takes a bit but make sure to download the zip file and unzip it as I’ve just outlined.&lt;/p&gt;
&lt;p&gt;The idea is to generate a script that can be used with all PISA datasets, so at some point we should be able not only to randomly pick question but also randomly pick PISA surveys (PISA has been implemented since the year 2000 in three year intervals). We create some places holders for the variable country name, the format of the country names and the missing labels we want to ignore for each question (I think these labels should be the same across all surveys).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;country_var &amp;lt;- &amp;quot;cnt&amp;quot;
country_types &amp;lt;- &amp;quot;iso3c&amp;quot;

missing_labels &amp;lt;- c(&amp;quot;Valid Skip&amp;quot;,
                    &amp;quot;Not Reached&amp;quot;,
                    &amp;quot;Not Applicable&amp;quot;,
                    &amp;quot;Invalid&amp;quot;,
                    &amp;quot;No Response&amp;quot;)

int_data &amp;lt;- pisa_2015 # Create a safe copy of the data, since it takes about 2 mins to read.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After this, I started doing some basic data manipulation. Each line is followed by a comment on why I did it.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;names(int_data) &amp;lt;- tolower(names(int_data)) # It&amp;#39;s easier to write variable names as lower case
int_data$region &amp;lt;- countrycode(int_data[[country_var]], country_types, &amp;quot;continent&amp;quot;)
# Create a region variable to add regional colours to plots at some point.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Most PISA datasets are in SPSS format, where the variable’s question has been written as a label. If you’ve used SPSS or SAS you know that labels are very common; they basically outline the question of that variable. In R, this didn’t properly exists until the &lt;code&gt;foreign&lt;/code&gt; and &lt;code&gt;haven&lt;/code&gt; package. With &lt;code&gt;read_spss()&lt;/code&gt;, each variable has now two important attributes called &lt;code&gt;label&lt;/code&gt; and &lt;code&gt;labels&lt;/code&gt;. Respectively, the first one contains the question, while the second contains the value labels (assuming the file to be read has these labels). This information will be vital to our PISA bot. In fact, this script works only if the data has these two attributes. If you’re feeling particularly adventurous, you can fork this repository and make the script work also with metadata!&lt;/p&gt;
&lt;p&gt;Have a look at the country names in &lt;code&gt;int_data[[country_var]][1:10]&lt;/code&gt;. They’re all written as 3-letter country codes. But to our luck, the &lt;code&gt;labels&lt;/code&gt; attribute has the correct names with the 3-letter equivalent. We can save these attributes and recode the 3-letter country name to long names.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Saving country names to change 3 letter country name to long country names
country_labels &amp;lt;- attr(int_data[[country_var]], &amp;quot;labels&amp;quot;)

# Reversing the 3-letter code to names so I can search for countries
# in a lookup table
country_names &amp;lt;- reverse_name(country_labels)

# Lookup 3-letter code and change them for long country names
int_data[, country_var] &amp;lt;- country_names[int_data[[country_var]]]
attr(int_data[[country_var]], &amp;quot;labels&amp;quot;) &amp;lt;- country_labels&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next thing I’d like to do is check which variables will be valid, i.e. those which have a &lt;code&gt;labels&lt;/code&gt; attribute, have 2 or more &lt;code&gt;labels&lt;/code&gt; aside from the &lt;code&gt;missing&lt;/code&gt; category of labels and are not either characters or factors (remember that all variables should be numeric with an attribute that contains the labels; character columns are actually invalid here). This will give me the list of variables that I’ll be able to use.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;subset_vars &amp;lt;- 
  int_data %&amp;gt;%
  map_lgl(function(x)
    !is.null(attr(x, &amp;quot;labels&amp;quot;)) &amp;amp;&amp;amp;
    length(setdiff(names(attr(x, &amp;quot;labels&amp;quot;)), missing_labels)) &amp;gt;= 2 &amp;amp;&amp;amp;
    !typeof(x) %in% c(&amp;quot;character&amp;quot;, &amp;quot;factor&amp;quot;)) %&amp;gt;%
  which()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Great, we have our vector of valid columns.&lt;/p&gt;
&lt;p&gt;The next steps are fairly straight forward. I randomply sample one of those indexes (which have the variale name as a &lt;code&gt;names&lt;/code&gt; attribute, check &lt;code&gt;subset_vars&lt;/code&gt;), together with the &lt;code&gt;cnt&lt;/code&gt; and &lt;code&gt;region&lt;/code&gt; variables.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;valid_df_fun &amp;lt;- function(data, vars_select) {
  data %&amp;gt;%
  select_(&amp;quot;cnt&amp;quot;, &amp;quot;region&amp;quot;, sample(names(vars_select), 1)) %&amp;gt;%
  as.data.frame()
}

valid_df &amp;lt;- valid_df_fun(int_data, subset_vars)
random_countries &amp;lt;- unique(valid_df$cnt) # To sample unique countries later on&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We also need to check how many labels we have, aside from the &lt;code&gt;missing&lt;/code&gt; labels. In any case, if those unique labels have more than 5, we need to resample a new variable. It’s difficult to understand a plot with that many labels. We need to make our plots as simple and straightforward as possible.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;var_labels &amp;lt;- attr(valid_df[[names(valid_df)[3]]], &amp;#39;labels&amp;#39;) # Get labels

# Get unique labels
valid_labels &amp;lt;- function(variable_label, miss) {
  variable_label %&amp;gt;%
    names() %&amp;gt;%
    setdiff(miss)
}

len_labels &amp;lt;- length(valid_labels(var_labels, missing_labels)) # length of unique labels

# While the length of the of the labels is &amp;gt; 4, sample a new variable.
while (len_labels &amp;gt; 4) {
  valid_df &amp;lt;- valid_df_fun(int_data, subset_vars)
  var_labels &amp;lt;- attr(valid_df[[names(valid_df)[3]]], &amp;#39;labels&amp;#39;) # Get labels
  len_labels &amp;lt;- length(valid_labels(var_labels, missing_labels))
}

# Make 100% sure we get the results:
stopifnot(len_labels &amp;lt;= 4)

(labels &amp;lt;- reverse_name(var_labels)) 
# Reverse vector names to objects and viceversa for 
# later recoding.

var_name &amp;lt;- names(valid_df)[3]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Before estimating the &lt;code&gt;PISA&lt;/code&gt; proportions, I want to create a record of all variables that have been used. Whenever a graph has something wrong we wanna know which variable it was, so we can reproduce the problem and fix it later in the future.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;new_var &amp;lt;- paste(var_name, Sys.Date(), sep = &amp;quot; - &amp;quot;)
write_lines(new_var, path = &amp;quot;./all_variables.txt&amp;quot;, append = T) 
# I create an empty .txt file to write the vars&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now comes the estimation section. Using the &lt;code&gt;pisa.table&lt;/code&gt; function from the package &lt;code&gt;intsvy&lt;/code&gt; we can correctly estimate the population proportions of any variable for any valid country. This table will be the core data behind our plot.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;try_df &amp;lt;-
  valid_df %&amp;gt;%
  filter(!is.na(region)) %&amp;gt;%
  pisa.table(var_name, data = ., by = &amp;quot;cnt&amp;quot;) %&amp;gt;%
  filter(complete.cases(.))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s check out the contents of &lt;code&gt;try_df&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;##                   cnt pa039q01ta Freq Percentage Std.err.
## 1             Belgium          1 3972      85.16        0
## 2             Belgium          2  692      14.84        0
## 3               Chile          1 6062      96.88        0
## 4               Chile          2  195       3.12        0
## 5             Croatia          1 4353      81.17        0
## 6             Croatia          2 1010      18.83        0
## 7  Dominican Republic          1 4335      98.37        0
## 8  Dominican Republic          2   72       1.63        0
## 9              France          1 4463      84.46        0
## 10             France          2  821      15.54        0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Great! To finish with the data, we simply need one more thing: to recode the value labels with the &lt;code&gt;labels&lt;/code&gt; vector.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;try_df[var_name] &amp;lt;- labels[try_df[, var_name]]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Awesome. We have the data ready, more or less. Let’s produce a dirty plot to check how long the title is.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;title_question &amp;lt;- attr(valid_df[, var_name], &amp;#39;label&amp;#39;)

ggplot(try_df, aes_string(names(try_df)[2], &amp;quot;Percentage&amp;quot;)) +
  geom_col() +
  xlab(title_question)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/blog/2017-03-08-my-pisa-twitter-bot/2017-03-08-my-pisa-twitter-bot_files/figure-html/unnamed-chunk-14-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: Because the question is randomly sampled, you might be getting a short title. Rerun the script and eventually you’ll get a long one.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;So, the question &lt;em&gt;might&lt;/em&gt; have two problems. The wording is a bit confusing (something we can’t really do anything about because that’s how it’s written in the questionnaire) and it’s too long. For the second problem I created a function that cuts the title in an arbitrary cutoff point (based on experimental tests on how many letters fit into a ggplot coordinate plane) but it makes sure that the cutoff is not in the middle of a word, i.e. it searches for the closest end of a word.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## Section: Get the title
cut &amp;lt;- 60 # Arbitrary cutoff

# This function accepts a sentence (or better, a title) and cuts it between
# the start and cutoff arguments (just as substr).
# But if the cutoff is not an empty space it will search +-1 index by
# index from the cutoff point until it reaches
# the closest empty space. It will return from start to the new cutoff
sentence_cut &amp;lt;- function(sentence, start, cutoff) {
  
  if (nchar(sentence) &amp;lt;= cutoff) return(substr(sentence, start, cutoff))
  
  excerpt &amp;lt;- substr(sentence, start, cutoff)
  actual_val &amp;lt;- cutoff
  neg_val &amp;lt;- pos_val &amp;lt;- actual_val
  
  if (!substr(excerpt, actual_val, actual_val) == &amp;quot; &amp;quot;) {
    
    expr &amp;lt;- c(substr(sentence, neg_val, neg_val) == &amp;quot; &amp;quot;, substr(sentence, pos_val, pos_val) == &amp;quot; &amp;quot;)
    
    while (!any(expr)) {
      neg_val &amp;lt;- neg_val - 1
      pos_val &amp;lt;- pos_val + 1
      
      expr &amp;lt;- c(substr(sentence, neg_val, neg_val) == &amp;quot; &amp;quot;, substr(sentence, pos_val, pos_val) == &amp;quot; &amp;quot;)
    }
    
    cutoff &amp;lt;- ifelse(which(expr) == 1, neg_val, pos_val)
    excerpt &amp;lt;- substr(sentence, start, cutoff)
    return(excerpt)
    
  } else {
    
    return(excerpt)
    
  }
}

# How many lines in ggplot2 should this new title have? Based on the cut off
sentence_vecs &amp;lt;- ceiling(nchar(title_question) / cut)

# Create an empty list with the length of `lines` of the title.
# In this list I&amp;#39;ll paste the divided question and later paste them together
list_excerpts &amp;lt;- replicate(sentence_vecs, vector(&amp;quot;character&amp;quot;, 0))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Just to make sure our function works, let’s do some quick tests. Let’s create the sentence &lt;code&gt;This is my new sentence&lt;/code&gt; and subset from index &lt;code&gt;1&lt;/code&gt; to index &lt;code&gt;17&lt;/code&gt;. Index &lt;code&gt;17&lt;/code&gt; is the letter &lt;code&gt;e&lt;/code&gt; from the word &lt;code&gt;sentence&lt;/code&gt;, so we should cut the sentence to the closest space, in our case, &lt;code&gt;This is my new&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sentence_cut(&amp;quot;This is my new sentence&amp;quot;, 1, 17)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;This is my new &amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A more complicated test using &lt;code&gt;I want my sentence to be cut where no word is still running&lt;/code&gt;. Let’s pick from index &lt;code&gt;19&lt;/code&gt;, which is the space between &lt;code&gt;sentence&lt;/code&gt; and &lt;code&gt;to&lt;/code&gt;, the index &lt;code&gt;27&lt;/code&gt;, which is the &lt;code&gt;u&lt;/code&gt; of &lt;code&gt;cut&lt;/code&gt;. Because the length to a space &lt;code&gt;-1 and +1&lt;/code&gt; is the same both ways, the function always picks the shortest length as a defensive mechanism to long titles.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sentence_cut(&amp;quot;I want my sentence to be cut where no word is still running&amp;quot;, 19, 27)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot; to be &amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we have the function ready, we have to automate the process so that the first line is cut, then the second line should start where the first line left off and so on.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;for (list_index in seq_along(list_excerpts)) {
  
  non_empty_list &amp;lt;- Filter(f = function(x) !(is_empty(x)), list_excerpts)
  
  # If this is the first line, the start should 1, otherwise the sum of all characters
  # of previous lines
  start &amp;lt;- ifelse(list_index == 1, 1, sum(map_dbl(non_empty_list, nchar)))
  
  # Because start gets updated every iteration, simply cut from start to start + cut
  # The appropriate exceptions are added when its the first line of the plot.
  list_excerpts[[list_index]] &amp;lt;-
    sentence_cut(title_question, start, ifelse(list_index == 1, cut, start + cut))
}

final_title &amp;lt;- paste(list_excerpts, collapse = &amp;quot;\n&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above loop gives you a list with the title separate into N lines based on the cutoff point. For the ggplot title, we finish by collapsing the separate titles with the &lt;code&gt;\n&lt;/code&gt; as the separator.&lt;/p&gt;
&lt;p&gt;So, I wrapped all of this into this function:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;label_cutter &amp;lt;- function(variable_labels, cut) {
  
  variable_label &amp;lt;- unname(variable_labels)
  
  # This function accepts a sentence (or better, a title) and cuts it between
  # the start and cutoff arguments ( just as substr). But if the cutoff is not an empty space
  # it will search +-1 index by index from the cutoff point until it reaches
  # the closest empty space. It will return from start to the new cutoff
  sentence_cut &amp;lt;- function(sentence, start, cutoff) {
    
    if (nchar(sentence) &amp;lt;= cutoff) return(substr(sentence, start, cutoff))
    
    excerpt &amp;lt;- substr(sentence, start, cutoff)
    actual_val &amp;lt;- cutoff
    neg_val &amp;lt;- pos_val &amp;lt;- actual_val
    
    if (!substr(excerpt, actual_val, actual_val) == &amp;quot; &amp;quot;) {
      
      expr &amp;lt;- c(substr(sentence, neg_val, neg_val) == &amp;quot; &amp;quot;, substr(sentence, pos_val, pos_val) == &amp;quot; &amp;quot;)
      
      while (!any(expr)) {
        neg_val &amp;lt;- neg_val - 1
        pos_val &amp;lt;- pos_val + 1
        
        expr &amp;lt;- c(substr(sentence, neg_val, neg_val) == &amp;quot; &amp;quot;, substr(sentence, pos_val, pos_val) == &amp;quot; &amp;quot;)
      }
      
      cutoff &amp;lt;- ifelse(which(expr) == 1, neg_val, pos_val)
      excerpt &amp;lt;- substr(sentence, start, cutoff)
      return(excerpt)
      
    } else {
      
      return(excerpt)
      
    }
  }
  
  # How many lines should this new title have? Based on the cut off
  sentence_vecs &amp;lt;- ceiling(nchar(variable_label) / cut)
  
  # Create an empty list with the amount of lines for the excerpts
  # to be stored.
  list_excerpts &amp;lt;- replicate(sentence_vecs, vector(&amp;quot;character&amp;quot;, 0))
  
  for (list_index in seq_along(list_excerpts)) {
    
    non_empty_list &amp;lt;- Filter(f = function(x) !(is_empty(x)), list_excerpts)
    
    # If this is the first line, the start should 1, otherwise the sum of all characters
    # of previous lines
    start &amp;lt;- ifelse(list_index == 1, 1, sum(map_dbl(non_empty_list, nchar)))
    
    # Because start gets updated every iteration, simply cut from start to start + cut
    # The appropriate exceptions are added when its the first line of the plot.
    list_excerpts[[list_index]] &amp;lt;-
      sentence_cut(variable_label, start, ifelse(list_index == 1, cut, start + cut))
  }
  
  final_title &amp;lt;- paste(list_excerpts, collapse = &amp;quot;\n&amp;quot;)
  final_title
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The function accepts a string and a cut off point. It will automatically create new lines if needed and return the separated title based on the cutoff point. We apply this function over the title and the labels, to make sure everything is clean.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;final_title &amp;lt;- label_cutter(title_question, 60)
labels &amp;lt;- map_chr(labels, label_cutter, 35)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, as I’ve outlined above, each question should have less then four labels. I though that it might be a good idea if I created different graphs for different number of labels. For example, for the two label questions, I thought a simple dot plot might be a good idea —— the space between the dots will sum up to one making it quite intuitive. However, for three and four labels, I though of a cutomized dotplot.&lt;/p&gt;
&lt;p&gt;At the time I was writing this bot I was learning object oriented programming, so I said to myself, why not create a generic function that generates different plots for different labels? First, I need to assign the data frame the appropriate class.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;label_class &amp;lt;-
  c(&amp;quot;2&amp;quot; = &amp;quot;labeltwo&amp;quot;, &amp;#39;3&amp;#39; = &amp;quot;labelthree&amp;quot;, &amp;#39;4&amp;#39; = &amp;quot;labelfour&amp;quot;)[as.character(len_labels)]

class(try_df) &amp;lt;- c(class(try_df), label_class)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The generic function, together with its cousin functions, are located in the &lt;code&gt;ggplot_funs.R&lt;/code&gt; script in the PISA bot repository linked in the beginning.&lt;/p&gt;
&lt;p&gt;The idea is simple. Create a generic function that dispatches based on the class of the object.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pisa_graph &amp;lt;- function(data, y_title, fill_var) UseMethod(&amp;quot;pisa_graph&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pisa_graph.labeltwo &amp;lt;- function(data, y_title, fill_var) {
  
  dots &amp;lt;- setNames(list(interp(~ fct_reorder2(x, y, z),
                               x = quote(cnt),
                               y = as.name(fill_var),
                               z = quote(Percentage))), &amp;quot;cnt&amp;quot;)
  # To make sure we can randomly sample a number lower than the length
  unique_cnt &amp;lt;- length(unique(data$cnt))
  
  data %&amp;gt;%
    filter(cnt %in% sample(unique(cnt), ifelse(unique_cnt &amp;gt;= 15, 15, 10))) %&amp;gt;%
    mutate_(.dots = dots) %&amp;gt;%
    ggplot(aes(cnt, Percentage)) +
    geom_point(aes_string(colour = fill_var)) +
    labs(y = y_title, x = NULL) +
    scale_colour_discrete(name = NULL) +
    guides(colour = guide_legend(nrow = 1)) +
    scale_y_continuous(limits = c(0, 100),
                       breaks = seq(0, 100, 20),
                       labels = paste0(seq(0, 100, 20), &amp;quot;%&amp;quot;)) +
    coord_flip() +
    theme_minimal() +
    theme(legend.position = &amp;quot;top&amp;quot;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is the graph for the &lt;code&gt;labeltwo&lt;/code&gt; class. Using a work around for non-standard evaluation, I reorder the &lt;code&gt;x&lt;/code&gt; axis. This took me some time to understand but it’s very easy once you’ve written two or three expressions. Create a list with the formula (this might be for &lt;code&gt;mutate&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt; or whatever &lt;code&gt;tidyverse&lt;/code&gt; function) and &lt;strong&gt;rename&lt;/strong&gt; the placeholders in the formula with the appropriate names. Make sure to name that list object with the new variable name you want for this variable. So, for my example, we’re creating a new variable called &lt;code&gt;cnt&lt;/code&gt; that will be the same variable reordered by the &lt;code&gt;fill_var&lt;/code&gt; and the &lt;code&gt;Percentage&lt;/code&gt; variable.&lt;/p&gt;
&lt;p&gt;After this, I just built a usual &lt;code&gt;ggplot2&lt;/code&gt; object (although notice that I used &lt;code&gt;mutate_&lt;/code&gt; instead of &lt;code&gt;mutate&lt;/code&gt; for the non-standard evaluation).&lt;/p&gt;
&lt;p&gt;If you’re interested in learning more about standard and non-standard evaluation, I found these resources very useful (&lt;a href=&#34;http://www.carlboettiger.info/2015/02/06/fun-standardizing-non-standard-evaluation.html&#34;&gt;here&lt;/a&gt;, &lt;a href=&#34;http://adv-r.had.co.nz/Computing-on-the-language.html&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://cran.r-project.org/web/packages/lazyeval/vignettes/lazyeval.html&#34;&gt;here&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;The generic for &lt;code&gt;labelthree&lt;/code&gt; and &lt;code&gt;labelfour&lt;/code&gt; are pretty much the same as the previous plot but using a slightly different &lt;code&gt;geom&lt;/code&gt;. Have a look at the original file &lt;a href=&#34;https://raw.githubusercontent.com/cimentadaj/PISAfacts_twitterBot/master/ggplot_funs.R&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We’ll, we’re almost there. After this, we simply, &lt;code&gt;source&lt;/code&gt; the &lt;code&gt;ggplot_funs.R&lt;/code&gt; script and produce the plot.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;source(&amp;quot;https://raw.githubusercontent.com/cimentadaj/PISAfacts_twitterBot/master/ggplot_funs.R&amp;quot;)
pisa_graph(data = try_df,
             y_title = final_title,
             fill_var = var_name)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/blog/2017-03-08-my-pisa-twitter-bot/2017-03-08-my-pisa-twitter-bot_files/figure-html/unnamed-chunk-24-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;file &amp;lt;- tempfile()
ggsave(file, device = &amp;quot;png&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;setting-the-twitter-bot&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Setting the twitter bot&lt;/h2&gt;
&lt;p&gt;The final part is automating the twitter bot. I followed &lt;a href=&#34;https://www.r-bloggers.com/programming-a-twitter-bot-and-the-rescue-from-procrastination/&#34;&gt;this&lt;/a&gt; and &lt;a href=&#34;http://www.r-datacollection.com/blog/How-to-conduct-a-tombola-with-R/&#34;&gt;this&lt;/a&gt;. I won’t go into the specifics because I probably wouldn’t do justice to the the second post, but you have to create your account on Twitter, this will give you some keys that make sure you’re the right person. &lt;em&gt;You need to write these key-value pairs as environment variables&lt;/em&gt; (follow the second post) and then delete them from your R script (they’re secret! You shouldn’t keep them on your script but on some folder on your computer). Finally, make sure you identify your twitter account and make your first tweet!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(twitteR) # devtools::install_github(&amp;quot;geoffjentry/twitteR&amp;quot;)
setwd(&amp;quot;./folder_with_my_credentials/&amp;quot;)

api_key             &amp;lt;- Sys.getenv(&amp;quot;twitter_api_key&amp;quot;)
api_secret          &amp;lt;- Sys.getenv(&amp;quot;twitter_api_secret&amp;quot;)
access_token        &amp;lt;- Sys.getenv(&amp;quot;twitter_access_token&amp;quot;)
access_token_secret &amp;lt;- Sys.getenv(&amp;quot;twitter_access_token_secret&amp;quot;)
setup_twitter_oauth(api_key, api_secret, access_token, access_token_secret)

tweet(&amp;quot;&amp;quot;, mediaPath = file)
unlink(file)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s it! The last line should create the&lt;code&gt;tweet&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;automating-the-bot&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Automating the bot&lt;/h2&gt;
&lt;p&gt;The only thing left to do is automate this to run every day. I’ll explain how I did it for OSx by following &lt;a href=&#34;http://www.techradar.com/how-to/computing/apple/terminal-101-creating-cron-jobs-1305651&#34;&gt;this&lt;/a&gt; tutorial. You can find a Windows explanation in step 3 &lt;a href=&#34;https://www.r-bloggers.com/programming-a-twitter-bot-and-the-rescue-from-procrastination/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First, we need to figure out the specific time we want to schedule the script. We define the time by filling out five stars:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;*****&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The first asterisk is for specifying the minute of the run (0-59)&lt;/li&gt;
&lt;li&gt;The second asterisk is for specifying the hour of the run (0-23)&lt;/li&gt;
&lt;li&gt;The third asterisk is for specifying the day of the month for the run (1-31)&lt;/li&gt;
&lt;li&gt;The fourth asterisk is for specifying the month of the run (1-12)&lt;/li&gt;
&lt;li&gt;The fifth asterisk is for specifying the day of the week (where Sunday is equal to 0, up to Saturday is equal to 6)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Taken from &lt;a href=&#34;http://www.techradar.com/how-to/computing/apple/terminal-101-creating-cron-jobs-1305651&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For example, let’s say we wanted to schedule the script for &lt;code&gt;3:00 pm&lt;/code&gt; every day, then the combination would be &lt;code&gt;0 15 * * *&lt;/code&gt;. If we wanted something every &lt;code&gt;15&lt;/code&gt; minutes, then &lt;code&gt;15 * * * *&lt;/code&gt; would do it. If we wanted to schedule the script for Mondays and Wednesdays at &lt;code&gt;15:00&lt;/code&gt; and &lt;code&gt;17:00&lt;/code&gt; respectively, then we would write &lt;code&gt;0 15,17 * * 1,3&lt;/code&gt;. In this last example the &lt;code&gt;* *&lt;/code&gt; are the placeholders for day of the month and month.&lt;/p&gt;
&lt;p&gt;In my example, I want the script to run every weekday at &lt;code&gt;9:30&lt;/code&gt; am, so my equivalent would be &lt;code&gt;30 9 * * 1-5&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To begin, we type &lt;code&gt;env EDITOR=nano crontab -e&lt;/code&gt; in the &lt;code&gt;terminal&lt;/code&gt; to initiate the &lt;code&gt;cron&lt;/code&gt; file that will run the script. Next, type our time schedule followed by the command that will run the script in R. The command is &lt;code&gt;RScript&lt;/code&gt;. However, because your terminal might not know where &lt;code&gt;RScript&lt;/code&gt; is we need to type the directory to where RScript is. Type &lt;code&gt;which RScript&lt;/code&gt; in the terminal and you shall get something like &lt;code&gt;/usr/local/bin/RScript&lt;/code&gt;. Then the expression would be something like &lt;code&gt;30 9 * * 1-5 /usr/local/bin/RScript path_to_your/script.R&lt;/code&gt;. See &lt;a href=&#34;https://support.rstudio.com/hc/en-us/articles/218012917-How-to-run-R-scripts-from-the-command-line&#34;&gt;here&lt;/a&gt; for the &lt;code&gt;RScript&lt;/code&gt; explanation.&lt;/p&gt;
&lt;p&gt;The whole sequence would be like this:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;env EDITOR=nano crontab -e
30 9 * * 1-5 /usr/local/bin/RScript path_to_your/script.R&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To save the file, press Control + O (to write out the file), then enter to accept the file name, then
press Control + X (to exit nano). If all went well, then you should see “crontab: installing new crontab” without anything after that.&lt;/p&gt;
&lt;p&gt;Aaaaaand that’s it! You now have a working script that will be run from Monday to Friday at 9:30 am. This script will read the PISA data, pick a random variable, make a graph and tweet it. You can follow this twitter account at &lt;span class=&#34;citation&#34;&gt;[@DailyPISA_Facts]&lt;/span&gt;(&lt;a href=&#34;https://twitter.com/DailyPISA_Facts&#34; class=&#34;uri&#34;&gt;https://twitter.com/DailyPISA_Facts&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Hope this was useful!&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Cognitive inequality around the world – Shiny app</title>
      <link>/blog/2016-12-12-cognitive-inequality-around-the-world-shiny-app/cognitive-inequality-around-the-world-shiny-app/</link>
      <pubDate>Mon, 12 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>/blog/2016-12-12-cognitive-inequality-around-the-world-shiny-app/cognitive-inequality-around-the-world-shiny-app/</guid>
      <description>


&lt;p&gt;For the last month I’ve been working on this massive dataset that combines all PISA, TIMSS and PIRLS surveys into one major database. It has over 3 million students and over 2,000 variables, including student background and school and teacher information. I started playing around with it and ending up doing this: &lt;a href=&#34;https://cimentadaj.shinyapps.io/shiny/&#34; class=&#34;uri&#34;&gt;https://cimentadaj.shinyapps.io/shiny/&lt;/a&gt;. Feel free to check it out and drop any comments below.&lt;/p&gt;
&lt;p&gt;If you want to contribute, &lt;a href=&#34;https://github.com/cimentadaj/Inequality_Shinyapp&#34;&gt;this&lt;/a&gt; is the Github repository. I plan to keep adding some stuff to the app, including new surveys and automatic plot downloading, so don’t forget to check it out.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
