```{r, warning = FALSE, message = FALSE}
library(tidyverse)
ex_file <- read_lines("http://rdatasciencecases.org/Data/offline.final.trace.txt")
ex_file[1:4]
```
Some lines are comments and the 4th line is the actual data. Basically, everything that is `something=` is the name of the column and columns are separated by a `;`. Now, within each column there can also be several values like in the column `pos` where numbers are separated by a comma.
First, let's separate everything now that we know all of the delimiters.
```{r}
tokens <- str_split(ex_file[4], pattern = "[;=,]")[[1]]
```
From the data documentation we need that the first 4 columns are always going to be there. The remaining columns can vary by each row, which is why they decide to put in stacked/long format. So each unique `id` will be repeate the number of times that there's MAC columns (the columns that very)
```{r}
tmp <- matrix(tokens[-(1:10)], ncol = 4, byrow = TRUE)
# We got the MAC in a long format, now we have to get unique id
# of each of the macs (along with time and other vars) to be repeated
# the number of rows that tmp has
# There we go
tmp_two <- matrix(tokens[c(2, 4, 6:8, 10)], nrow = nrow(tmp), ncol = 6, byrow = TRUE)
mat <- cbind(tmp_two, tmp)
mat
```
There we go. We have a stacked matrix with all the variables we need. Let's wrap the line maker into a function:
```{r}
processLine <- function(x) {
tokens <- str_split(x, pattern = "[;=,]")[[1]]
# We got the MAC in a long format, now we have to get unique id
# of each of the macs (along with time and other vars) to be repeated
# the number of rows that tmp has
tmp <- matrix(tokens[-(1:10)], ncol = 4, byrow = TRUE)
# There we go
tmp_two <- matrix(tokens[c(2, 4, 6:8, 10)], nrow = nrow(tmp), ncol = 6, byrow = TRUE)
mat <- cbind(tmp_two, tmp)
mat
}
```
Let's apply it to a few sample rows:
```{r}
tmp <- map(ex_file[4:20], processLine)
offline <- as.data.frame(do.call("rbind", tmp))
head(offline)
```
Good! Now we can apply it to all lines, excluding of course the ones which are commented out!
```{r}
tmp <- map(ex_file[!str_sub(ex_file, 1, 1) == "#"], processLine)
```
Aha.. so there's a few warnings? What's happening? If we ran the previous with `options(error, warn = 2)` we would see that it looks like there are some anomalous cases where there's no MAC information. We either fill out those values with NA's or we simply exclude them. Because working with the MAC's is of utmost importance for the analysis, we drop it to save memory. We redefine our function so that if there's only the 10 starting values it returns a NULL.
```{r}
processLine <- function(x) {
tokens <- str_split(x, pattern = "[;=,]")[[1]]
# We exclude rows where there's no MAC information
if (length(tokens) == 10) return(NULL)
# We got the MAC in a long format, now we have to get unique id
# of each of the macs (along with time and other vars) to be repeated
# the number of rows that tmp has
tmp <- matrix(tokens[-(1:10)], ncol = 4, byrow = TRUE)
# There we go
tmp_two <- matrix(tokens[c(2, 4, 6:8, 10)], nrow = nrow(tmp), ncol = 6, byrow = TRUE)
mat <- cbind(tmp_two, tmp)
mat
}
```
And apply it now..
```{r}
tmp <- map(ex_file[!str_sub(ex_file, 1, 1) == "#"], processLine)
offline <- as_tibble(do.call("rbind", tmp))
```
Good, let's set warnings back: `options(error = recover, warn = 1)`
To finish off let's set some names.
```{r}
names(offline) <- c("time", "scanMac", "posX", "posY", "posZ",
"orientation", "mac", "signal", "channel", "type")
offline
```
tokens
tmp <- matrix(tokens[-(1:10)], ncol = 4, byrow = TRUE)
tmp
tokens[-(1:10)]
tokens[-(1:10)]
tokens[-(1:10)]
fut_col <- tokens[-(1:10)]
fut_col
seq
?seq
seq(1, length(fut_col), by = 4)
col_names <- seq(1, length(fut_col), by = 4)
fut_col[-col_names]
seq(1, length(fut_col), by = 4)
fut_col[-col_names]
matrix(fut_col[-col_names], nrow = 3, ncol = length(col_names))
mac_matrix <- matrix(fut_col[-col_names], nrow = 3, ncol = length(col_names))
fut_col
fut_col[col_names]
names(mac_matrix) <- fut_col[col_names]
mac_matrix
matrix
?matrix
offline
mac_matrix <- matrix(fut_col[-col_names], nrow = 3, ncol = length(col_names),
dimnames = list(c("signal", "channel", "type"),
fut_col[col_names])
mac_matrix <- matrix(fut_col[-col_names], nrow = 3, ncol = length(col_names),
dimnames = list(c("signal", "channel", "type"),
fut_col[col_names]))
mac_matrix
mac_matrix <- matrix(fut_col[-col_names], nrow = 3, ncol = length(col_names),
dimnames = list(NULL,
fut_col[col_names]))
mac_matrix
tokens <- ex_file[4]
tokens
tokens <- ex_file[4]
fut_col <- tokens[-(1:10)]
col_names <- seq(1, length(fut_col), by = 4)
mac_matrix <- matrix(fut_col[-col_names], nrow = 3, ncol = length(col_names),
dimnames = list(NULL,
fut_col[col_names]))
tokens <- ex_file[4]
fut_col <- tokens[-(1:10)]
fut_col
tokens <- ex_file[4]
tokens
tokens <- str_split(ex_file[4], pattern = "[;=,]")[[1]]
tokens <- str_split(ex_file[6], pattern = "[;=,]")[[1]]
fut_col <- tokens[-(1:10)]
fut_col
tokens <- str_split(ex_file[100], pattern = "[;=,]")[[1]]
fut_col <- tokens[-(1:10)]
fut_col
col_names <- seq(1, length(fut_col), by = 4)
mac_matrix <- matrix(fut_col[-col_names], nrow = 3, ncol = length(col_names),
dimnames = list(NULL,
fut_col[col_names]))
mac_matrix
ncol(mac_matrix)
tokens <- str_split(ex_file[4], pattern = "[;=,]")[[1]]
fut_col <- tokens[-(1:10)]
col_names <- seq(1, length(fut_col), by = 4)
mac_matrix <- matrix(fut_col[-col_names], nrow = 3, ncol = length(col_names),
dimnames = list(NULL,
fut_col[col_names]))
ncol(mac_matrix)
mac_matrix
tokens <- str_split(ex_file[100], pattern = "[;=,]")[[1]]
fut_col <- tokens[-(1:10)]
col_names <- seq(1, length(fut_col), by = 4)
other_matrix <- matrix(fut_col[-col_names], nrow = 3, ncol = length(col_names),
dimnames = list(NULL,
fut_col[col_names]))
other_matrix
mac_matrix
as_tibble(mac_matrix)
bind_rows(other_matrix, mac_matrix)
other_matrix
mac_matrix
bind_rows(as_tibble(other_matrix), as_tibble(mac_matrix))
View(bind_rows(as_tibble(other_matrix), as_tibble(mac_matrix)))
bind_rows
bind_rows(as_tibble(other_matrix), as_tibble(mac_matrix))
bind_rows(as_tibble(other_matrix), as_tibble(mac_matrix)) %>% View("Comparing matrices")
as_tibble(mac_matrix)
as_tibble(other_matrix)
tokens <- str_split(ex_file[4], pattern = "[;=,]")[[1]]
fut_col <- tokens[-(1:10)]
col_names <- seq(1, length(fut_col), by = 4)
mac_matrix <- matrix(fut_col[-col_names], nrow = 3, ncol = length(col_names),
dimnames = list(NULL,
fut_col[col_names]))
as_tibble(mac_matrix)
fut_col
tokens
tokens[1:10]
mac_tibble <-
matrix(fut_col[-col_names], nrow = 3, ncol = length(col_names),
dimnames = list(NULL, fut_col[col_names])) %>%
as_tibble()
mac_tibble
tokens[1:10]
tokens[1:10]
seq(1, left_cols, by = 2)
left_cols <- tokens[1:10]
# Define the first four columns
left_cols <- tokens[1:10]
seq(1, left_cols, by = 2)
seq(1, length = left_cols, by = 2)
left_co1left_cols
seq(1, length(left_cols), by = 2)
left_cols <- tokens[1:10]
seq(1, length(left_cols), by = 2)
# Define the first four columns
left_cols <- tokens[1:10]
left_names <- seq(1, length(left_cols), by = 2)
left_names
tokens <- str_split(ex_file[4], pattern = "[;=,]")[[1]]
right_col <- tokens[-(1:10)]
right_names <- seq(1, length(right_col), by = 4)
mac_tibble <-
matrix(right_col[-right_names], nrow = 3, ncol = length(right_names),
dimnames = list(NULL, right_col[right_names])) %>%
as_tibble()
mac_tibble
left_col[-left_names]
# Define the first four columns
left_col <- tokens[1:10]
left_names <- seq(1, length(left_cols), by = 2)
left_col[-left_names]
matrix(left_col[-left_names], nrow = 3, byrow = TRUE)
matrix(left_col[-left_names], nrow = 3, ncol = length(left_names), byrow = TRUE)
matrix(left_col[-left_names], nrow = 3, ncol = length(left_names), byrow = TRUE,
dimnames = list(NULL, left_col[left_names]))
left_tibble <-
matrix(left_col[-left_names], nrow = 3, ncol = length(left_names), byrow = TRUE,
dimnames = list(NULL, left_col[left_names])) %>%
as_tibble()
left_tibble
matrix(right_col[-right_names], nrow = 3, ncol = length(right_names),
dimnames = list(NULL, right_col[right_names])) %>%
as_tibble() %>%
add_column(mac_indicators = c("signal", "chanel", "type"),
.before = 1)
matrix(right_col[-right_names], nrow = 3, ncol = length(right_names),
dimnames = list(NULL, right_col[right_names])) %>%
as_tibble() %>%
add_column(mac_indicators = c("signal", "chanel", "type"),
.before = 1)
mac_tibble <-
matrix(right_col[-right_names], nrow = 3, ncol = length(right_names),
dimnames = list(NULL, right_col[right_names])) %>%
as_tibble() %>%
add_column(mac_indicators = c("signal", "chanel", "type"),
.before = 1)
mac_tibble
# Define the first four columns
left_col <- tokens[1:10]
left_names <- seq(1, length(left_cols), by = 2)
left_tibble <-
matrix(left_col[-left_names], nrow = 3, ncol = length(left_names), byrow = TRUE,
dimnames = list(NULL, left_col[left_names])) %>%
as_tibble()
left_tibble
mat <- bind_cols(left_tibble, mac_tibble)
mat
mat
tokens <- str_split(ex_file[5], pattern = "[;=,]")[[1]]
right_col <- tokens[-(1:10)]
right_names <- seq(1, length(right_col), by = 4)
mac_tibble <-
matrix(right_col[-right_names], nrow = 3, ncol = length(right_names),
dimnames = list(NULL, right_col[right_names])) %>%
as_tibble() %>%
add_column(mac_indicators = c("signal", "chanel", "type"),
.before = 1)
# Define the first four columns
left_col <- tokens[1:10]
left_names <- seq(1, length(left_cols), by = 2)
left_tibble <-
matrix(left_col[-left_names], nrow = 3, ncol = length(left_names), byrow = TRUE,
dimnames = list(NULL, left_col[left_names])) %>%
as_tibble()
# Bind both dfs
mat <- bind_cols(left_tibble, mac_tibble)
mat
tokens <- str_split(ex_file[4], pattern = "[;=,]")[[1]]
right_col <- tokens[-(1:10)]
right_names <- seq(1, length(right_col), by = 4)
mac_tibble <-
matrix(right_col[-right_names], nrow = 3, ncol = length(right_names),
dimnames = list(NULL, right_col[right_names])) %>%
as_tibble() %>%
add_column(mac_indicators = c("signal", "chanel", "type"),
.before = 1)
# Define the first four columns
left_col <- tokens[1:10]
left_names <- seq(1, length(left_cols), by = 2)
left_tibble <-
matrix(left_col[-left_names], nrow = 3, ncol = length(left_names), byrow = TRUE,
dimnames = list(NULL, left_col[left_names])) %>%
as_tibble()
# Bind both dfs
mat_two <- bind_cols(left_tibble, mac_tibble)
bind_rows(mat, mat_two)
View(bind_rows(mat, mat_two))
dplyr:::bind_rows_
processLines <- function(x) {
tokens <- str_split(x, pattern = "[;=,]")[[1]]
if (length(tokens) == 10) return(NULL) # exclude non-MAC lines
right_col <- tokens[-(1:10)]
right_names <- seq(1, length(right_col), by = 4)
mac_tibble <-
matrix(right_col[-right_names], nrow = 3, ncol = length(right_names),
dimnames = list(NULL, right_col[right_names])) %>%
as_tibble() %>%
add_column(mac_indicators = c("signal", "chanel", "type"),
.before = 1)
# Define the first four columns
left_col <- tokens[1:10]
left_names <- seq(1, length(left_cols), by = 2)
left_tibble <-
matrix(left_col[-left_names], nrow = 3, ncol = length(left_names), byrow = TRUE,
dimnames = list(NULL, left_col[left_names])) %>%
as_tibble()
# Bind both dfs
mat <- bind_cols(left_tibble, mac_tibble)
mat
}
processLine <- function(x) {
tokens <- str_split(x, pattern = "[;=,]")[[1]]
if (length(tokens) == 10) return(NULL) # exclude non-MAC lines
right_col <- tokens[-(1:10)]
right_names <- seq(1, length(right_col), by = 4)
mac_tibble <-
matrix(right_col[-right_names], nrow = 3, ncol = length(right_names),
dimnames = list(NULL, right_col[right_names])) %>%
as_tibble() %>%
add_column(mac_indicators = c("signal", "chanel", "type"),
.before = 1)
# Define the first four columns
left_col <- tokens[1:10]
left_names <- seq(1, length(left_cols), by = 2)
left_tibble <-
matrix(left_col[-left_names], nrow = 3, ncol = length(left_names), byrow = TRUE,
dimnames = list(NULL, left_col[left_names])) %>%
as_tibble()
# Bind both dfs
mat <- bind_cols(left_tibble, mac_tibble)
mat
}
tmp <- map(ex_file[4:20], processLine)
tmp
bind_rows(tmp)
tmp <- map(ex_file, processLine)
tmp <- map(ex_file[4:20], processLine)
tmp <- map(ex_file, processLine)
tmp <- map(ex_file[4:20], processLine)
tmp <- map(ex_file, processLine)
tmp <- map(ex_file, processLine)
processLine <- function(x) {
tokens <- str_split(x, pattern = "[;=,]")[[1]]
print(length(tokens))
if (length(tokens) == 10) return(NULL) # exclude non-MAC lines
right_col <- tokens[-(1:10)]
right_names <- seq(1, length(right_col), by = 4)
mac_tibble <-
matrix(right_col[-right_names], nrow = 3, ncol = length(right_names),
dimnames = list(NULL, right_col[right_names])) %>%
as_tibble() %>%
add_column(mac_indicators = c("signal", "chanel", "type"),
.before = 1)
# Define the first four columns
left_col <- tokens[1:10]
left_names <- seq(1, length(left_cols), by = 2)
left_tibble <-
matrix(left_col[-left_names], nrow = 3, ncol = length(left_names), byrow = TRUE,
dimnames = list(NULL, left_col[left_names])) %>%
as_tibble()
# Bind both dfs
mat <- bind_cols(left_tibble, mac_tibble)
mat
}
tmp <- map(ex_file, processLine)
tmp <- map(ex_file[!str_sub(ex_file, 1, 1) == "#"], processLine)
processLine <- function(x) {
tokens <- str_split(x, pattern = "[;=,]")[[1]]
if (length(tokens) == 10) return(NULL) # exclude non-MAC lines
right_col <- tokens[-(1:10)]
right_names <- seq(1, length(right_col), by = 4)
mac_tibble <-
matrix(right_col[-right_names], nrow = 3, ncol = length(right_names),
dimnames = list(NULL, right_col[right_names])) %>%
as_tibble() %>%
add_column(mac_indicators = c("signal", "chanel", "type"),
.before = 1)
# Define the first four columns
left_col <- tokens[1:10]
left_names <- seq(1, length(left_cols), by = 2)
left_tibble <-
matrix(left_col[-left_names], nrow = 3, ncol = length(left_names), byrow = TRUE,
dimnames = list(NULL, left_col[left_names])) %>%
as_tibble()
# Bind both dfs
mat <- bind_cols(left_tibble, mac_tibble)
mat
}
tmp <- map(ex_file[!str_sub(ex_file, 1, 1) == "#"], processLine)
x <- ex_file[4]
x
tokens <- str_split(x, pattern = "[;=,]")[[1]]
token
tokens
if (length(tokens) == 10) return(NULL) # exclude non-MAC lines
right_col <- tokens[-(1:10)]
right_names <- seq(1, length(right_col), by = 4)
matrix(right_col[-right_names], nrow = 3, ncol = length(right_names),
dimnames = list(NULL, right_col[right_names]))
tokens <- str_split(x, pattern = "[;=,]")[[1]]
if (length(tokens) == 10) return(NULL) # exclude non-MAC lines
right_col <- tokens[-(1:10)]
right_names <- seq(1, length(right_col), by = 4)
mac_tibble <-
matrix(right_col[-right_names], nrow = 3, ncol = length(right_names),
dimnames = list(NULL, right_col[right_names]))
# Define the first four columns
left_col <- tokens[1:10]
left_names <- seq(1, length(left_cols), by = 2)
left_tibble <-
matrix(left_col[-left_names], nrow = 3, ncol = length(left_names), byrow = TRUE,
dimnames = list(NULL, left_col[left_names]))
left_tibble
mac_matrix
# Bind both dfs
mat <- cbind(left_tibble, mac_tibble)
mat
mat
matrix(mac_indicators = c("signal", "chanel", "type"))
matrix(mac_indicators = c("signal", "chanel", "type"), ncol = 1)
matrix(c("signal", "chanel", "type"), ncol = 1)
# Bind both dfs
mat <- cbind(left_tibble, mac_tibble)
mat
processLine <- function(x) {
tokens <- str_split(x, pattern = "[;=,]")[[1]]
if (length(tokens) == 10) return(NULL) # exclude non-MAC lines
right_col <- tokens[-(1:10)]
right_names <- seq(1, length(right_col), by = 4)
mac_tibble <-
matrix(right_col[-right_names], nrow = 3, ncol = length(right_names),
dimnames = list(NULL, right_col[right_names]))
# Define the first four columns
left_col <- tokens[1:10]
left_names <- seq(1, length(left_cols), by = 2)
left_tibble <-
matrix(left_col[-left_names], nrow = 3, ncol = length(left_names), byrow = TRUE,
dimnames = list(NULL, left_col[left_names]))
# Bind both dfs
mat <- cbind(left_tibble, mac_tibble)
mat
}
tmp <- map(ex_file[!str_sub(ex_file, 1, 1) == "#"], processLine)
tmp[[1]]
tmp[[2]]
tmp[1:2]
as_tibble(tmp[1:2])
bind_rows(tmp[1:2])
map(tmp, as_tibble)
map(tmp[1:2], as_tibble)
map(tmp[1:2], as.data.frame)
bind_rows(map(tmp[1:2], as.data.frame))
warnings()
View(bind_rows(map(tmp[1:2], as.data.frame)))
bind_rows(map(tmp[1:2], as.data.frame))
warnings()
bind_rows(map(tmp[1:2], as.data.frame))
?as.data.frame
bind_rows(map(tmp[1:2], as.data.frame, stringsAsFactors = FALSE))
bind_rows(map(tmp, as.data.frame, stringsAsFactors = FALSE))
final_data <- bind_rows(map(tmp, as.data.frame, stringsAsFactors = FALSE))
final_data <- as_tibble(bind_rows(map(tmp, as.data.frame, stringsAsFactors = FALSE)))
final_data
final_data <-
bind_rows(map(tmp, as_tibble))
# Interestingly, applying as_tibble instead of as.data.frame is
# very slow. So I opt for data frame and then convert the binded
# df to a tibble
final_data <-
bind_rows(map(tmp, as.data.frame, stringsAsFactors = FALSE)) %>%
as_tibble()
rep(c("signal", "chanel", "type"), = 3)
rep(c("signal", "chanel", "type"), 3)
final_data <-
bind_rows(map(tmp, as.data.frame, stringsAsFactors = FALSE)) %>%
as_tibble() %>%
add_column(mac_indicators = rep(c("signal", "chanel", "type"), unique(.id)),
.after = `degree`)
final_data <-
bind_rows(map(tmp, as.data.frame, stringsAsFactors = FALSE)) %>%
as_tibble() %>%
add_column(mac_indicators = rep(c("signal", "chanel", "type"), unique(.$id)),
.after = `degree`)
final_data <-
bind_rows(map(tmp, as.data.frame, stringsAsFactors = FALSE)) %>%
as_tibble()
final_data
unique(final_data$id)
unique(final_data$t)
length(unique(final_data$t))
final_data <-
bind_rows(map(tmp, as.data.frame, stringsAsFactors = FALSE)) %>%
as_tibble() %>%
add_column(mac_indicators = rep(c("signal", "chanel", "type"), length(unique(final_data$t))),
.after = `degree`)
?add_column
final_data <-
bind_rows(map(tmp, as.data.frame, stringsAsFactors = FALSE)) %>%
as_tibble() %>%
add_column(mac_indicators = rep(c("signal", "chanel", "type"), length(unique(.$t))),
.after = "degree")
final_data
system("open .")
blogdown::build_site()
blogdown::hugo_build()
blogdown::serve_site()
blogdown::hugo_build()
blogdown::serve_site()
servr::daemon_stop("4843186096")
blogdown::hugo_build()
blogdown::serve_site()
servr::daemon_stop("4485315216")
blogdown::serve_site()
servr::daemon_stop("4324664272")
blogdown::serve_site()
blogdown::serve_site()
servr::daemon_stop("4804016624")
blogdown::hugo_build()
