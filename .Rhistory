filter(bikes == 0) %>%
mutate(time_day = lubridate::hms(str_extract(time, "[0-9]{2}:[0-9]{2}:[0-9]{2}")))
bicing %>%
filter(bikes == 0) %>%
mutate(time_day = lubridate::hms(str_extract(time, "[0-9]{2}:[0-9]{2}:[0-9]{2}"))) %>%
# count(hour = lubridate::hour(time), day = lubridate::wday(time, label = TRUE, week_start = TRUE)) %>%
ggplot(aes(x = time_day)) +
geom_histogram()
bicing %>%
filter(bikes == 0) %>%
mutate(time_day = lubridate::hm(str_extract(time, "[0-9]{2}:[0-9]{2}:[0-9]{2}"))) %>%
# count(hour = lubridate::hour(time), day = lubridate::wday(time, label = TRUE, week_start = TRUE)) %>%
ggplot(aes(x = time_day)) +
geom_histogram()
bicing %>%
filter(bikes == 0) %>%
mutate(time_day = lubridate::hm(str_extract(time, "[0-9]{2}:[0-9]{2}:[0-9]{2}")))
bicing %>%
filter(bikes == 0) %>%
mutate(time_day = lubridate::hms(str_extract(time, "[0-9]{2}:[0-9]{2}:[0-9]{2}")),
hm =lubridate::hm(time_day))
str_extract(bicing$time[1])
str_extract(bicing$time[1], ""[0-9]{2}:[0-9]{2}:[0-9]{2}"")
str_extract(bicing$time[1], "[0-9]{2}:[0-9]{2}:[0-9]{2}")
lubridate::hms(str_extract(bicing$time[1], "[0-9]{2}:[0-9]{2}:[0-9]{2}"))
(str_extract(bicing$time[1], "[0-9]{2}:[0-9]{2}"))
lubridate::hm(str_extract(bicing$time[1], "[0-9]{2}:[0-9]{2}"))
bicing %>%
filter(bikes == 0) %>%
mutate(time_day = lubridate::hm(str_extract(time, "[0-9]{2}:[0-9]{2}"))) %>%
# count(hour = lubridate::hour(time), day = lubridate::wday(time, label = TRUE, week_start = TRUE)) %>%
ggplot(aes(x = time_day)) +
geom_histogram()
bicing %>%
filter(bikes == 0) %>%
mutate(time_day = lubridate::hm(str_extract(time, "[0-9]{2}:[0-9]{2}")))
bicing %>%
filter(bikes == 0) %>%
mutate(time_day = lubridate::hm(str_extract(time, "[0-9]{2}:[0-9]{2}"))) %>%
# count(hour = lubridate::hour(time), day = lubridate::wday(time, label = TRUE, week_start = TRUE)) %>%
count(time_day) %>%
filter(n > 1)
bicing %>%
filter(bikes == 0) %>%
mutate(time_day = lubridate::hm(str_extract(time, "[0-9]{2}:[0-9]{2}")))
bicing %>%
filter(bikes == 0) %>%
mutate(time_day = str_extract(time, "[0-9]{2}:[0-9]{2}")) %>%
# count(hour = lubridate::hour(time), day = lubridate::wday(time, label = TRUE, week_start = TRUE)) %>%
count(time_day)
bicing %>%
filter(bikes == 0) %>%
mutate(time_day = lubridate::hm(str_extract(time, "[0-9]{2}:[0-9]{2}"))) %>%
# count(hour = lubridate::hour(time), day = lubridate::wday(time, label = TRUE, week_start = TRUE)) %>%
ggplot(aes(x = time_day)) +
geom_col()
bicing %>%
filter(bikes == 0) %>%
mutate(time_day = lubridate::hm(str_extract(time, "[0-9]{2}:[0-9]{2}")))
bicing %>%
filter(bikes == 0) %>%
mutate(time_day = as.numeric(lubridate::hm(str_extract(time, "[0-9]{2}:[0-9]{2}")))) %>%
ggplot(aes(x = time_day)) +
geom_col()
bicing %>%
filter(bikes == 0) %>%
mutate(time_day = as.numeric(lubridate::hm(str_extract(time, "[0-9]{2}:[0-9]{2}"))))
bicing %>%
filter(bikes == 0) %>%
mutate(time_day = as.numeric(lubridate::hm(str_extract(time, "[0-9]{2}:[0-9]{2}")))) %>%
ggplot(aes(x = time_day)) +
geom_histogram()
empty_bicycle <-
mutate(bicing,
empty = ifelse(bikes == 0, 1, 0),
hour = as.character(lubridate::hour(time)),
# morning = ifelse(time <= 10, 1, 0),
day = lubridate::wday(time),
# weekend = ifelse(between(day, 6, 7), 1, 0),
day = as.character(day)) %>%
select(-(1:4))
training_rows <- createDataPartition(empty_bicycle$empty, 1, p = 0.8)[[1]]
training <- empty_bicycle[training_rows, ]
test <- empty_bicycle[-training_rows, ]
mod1 <- glm(empty ~ I(ifelse(time < '11:00:00', 'morning', 'evening')), data = training, family = "binomial")
training
empty_bicycle <-
mutate(bicing,
time = time
empty = ifelse(bikes == 0, 1, 0),
mod1 <- glm(empty ~ I(ifelse(time < '11:00:00', 'morning', 'evening')), data = training, family = "binomial")
training
empty = ifelse(bikes == 0, 1, 0),
empty_bicycle <-
mutate(bicing,
time = time,
empty = ifelse(bikes == 0, 1, 0),
hour = as.character(lubridate::hour(time)),
# morning = ifelse(time <= 10, 1, 0),
day = lubridate::wday(time),
# weekend = ifelse(between(day, 6, 7), 1, 0),
day = as.character(day)) %>%
select(-(1:4))
empty_bicycle
empty_bicycle <-
mutate(bicing,
time = time,
empty = ifelse(bikes == 0, 1, 0),
hour = as.character(lubridate::hour(time)),
# morning = ifelse(time <= 10, 1, 0),
day = lubridate::wday(time),
# weekend = ifelse(between(day, 6, 7), 1, 0),
day = as.character(day)) %>%
select(-(1:3))
empty_bicycle
empty_bicycle <-
mutate(bicing,
empty = ifelse(bikes == 0, 1, 0),
hour = as.numeric(lubridate::hour(time)),
# morning = ifelse(time <= 10, 1, 0),
day = lubridate::wday(time),
# weekend = ifelse(between(day, 6, 7), 1, 0),
day = as.character(day)) %>%
select(-(1:3))
empty_bicycle <-
mutate(bicing,
empty = ifelse(bikes == 0, 1, 0),
hour = as.numeric(lubridate::hour(time)),
# morning = ifelse(time <= 10, 1, 0),
day = lubridate::wday(time),
# weekend = ifelse(between(day, 6, 7), 1, 0),
day = as.character(day)) %>%
select(-(1:4))
empty_bicycle
empty_bicycle <-
mutate(bicing,
empty = ifelse(bikes == 0, 1, 0),
hour = as.numeric(lubridate::hour(time)),
# morning = ifelse(time <= 10, 1, 0),
day = lubridate::wday(time),
# weekend = ifelse(between(day, 6, 7), 1, 0),
day = as.character(day)) %>%
select(-(1:4))
training_rows <- createDataPartition(empty_bicycle$empty, 1, p = 0.8)[[1]]
training <- empty_bicycle[training_rows, ]
test <- empty_bicycle[-training_rows, ]
mod1 <- glm(empty ~ I(ifelse(hour < 11, 'morning', 'evening')), data = training, family = "binomial")
mod1
pred1 <- predict(mod1, newdata = test, type = 'response')
pred_empty <- rbinom(length(pred1), 1, prob = pred1)
confusionMatrix(test$empty, pred_empty, positive = "1")
bicing %>%
filter(bikes == 0) %>%
mutate(time_day = as.numeric(lubridate::hm(str_extract(time, "[0-9]{2}:[0-9]{2}")))) %>%
ggplot(aes(x = time_day)) +
geom_histogram()
library(DBI)
library(RMySQL)
library(caret)
library(viridis)
library(tidyverse)
con <- dbConnect(MySQL(),
dbname = "bicing", # in "" quotes
host = "82.196.1.229", # ip of my server
user = "cimentadaj", # in "" quotes
password = rstudioapi::askForPassword())
con <- dbConnect(MySQL(),
dbname = "bicing", # in "" quotes
host = rstudioapi::askForPassword(), # ip of my server
user = "cimentadaj", # in "" quotes
password = rstudioapi::askForPassword())
con <- dbConnect(MySQL(),
dbname = "bicing", # in "" quotes
host = rstudioapi::askForPassword(), # ip of my server
user = "cimentadaj", # in "" quotes
password = rstudioapi::askForPassword())
con <- dbConnect(MySQL(),
dbname = "bicing", # in "" quotes
password = rstudioapi::askForPassword(),
host = rstudioapi::askForPassword(), # ip of my server
user = "cimentadaj", # in "" quotes
)
con <- dbConnect(MySQL(),
dbname = "bicing", # in "" quotes
password = rstudioapi::askForPassword(),
host = rstudioapi::askForPassword(), # ip of my server
user = "cimentadaj", # in "" quotes
)
library(DBI)
library(RMySQL)
library(caret)
library(viridis)
library(tidyverse)
con <- dbConnect(MySQL(),
dbname = "bicing", # in "" quotes
user = "cimentadaj", # in "" quotes
password = rstudioapi::askForPassword(),
host = rstudioapi::askForPassword(), # ip of my server
)
con <- dbConnect(MySQL(),
dbname = "bicing", # in "" quotes
user = "cimentadaj", # in "" quotes
password = rstudioapi::askForPassword(),
host = rstudioapi::askForPassword() # ip of my server)
con <- dbConnect(MySQL(),
dbname = "bicing", # in "" quotes
user = "cimentadaj", # in "" quotes
password = rstudioapi::askForPassword(),
host = rstudioapi::askForPassword())
con <- dbConnect(MySQL(),
dbname = "bicing", # in "" quotes
user = "cimentadaj", # in "" quotes
password = rstudioapi::askForPassword(),
host = rstudioapi::askForPassword())
query <-
"SELECT slots, bikes, status, time
FROM bicing_station
WHERE hour(time) IN ('7', '8', '9', '10', '18', '19', '20')
AND error_msg IS NULL;"
bicing <-
dbGetQuery(con, query) %>%
as_tibble() %>%
mutate(time = lubridate::ymd_hms(time),
slots = as.numeric(slots),
bikes = as.numeric(slots))
bicing
bicing %>%
filter(status != "OPN")
summary_time <-
bicing %>%
group_by(hour = as.factor(lubridate::hour(time))) %>%
summarize(Average = mean(bikes, na.rm = TRUE),
Median = median(bikes, na.rm = TRUE)) %>%
gather(type, value, -hour)
bicing %>%
mutate(hour = as.factor(lubridate::hour(time))) %>%
ggplot(aes(hour, bikes)) +
geom_jitter(alpha = 1/8) +
geom_point(data = summary_time,
aes(y = value, colour = type), size = 3) +
theme_bw() +
labs(x = "Hour of the day (24H)",
y = "# of available bikes",
title = "Mornings have greater bicycle usage than evenings",
subtitle = "But number of bikes can vary betwen 0 and 20 in the morning") +
scale_colour_manual(name = "Types", values = c('Average' = 'red', 'Median' = 'blue'))
summary_time <-
bicing %>%
group_by(hour = as.factor(lubridate::hour(time)),
day = as.factor(lubridate::wday(time, label = TRUE, week_start = TRUE))) %>%
summarize(Average = mean(bikes, na.rm = TRUE),
Variation = mean(bikes > 10, na.rm = TRUE)) %>%
gather(type, value, -hour, -day)
p1 <-
summary_time %>%
filter(type == "Average") %>%
ggplot(aes(hour, day, fill = value)) +
geom_tile() +
scale_fill_viridis(name = "Avg # of bikes") +
labs(x = 'Hour of the day (24H)',
y = 'Day of the week',
title = 'Average number of bikes has a workin week/end of week divide',
subtitle = 'Thu and Wed seem to have high peaks at 8, Sun and Sat have peaks at 10')
p2 <-
summary_time %>%
filter(type == "Variation") %>%
ggplot(aes(hour, day, fill = value)) +
geom_tile() +
scale_fill_viridis(name = '% of times \n station has > 10 bikes') +
labs(x = 'Hour of the day (24H)',
y = 'Day of the week',
title = 'Variability reflects same pattern as average # of bikes',
subtitle = 'Thu and Wed seem to have > 10 bikes often at 8, Sun and Sat have peaks at 10')
library(patchwork)
install.packages(patchwork)
devtools::install_github("patchwork")
devtools::install_github("thomasp85/patchwork")
library(patchwork)
devtools::install_github("thomasp85/patchwork")
library(gridExtra)
grid.arrange(p1, p2, ncol = 2)
grid.arrange(p1, p2, ncol = 2)
grid.arrange(p1, p2, ncol = 2)
library(DBI)
library(RMySQL)
library(caret)
library(viridis)
library(tidyverse)
# First input the PASSWORD
# Then the host IP
con <- dbConnect(MySQL(),
dbname = "bicing", # in "" quotes
user = "cimentadaj", # in "" quotes
password = rstudioapi::askForPassword(),
host = rstudioapi::askForPassword()) # ip of my server)
query <-
"SELECT slots, bikes, status, time
FROM bicing_station
WHERE hour(time) IN ('7', '8', '9', '10', '18', '19', '20')
AND error_msg IS NULL;"
bicing <-
dbGetQuery(con, query) %>%
as_tibble() %>%
mutate(time = lubridate::ymd_hms(time),
slots = as.numeric(slots),
bikes = as.numeric(slots))
bicing
bicing %>%
filter(status != "OPN")
summary_time <-
bicing %>%
group_by(hour = as.factor(lubridate::hour(time))) %>%
summarize(Average = mean(bikes, na.rm = TRUE),
Median = median(bikes, na.rm = TRUE)) %>%
gather(type, value, -hour)
bicing %>%
mutate(hour = as.factor(lubridate::hour(time))) %>%
ggplot(aes(hour, bikes)) +
geom_jitter(alpha = 1/8) +
geom_point(data = summary_time,
aes(y = value, colour = type), size = 3) +
theme_bw() +
labs(x = "Hour of the day (24H)",
y = "# of available bikes",
title = "Mornings have greater bicycle usage than evenings",
subtitle = "But number of bikes can vary betwen 0 and 20 in the morning") +
scale_colour_manual(name = "Types", values = c('Average' = 'red', 'Median' = 'blue'))
summary_time <-
bicing %>%
group_by(hour = as.factor(lubridate::hour(time)),
day = as.factor(lubridate::wday(time, label = TRUE, week_start = TRUE))) %>%
summarize(Average = mean(bikes, na.rm = TRUE),
Variation = mean(bikes > 10, na.rm = TRUE)) %>%
gather(type, value, -hour, -day)
p1 <-
summary_time %>%
filter(type == "Average") %>%
ggplot(aes(hour, day, fill = value)) +
geom_tile() +
scale_fill_viridis(name = "Avg # of bikes") +
labs(x = 'Hour of the day (24H)',
y = 'Day of the week',
title = 'Average number of bikes has a workin week/end of week divide',
subtitle = 'Thu and Wed seem to have high peaks at 8, Sun and Sat have peaks at 10')
p2 <-
summary_time %>%
filter(type == "Variation") %>%
ggplot(aes(hour, day, fill = value)) +
geom_tile() +
scale_fill_viridis(name = '% of times \n station has > 10 bikes') +
labs(x = 'Hour of the day (24H)',
y = 'Day of the week',
title = 'Variability reflects same pattern as average # of bikes',
subtitle = 'Thu and Wed seem to have > 10 bikes often at 8, Sun and Sat have peaks at 10')
library(gridExtra)
grid.arrange(p1, p2, ncol = 2)
grid.arrange(p1, p2, ncol = 2)
library(DBI)
library(RMySQL)
library(caret)
library(viridis)
library(tidyverse)
# First input the PASSWORD
# Then the host IP
con <- dbConnect(MySQL(),
dbname = "bicing", # in "" quotes
user = "cimentadaj", # in "" quotes
password = rstudioapi::askForPassword(),
host = rstudioapi::askForPassword()) # ip of my server)
p2
bicing %>%
mutate(hour = lubridate::hour(time),
day = lubridate::wday(time, label = TRUE, week_start = TRUE),
morning_evening = ifelse(hour <= 10, "Morning", "Evening")) %>%
ggplot(aes(day, bikes, fill = morning_evening)) +
geom_col(position = "fill") +
labs(x = "Day of the week",
y = "% of bikes",
title = '# of bikes increases linearly through out the week',
fill = 'Time of day')
intm_df <-
bicing %>%
mutate(hour = as.factor(lubridate::hour(time)),
day = lubridate::wday(time, label = TRUE, week_start = TRUE)) %>%
group_by(hour, day) %>%
mutate(future_bike = lag(bikes)) %>%
summarize(avg_movement = mean(bikes != future_bike, na.rm = TRUE) * 60) %>%
ungroup()
intm_df %>%
ggplot(aes(hour, avg_movement, colour = day, group = day)) +
geom_line(size = 1.2) +
facet_wrap(~ day, ncol = 4) +
theme_bw() +
labs(x = 'Hour of the day (24H)',
y = "Minutes per hour with a bicycle change",
title = 'Weekdays have much greater bicycle usage than weekends',
subtitle = "Wed has the busiest hour of the week at 8AM; There's activity 25 minutes out of the 60 minutes.") +
theme(legend.position = 'none')
bicing %>%
filter(bikes == 0) %>%
mutate(time_day = as.numeric(lubridate::hm(str_extract(time, "[0-9]{2}:[0-9]{2}")))) %>%
ggplot(aes(x = time_day)) +
geom_histogram()
empty_bicycle <-
mutate(bicing,
empty = ifelse(bikes == 0, 1, 0),
hour = as.character(lubridate::hour(time)),
day = lubridate::wday(time),
day = as.character(day)) %>%
select(-(1:4))
training_rows <- createDataPartition(empty_bicycle$empty, 1, p = 0.8)[[1]]
training <- empty_bicycle[training_rows, ]
test <- empty_bicycle[-training_rows, ]
mod1 <- glm(empty ~ . + day:hour, data = training, family = "binomial")
mod1 <- glm(empty ~ . + day:hour, data = training, family = "binomial")
pred1 <- predict(mod1, newdata = test, type = 'response')
pred_empty <- rbinom(length(pred1), 1, prob = pred1)
confusionMatrix(test$empty, pred_empty, positive = "1")
blogdown::serve_site()
library(DBI)
library(RMySQL)
library(caret)
library(caret)
library(viridis)
library(tidyverse)
con <- dbConnect(MySQL(),
dbname = "bicing", # in "" quotes
user = "cimentadaj", # in "" quotes
password = rstudioapi::askForPassword(),
host = rstudioapi::askForPassword()) # ip of my server)
?rstudioapi::askForPassword
options()$askpass
options()$askpass()
knit_with_parameters('~/all_repos/cimentadaj.github.io/content/blog/2018-02-12-what-time-should-i-ride-my-bike/2018-02-12-what-time-should-i-ride-my-bike.Rmd')
knit_with_parameters('~/all_repos/cimentadaj.github.io/content/blog/2018-02-12-what-time-should-i-ride-my-bike/2018-02-12-what-time-should-i-ride-my-bike.Rmd')
knit_with_parameters('~/all_repos/cimentadaj.github.io/content/blog/2018-02-12-what-time-should-i-ride-my-bike/2018-02-12-what-time-should-i-ride-my-bike.Rmd')
knit_with_parameters('~/all_repos/cimentadaj.github.io/content/blog/2018-02-12-what-time-should-i-ride-my-bike/2018-02-12-what-time-should-i-ride-my-bike.Rmd')
blogdown::hugo_build()
blogdown::serve_site()
blogdown::serve_site
knit_with_parameters('~/all_repos/cimentadaj.github.io/content/blog/2018-02-12-what-time-should-i-ride-my-bike/2018-02-12-what-time-should-i-ride-my-bike.Rmd')
knit_with_parameters('~/all_repos/cimentadaj.github.io/content/blog/2018-02-12-what-time-should-i-ride-my-bike/2018-02-12-what-time-should-i-ride-my-bike.Rmd')
knit_with_parameters('~/all_repos/cimentadaj.github.io/content/blog/2018-02-12-what-time-should-i-ride-my-bike/2018-02-12-what-time-should-i-ride-my-bike.Rmd')
knit_with_parameters('~/all_repos/cimentadaj.github.io/content/blog/2018-02-12-what-time-should-i-ride-my-bike/2018-02-12-what-time-should-i-ride-my-bike.Rmd')
knit_with_parameters('~/all_repos/cimentadaj.github.io/content/blog/2018-02-12-what-time-should-i-ride-my-bike/2018-02-12-what-time-should-i-ride-my-bike.Rmd')
blogdown::hugo_cmd()
blogdown::serve_site()
rmarkdown::render("./content/blog/2018-02-12-what-time-should-i-ride-my-bike/2018-02-12-what-time-should-i-ride-my-bike.Rmd", params = "ask")
blogdown::serve_site()
blogdown::serve_site
?
blogdown::serve_site
blogdown::serve_site(params = "ask")
Sys.setenv(password = "Lolasouno2")
Sys.setenv(host = "82.196.1.229")
blogdown::serve_site()
blogdown::hugo_build()
blogdown::serve_site()
Sys.setenv(password = "Lolasouno2")
Sys.setenv(password = "Lolasouno2")
blogdown::serve_site()
Sys.setenv(password = "Lolasouno2")
Sys.setenv(host = "82.196.1.229")
blogdown::serve_site()
Sys.setenv(host = "82.196.1.229")
Sys.setenv(password = "Lolasouno2")
blogdown::hugo_build()
blogdown::serve_site()
blogdown::serve_site()
blogdown::hugo_build()
blogdown::serve_site()
blogdown::hugo_build()
blogdown::hugo_build()
blogdown::serve_site()
blogdown::serve_site()
blogdown::hugo_build()
blogdown::hugo_build()
blogdown::hugo_build()
blogdown::hugo_build()
cimentadaj::my_new_post("The Monty Hall problem")
blogdown::find_tags()
blogdown::find_categories()
blogdown::find_yaml()
blogdown::count_yaml()
blogdown::serve_site()
blogdown::hugo_build()
cimentadaj::my_new_post("A list of must pre-project questions")
blogdown::count_yaml()
blogdown::hugo_build()
blogdown::build_site()
blogdown::hugo_build()
blogdown::serve_site()
cimentadaj::gen_rscript()
cimentadaj::my_new_post("Exploring Google Scholar coauthorship")
blogdown::count_yaml()
library(coauthornetwork)
network <- grab_network("citations?user=F0kCgy8AAAAJ&hl=en")
network
library(coauthornetwork)
network <- grab_network("citations?user=F0kCgy8AAAAJ&hl=en")
network <- grab_network("citations?user=F0kCgy8AAAAJ&hl=en")
network
plot_coauthors(network)
plot_coauthors(network)
plot_coauthors(grab_network("citations?user=F0kCgy8AAAAJ&hl=en", n_coauthors = 7))
blogdown::serve_site()
devtools::install_github("cimentadaj/coauthornetwork")
library(coauthornetwork)
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::hugo_build()
