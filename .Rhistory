knitr::opts_chunk$set(
cache.path = normalizePath("cache/", mustWork = TRUE),
collapse = TRUE,
comment  = "#>"
)
# list up Rmd files
Rmd_files <- list.files("content", "\\.Rmd$", recursive = TRUE, full.names = TRUE)
# list up md files
md_files  <- sub("\\.Rmd$", ".html", Rmd_files)
names(md_files) <- Rmd_files
# catch "local" arg passed from blogdown::build_site()
local <- commandArgs(TRUE)[1] == "TRUE"
# set common options ofr knitr
knitr::opts_knit$set(
base.dir = normalizePath("static/", mustWork = TRUE),
base.url = "/"
)
# list up Rmd files
Rmd_files <- list.files("content", "\\.Rmd$", recursive = TRUE, full.names = TRUE)
# list up md files
md_files  <- sub("\\.Rmd$", ".html", Rmd_files)
names(html_files) <- Rmd_files
# list up md files
html_files  <- sub("\\.Rmd$", ".html", Rmd_files)
# list up Rmd files
Rmd_files <- list.files("content", "\\.Rmd$", recursive = TRUE, full.names = TRUE)
# list up md files
html_files  <- sub("\\.Rmd$", ".html", Rmd_files)
names(html_files) <- Rmd_files
html_files
# knit it when:
#   1) the correspondent md file does not exist yet
#   2) the Rmd file was updated after the last time md file had been generated
needs_knitted <- !file.exists(html_files) | utils::file_test("-ot", html_files, Rmd_files)
needs_knitted
message("skip: \n    ", paste(Rmd_files[!needs_knitted], collapse = "\n    "))
message("Rendering: \n    ", paste(Rmd_files[needs_knitted], collapse = "\n    "))
Rmd_files[needs_knitted]
rmd <- Rmd_files[needs_knitted]
base_name <- tools::file_path_sans_ext(basename(rmd))
base_name
?blogdown::serve_site
?blogdown::build_site
rmd
base_name <- tools::file_path_sans_ext(basename(rmd))
rmarkdown::render(rmd, output_format = rmarkdown::html_document(), encoding = 'UTF-8')
devtools::install_github("cimentadaj/coauthornetwork")
devtools::install_github("cimentadaj/coauthornetwork")
devtools::install_github("cimentadaj/coauthornetwork")
devtools::install_github("cimentadaj/coauthornetwork")
devtools::install_github("cimentadaj/coauthornetwork")
install.packages("rlang")
devtools::install_github("cimentadaj/coauthornetwork")
# catch "local" arg passed from blogdown::build_site()
local <- commandArgs(TRUE)[1] == "TRUE"
# set common options ofr knitr
knitr::opts_knit$set(
base.dir = normalizePath("static/", mustWork = TRUE),
base.url = "/"
)
# knitr::opts_chunk$set(
#   cache.path = normalizePath("cache/", mustWork = TRUE),
#   collapse = TRUE,
#   comment  = "#>"
# )
# list up Rmd files
Rmd_files <- list.files("content", "\\.Rmd$", recursive = TRUE, full.names = TRUE)
# list up md files
html_files  <- sub("\\.Rmd$", ".html", Rmd_files)
names(html_files) <- Rmd_files
# knit it when:
#   1) the correspondent md file does not exist yet
#   2) the Rmd file was updated after the last time md file had been generated
needs_knitted <- !file.exists(html_files) | utils::file_test("-ot", html_files, Rmd_files)
message("Rendering: \n    ", paste(Rmd_files[needs_knitted], collapse = "\n    "))
for (rmd in Rmd_files[needs_knitted]) {
base_name <- tools::file_path_sans_ext(basename(rmd))
rmarkdown::render(rmd, output_format = rmarkdown::html_document(), encoding = 'UTF-8')
}
for (rmd in Rmd_files[needs_knitted]) {
base_name <- tools::file_path_sans_ext(basename(rmd))
rmarkdown::render(rmd, output_format = rmarkdown::html_document(), encoding = 'UTF-8')
}
for (rmd in Rmd_files[needs_knitted]) {
base_name <- tools::file_path_sans_ext(basename(rmd))
rmarkdown::render(rmd, output_format = rmarkdown::html_document(), encoding = 'UTF-8')
}
rmarkdown::render(rmd, output_format = rmarkdown::html_document())
rmd
?knitr::knit2html
rmd
basename(rmd)
base_name
?basename
dirname(rmd)
for (rmd in Rmd_files[needs_knitted]) {
knitr::knit2html(input = rmd, output = dirname(rmd), encoding = 'UTF-8')
}
html_files[rmd]
?knitr::knit
for (rmd in Rmd_files[needs_knitted]) {
# knitr::knit(input = rmd, output = dirname(rmd), encoding = 'UTF-8')
set.seed(1984)
knitr::knit(input = rmd, output = html_files[rmd], encoding = "UTF-8")
}
blogdown::hugo_build(local = local)
local
local = TRUE
blogdown::hugo_build(local = local)
blogdown::build_site(local = TRUE, method = 'custom')
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site
blogdown:::serve_it
# set common options ofr knitr
knitr::opts_knit$set(
base.dir = normalizePath("static/", mustWork = TRUE),
base.url = "/"
)
# knitr::opts_chunk$set(
#   cache.path = normalizePath("cache/", mustWork = TRUE),
#   collapse = TRUE,
#   comment  = "#>"
# )
# list up Rmd files
Rmd_files <- list.files("content", "\\.Rmd$", recursive = TRUE, full.names = TRUE)
# list up md files
html_files  <- sub("\\.Rmd$", ".html", Rmd_files)
names(html_files) <- Rmd_files
# knit it when:
#   1) the correspondent md file does not exist yet
#   2) the Rmd file was updated after the last time md file had been generated
needs_knitted <- !file.exists(html_files) | utils::file_test("-ot", html_files, Rmd_files)
message("Rendering: \n    ", paste(Rmd_files[needs_knitted], collapse = "\n    "))
for (rmd in Rmd_files[needs_knitted]) {
rmarkdown::render(input = rmd, encoding = "UTF-8")
}
blogdown::build_site(local = TRUE, method = 'custom')
basename(rmd)
Rmd_files[needs_knitted]
# set common options ofr knitr
knitr::opts_knit$set(
base.dir = normalizePath("static/", mustWork = TRUE),
base.url = "/"
)
# knitr::opts_chunk$set(
#   cache.path = normalizePath("cache/", mustWork = TRUE),
#   collapse = TRUE,
#   comment  = "#>"
# )
# list up Rmd files
Rmd_files <- list.files("content", "\\.Rmd$", recursive = TRUE, full.names = TRUE)
# list up md files
html_files  <- sub("\\.Rmd$", ".html", Rmd_files)
names(html_files) <- Rmd_files
# knit it when:
#   1) the correspondent md file does not exist yet
#   2) the Rmd file was updated after the last time md file had been generated
needs_knitted <- !file.exists(html_files) | utils::file_test("-ot", html_files, Rmd_files)
message("Rendering: \n    ", paste(Rmd_files[needs_knitted], collapse = "\n    "))
Rmd_files[needs_knitted]
rmd <- Rmd_files[needs_knitted]
basename(rmd)
tools::file_path_sans_ext(basename(rmd))
base_name <- tools::file_path_sans_ext(basename(rmd))
glue::glue("static/blog/{base_name}_files/figure-html/")
for (rmd in Rmd_files[needs_knitted]) {
base_name <- tools::file_path_sans_ext(basename(rmd))
knitr::opts_chunk$set(
fig.path = glue::glue("static/blog/{base_name}_files/figure-html/")
)
rmarkdown::render(input = rmd, encoding = "UTF-8")
}
?rmarkdown::render
blogdown::build_site(local = TRUE, method = 'custom')
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
?blogdown::serve_site
blogdown::Rscript
install.packages("callr")
r(function() var(iris[, 1:4]))
library(callr)
r(function() var(iris[, 1:4]))
r(function() Sys.sleep(10))
r(function() Sys.sleep(10), timeout = 5)
blogdown::serve_site()
cimentadaj::my_new_post('Tesssstttt')
blogdown::serve_site()
cimentadaj::my_new_post('test')
blogdown::serve_site()
blogdown::serve_site()
cimentadaj::my_new_post("Some guides and pre-project documents on ML")
blogdown::count_yaml()
blogdown::find_yaml()
blogdown::find_yaml
blogdown:::scan_yaml()
blogdown:::scan_yaml
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
library(magick)
Sys.setenv(JAVA_HOME="C:/Program Files/Java/jdk-11.0.2/")
library(tabulizer)
url <- "https://www.ssc.wisc.edu/~wright/Published%20writing/FallingIntoMarxismChoosingToStay.pdf"
all_pages <- tabulizer::split_pdf(url)
page <- magick::image_read_pdf(all_pages[4])
image_resize(page, geometry_size_percent(width = 55))
convert_page <- function(page) {
page <- magick::image_read_pdf(page)
separator <- image_info(page)$width / 2
first_page <- image_crop(page, geometry_area(width = separator))
second_page <- image_crop(page, geometry_area(x_off = separator, y_off = 1))
size <- geometry_area(width = 1400,
height = 2200,
x_off = 300,
y_off = 200)
first_page <- image_crop(first_page, size)
size <- geometry_area(width = 1400,
height = 2200,
x_off = 130,
y_off = 200)
second_page <- image_crop(second_page, size)
f_text <- image_ocr(first_page)
s_text <- image_ocr(second_page)
complete_page <- paste0(f_text, s_text)
complete_page
}
page_four <- magick::image_read_pdf(all_pages[4])
image_resize(page_four, geometry_size_percent(width = 55))
convert_page(page_four)
page_four
convert_page(all_pages[4])
blogdown::serve_site()
separator <- image_info(page_four)$width / 2
first_page <- image_crop(page_four, geometry_area(width = separator))
second_page <- image_crop(page_four, geometry_area(x_off = separator, y_off = 1))
size <- geometry_area(width = 1400,
height = 2200,
x_off = 300,
y_off = 200)
first_page <- image_crop(first_page, size)
size <- geometry_area(width = 1400,
height = 2200,
x_off = 130,
y_off = 200)
second_page <- image_crop(second_page, size)
first_page
image_resize(first_page, geometry_size_percent(width = 40))
image_resize(second_page, geometry_size_percent(width = 40))
f_text <- image_ocr(first_page)
s_text <- image_ocr(second_page)
complete_page <- paste0(f_text, s_text)
cat(complete_page)
cat(convert_page(all_pages[4]))
middle_pages <- lapply(all_pages[3:(length(all_pages) - 1)], convert_page)
cat(middle_pages[1])
middle_pages[1]
cat(middle_pages[[1]])
rmd_path <- tempfile(pattern = 'our_book', fileext = ".Rmd")
rmd_preamble <-"---
title: 'Final Book'
output: html_document
---\n\n"
final_document <- paste0(rmd_preamble, final_document)
### First page
first_page <- magick::image_read_pdf(all_pages[2])
image_resize(first_page, geometry_size_percent(width = 30))
separator <- image_info(first_page)$width / 2
size <- geometry_area(width = 1400,
height = 1700,
x_off = separator + 100,
y_off = 650)
first_page <- image_crop(first_page, size)
image_resize(first_page, geometry_size_percent(width = 30))
first_page <- image_ocr(first_page)
###
### Last page
last_page <- magick::image_read_pdf(all_pages[14])
image_resize(last_page, geometry_size_percent(width = 30))
separator <- image_info(last_page)$width / 2
size <- geometry_area(width = separator - 400,
height = 500,
x_off = 150,
y_off = 260)
last_page <- image_crop(last_page, size)
image_resize(last_page, geometry_size_percent(width = 40))
last_page <- image_ocr(last_page)
final_document <- paste0(first_page, Reduce(paste0, middle_pages), last_page)
cat(paste0(substring(final_document, 0, 5000), "..."))
rmd_path <- tempfile(pattern = 'our_book', fileext = ".Rmd")
rmd_preamble <-"---
title: 'Final Book'
output: html_document
---\n\n"
final_document <- paste0(rmd_preamble, final_document)
final_document
writeLines(final_document, con = rmd_path)
bookdown::render_book(rmd_path, bookdown::epub_book())
library(magick)
Sys.setenv(JAVA_HOME="C:/Program Files/Java/jdk-11.0.2/")
library(tabulizer)
url <- "https://www.ssc.wisc.edu/~wright/Published%20writing/FallingIntoMarxismChoosingToStay.pdf"
all_pages <- tabulizer::split_pdf(url)
page <- magick::image_read_pdf(all_pages[4])
image_resize(page, geometry_size_percent(width = 40))
all_pages
convert_page <- function(page) {
page <- magick::image_read_pdf(page)
separator <- image_info(page)$width / 2
first_page <- image_crop(page, geometry_area(width = separator))
second_page <- image_crop(page, geometry_area(x_off = separator, y_off = 1))
size <- geometry_area(width = 1400,
height = 2200,
x_off = 300,
y_off = 200)
first_page <- image_crop(first_page, size)
size <- geometry_area(width = 1400,
height = 2200,
x_off = 130,
y_off = 200)
second_page <- image_crop(second_page, size)
f_text <- image_ocr(first_page)
s_text <- image_ocr(second_page)
complete_page <- paste0(f_text, s_text)
complete_page
}
page_four <- magick::image_read_pdf(all_pages[4])
image_resize(page_four, geometry_size_percent(width = 40))
separator <- image_info(page_four)$width / 2
first_page <- image_crop(page_four, geometry_area(width = separator))
second_page <- image_crop(page_four, geometry_area(x_off = separator, y_off = 1))
size <- geometry_area(width = 1400,
height = 2200,
x_off = 300,
y_off = 200)
first_page <- image_crop(first_page, size)
size <- geometry_area(width = 1400,
height = 2200,
x_off = 130,
y_off = 200)
second_page <- image_crop(second_page, size)
image_resize(first_page, geometry_size_percent(width = 40))
image_resize(second_page, geometry_size_percent(width = 40))
f_text <- image_ocr(first_page)
s_text <- image_ocr(second_page)
complete_page <- paste0(f_text, s_text)
cat(complete_page)
cat(convert_page(all_pages[4]))
### First page
first_page <- magick::image_read_pdf(all_pages[2])
image_resize(first_page, geometry_size_percent(width = 30))
separator <- image_info(first_page)$width / 2
size <- geometry_area(width = 1400,
height = 1700,
x_off = separator + 100,
y_off = 650)
first_page <- image_crop(first_page, size)
image_resize(first_page, geometry_size_percent(width = 30))
first_page <- image_ocr(first_page)
###
### Last page
last_page <- magick::image_read_pdf(all_pages[14])
image_resize(last_page, geometry_size_percent(width = 30))
separator <- image_info(last_page)$width / 2
size <- geometry_area(width = separator - 400,
height = 500,
x_off = 150,
y_off = 260)
last_page <- image_crop(last_page, size)
image_resize(last_page, geometry_size_percent(width = 40))
last_page <- image_ocr(last_page)
###
final_document <- paste0(first_page, Reduce(paste0, middle_pages), last_page)
middle_pages
middle_pages <- lapply(all_pages[3:(length(all_pages) - 1)], convert_page)
cat(middle_pages[[1]])
final_document <- paste0(first_page, Reduce(paste0, middle_pages), last_page)
cat(paste0(substring(final_document, 0, 5000), "..."))
rmd_path
rmd_path <- tempfile(pattern = 'our_book', fileext = ".Rmd")
rmd_preamble <-"---
title: 'Final Book'
output: html_document
---\n\n"
final_document <- paste0(rmd_preamble, final_document)
rmd_path
basename(rmd_path)
dirname(rmd_path)
getwd()
old_wd <- getwd()
# Bookdown compiles all .Rmd in the working directory, so we move
# to the temporary directory where the book is
setwd(dirname(rmd_path))
bookdown::render_book(rmd_path, bookdown::epub_book())
setwd(dirname(rmd_path))
bookdown::render_book(rmd_path, bookdown::epub_book())
list.files()
rmd_path <- tempfile(pattern = 'our_book', fileext = ".Rmd")
rmd_preamble <-"---
title: 'Final Book'
output: html_document
---\n\n"
final_document <- paste0(rmd_preamble, final_document)
writeLines(final_document, con = rmd_path)
list.files()
bookdown::render_book(rmd_path, bookdown::epub_book())
final_document
encoding(final_document)
Encoding(final_document)
stringi::stri_enc_toutf8(final_document)
final_document <- paste0(rmd_preamble, final_document)
writeLines(stringi::stri_enc_toutf8(final_document), con = rmd_path, useBytes = TRUE)
setwd(dirname(rmd_path))
bookdown::render_book(rmd_path, bookdown::epub_book())
library(magick)
Sys.setenv(JAVA_HOME="C:/Program Files/Java/jdk-11.0.2/")
library(tabulizer)
url <- "https://www.ssc.wisc.edu/~wright/Published%20writing/FallingIntoMarxismChoosingToStay.pdf"
all_pages <- tabulizer::split_pdf(url)
page <- magick::image_read_pdf(all_pages[4])
image_resize(page, geometry_size_percent(width = 40))
all_pages
convert_page <- function(page) {
page <- magick::image_read_pdf(page)
separator <- image_info(page)$width / 2
first_page <- image_crop(page, geometry_area(width = separator))
second_page <- image_crop(page, geometry_area(x_off = separator, y_off = 1))
size <- geometry_area(width = 1400,
height = 2200,
x_off = 300,
y_off = 200)
first_page <- image_crop(first_page, size)
size <- geometry_area(width = 1400,
height = 2200,
x_off = 130,
y_off = 200)
second_page <- image_crop(second_page, size)
f_text <- image_ocr(first_page)
s_text <- image_ocr(second_page)
complete_page <- paste0(f_text, s_text)
complete_page
}
page_four <- magick::image_read_pdf(all_pages[4])
image_resize(page_four, geometry_size_percent(width = 40))
separator <- image_info(page_four)$width / 2
first_page <- image_crop(page_four, geometry_area(width = separator))
second_page <- image_crop(page_four, geometry_area(x_off = separator, y_off = 1))
size <- geometry_area(width = 1400,
height = 2200,
x_off = 300,
y_off = 200)
first_page <- image_crop(first_page, size)
size <- geometry_area(width = 1400,
height = 2200,
x_off = 130,
y_off = 200)
second_page <- image_crop(second_page, size)
image_resize(first_page, geometry_size_percent(width = 40))
image_resize(second_page, geometry_size_percent(width = 40))
f_text <- image_ocr(first_page)
s_text <- image_ocr(second_page)
complete_page <- paste0(f_text, s_text)
cat(complete_page)
cat(convert_page(all_pages[4]))
middle_pages <- lapply(all_pages[3:(length(all_pages) - 1)], convert_page)
cat(middle_pages[[1]])
### First page
first_page <- magick::image_read_pdf(all_pages[2])
image_resize(first_page, geometry_size_percent(width = 30))
separator <- image_info(first_page)$width / 2
size <- geometry_area(width = 1400,
height = 1700,
x_off = separator + 100,
y_off = 650)
first_page <- image_crop(first_page, size)
image_resize(first_page, geometry_size_percent(width = 30))
first_page <- image_ocr(first_page)
###
### Last page
last_page <- magick::image_read_pdf(all_pages[14])
image_resize(last_page, geometry_size_percent(width = 30))
separator <- image_info(last_page)$width / 2
size <- geometry_area(width = separator - 400,
height = 500,
x_off = 150,
y_off = 260)
last_page <- image_crop(last_page, size)
image_resize(last_page, geometry_size_percent(width = 40))
last_page <- image_ocr(last_page)
###
final_document <- paste0(first_page, Reduce(paste0, middle_pages), last_page)
cat(paste0(substring(final_document, 0, 5000), "..."))
rmd_path <- tempfile(pattern = 'our_book', fileext = ".Rmd")
rmd_preamble <-"---
title: 'Final Book'
output: html_document
---\n\n"
final_document <- paste0(rmd_preamble, final_document)
writeLines(final_document, con = rmd_path, useBytes = TRUE)
setwd("~/Downloads/repositories/cimentadaj.github.io")
blogdown::serve_site()
blogdown::stop_server()
5 + 5
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
