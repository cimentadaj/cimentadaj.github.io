<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on Jorge Cimentada</title>
    <link>/categories/r/</link>
    <description>Recent content in R on Jorge Cimentada</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Sat, 16 Nov 2019 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="/categories/r/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>essurvey release</title>
      <link>/blog/essurvey-release/</link>
      <pubDate>Sat, 16 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/essurvey-release/</guid>
      <description>


&lt;p&gt;The new &lt;code&gt;essurvey&lt;/code&gt; 1.0.3 is here! This release is mainly about downloading weight data from the European Social Survey (ESS), which &lt;a href=&#34;https://github.com/ropensci/essurvey/issues/9&#34;&gt;has been on the works since&lt;/a&gt; 2017! As usual, you can install from CRAN or Github with:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# From CRAN
install.packages(&amp;quot;essurvey&amp;quot;)

# or development version from Github
devtools::install_github(&amp;quot;ropensci/essurvey&amp;quot;)

# and load
library(essurvey)
set_email(&amp;quot;your@email.com&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Remember to set your registered email with &lt;code&gt;set_email&lt;/code&gt; to download ESS data. This is as easy as running &lt;code&gt;set_email(&#34;your@email.com&#34;)&lt;/code&gt;, with your email. The package now has two main functions to download weight data (called SDDF by the ESS): &lt;code&gt;show_sddf_cntrounds&lt;/code&gt; and &lt;code&gt;import_sddf_country&lt;/code&gt;. The first one returns the available weight rounds for a specific country. For example, for which rounds does Italy have weight data?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ita_rnds &amp;lt;- show_sddf_cntrounds(&amp;quot;Italy&amp;quot;)

ita_rnds&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 6 8&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;How about Germany?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;show_sddf_cntrounds(&amp;quot;Germany&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1 2 3 4 5 6 7 8&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For some rounds, some countries used complete random sampling, so they didn’t need any weight data for correct estimation. Italy did not use a random sample for round 8 so let’s focus on that wave for the example. To actually download this round, we use &lt;code&gt;import_sddf_country&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Download weight data
ita_dt &amp;lt;- import_sddf_country(&amp;quot;Italy&amp;quot;, 8)

ita_dt&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2,626 x 10
##    name  essround edition proddate cntry  idno   psu domain stratum    prob
##    &amp;lt;chr&amp;gt;    &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;
##  1 ESS8…        8 1.2     11.02.2… IT        1 11029      2     658 1.01e-4
##  2 ESS8…        8 1.2     11.02.2… IT        2 11170      2     665 1.11e-4
##  3 ESS8…        8 1.2     11.02.2… IT        4 11127      2     660 1.03e-4
##  4 ESS8…        8 1.2     11.02.2… IT        5 10771      2     671 1.04e-4
##  5 ESS8…        8 1.2     11.02.2… IT        6 11148      2     666 1.06e-4
##  6 ESS8…        8 1.2     11.02.2… IT        9 11163      1     667 1.05e-4
##  7 ESS8…        8 1.2     11.02.2… IT       14 11183      1     657 1.06e-4
##  8 ESS8…        8 1.2     11.02.2… IT       15 11184      2     661 9.97e-5
##  9 ESS8…        8 1.2     11.02.2… IT       16 10928      2     652 1.01e-4
## 10 ESS8…        8 1.2     11.02.2… IT       22 11171      2     664 9.97e-5
## # … with 2,616 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice that the weight data has an &lt;code&gt;idno&lt;/code&gt; column. This column can be used to match each respondent from each country to the main ESS data. This means that you can now actually do proper weighted analysis using the ESS data on the fly! How would we match the data for Italy, for example?&lt;/p&gt;
&lt;p&gt;We download the main data:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)

# Download main data
ita_main &amp;lt;- import_country(&amp;quot;Italy&amp;quot;, 8)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then merge it with the weight data:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Let&amp;#39;s keep only the important weight columns
ita_dt &amp;lt;- ita_dt %&amp;gt;% select(idno, psu, domain, stratum, prob)

# Merged main data and weight data
complete_data &amp;lt;- inner_join(ita_main, ita_dt, by = &amp;quot;idno&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Column `idno` has different attributes on LHS and RHS of join&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# There we have the matched data
complete_data %&amp;gt;%
  select(essround, idno, cntry, psu, stratum, prob)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2,626 x 6
##    essround  idno cntry   psu stratum      prob
##       &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;
##  1        8     1 IT    11029     658 0.000101 
##  2        8     2 IT    11170     665 0.000111 
##  3        8     4 IT    11127     660 0.000103 
##  4        8     5 IT    10771     671 0.000104 
##  5        8     6 IT    11148     666 0.000106 
##  6        8     9 IT    11163     667 0.000105 
##  7        8    14 IT    11183     657 0.000106 
##  8        8    15 IT    11184     661 0.0000997
##  9        8    16 IT    10928     652 0.000101 
## 10        8    22 IT    11171     664 0.0000997
## # … with 2,616 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There we have the matched data! This can be easily piped to the &lt;code&gt;survey&lt;/code&gt; package and perform properly weighted analysis of the ESS data. In fact, an official ESS package for analyzing data is something we’re thinking of developing to making analyzing ESS data very easy.&lt;/p&gt;
&lt;p&gt;Weight data (or SDDF data) is a bit tricky because not all country/rounds data have the same extension (some have SPSS, some have Stata, etc..) nor the same format (number of columns, name of columns, etc..). We would appreciate if you can submit any errors you find on &lt;a href=&#34;https://github.com/ropensci/essurvey/issues&#34;&gt;Github&lt;/a&gt; and we’ll try taking care of them as soon as possible.&lt;/p&gt;
&lt;p&gt;Special thanks to &lt;a href=&#34;https://twitter.com/phnk?lang=en&#34;&gt;phnk&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/djhurio/&#34;&gt;djhurio&lt;/a&gt; and Stefan Zins for helping out to push this.&lt;/p&gt;
&lt;p&gt;Enjoy this new release!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Saving missing categories from R to Stata</title>
      <link>/blog/2019-03-16-saving-missing-categories-from-r-to-stata/saving-missing-categories-from-r-to-stata/</link>
      <pubDate>Sat, 16 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019-03-16-saving-missing-categories-from-r-to-stata/saving-missing-categories-from-r-to-stata/</guid>
      <description>


&lt;p&gt;I’m finishing a project from the RECSM institute where we developed a &lt;a href=&#34;https://essurvey.shinyapps.io/ess_castellano/&#34;&gt;Shiny application&lt;/a&gt; to download data from the European Social Survey with Spanish translated labels. This was one hell of a project since I had to build some wrappers around the Google Translate API to generate translations for over 1300 questions and stream line this to be interactive while users download the data. That’s a long story which I will not delve into.&lt;/p&gt;
&lt;p&gt;This post is about a bug I found in the &lt;code&gt;haven&lt;/code&gt; package while doing the project. The bug is simple to explain and &lt;a href=&#34;https://github.com/tidyverse/haven/issues/435&#34;&gt;I filed it in &lt;code&gt;haven&lt;/code&gt; already&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;Let’s define a labelled double with only one tagged NA value.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(haven)
#&amp;gt; Warning: package &amp;#39;haven&amp;#39; was built under R version 3.4.4

tst &amp;lt;-
  labelled(
    c(
      1:5,
      tagged_na(&amp;quot;d&amp;quot;)
    ),
    c(
      &amp;quot;Agree Strongly&amp;quot; = 1,
      &amp;quot;Agree&amp;quot; = 2,
      &amp;quot;Neither agree nor disagree&amp;quot; = 3,
      &amp;quot;Disagree&amp;quot; = 4,
      &amp;quot;Disagree strongly&amp;quot; = 5,
      &amp;quot;No answer&amp;quot; = tagged_na(&amp;quot;d&amp;quot;)
    )
  )

tst&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;Labelled double&amp;gt;
## [1]     1     2     3     4     5 NA(d)
## 
## Labels:
##  value                      label
##      1             Agree Strongly
##      2                      Agree
##      3 Neither agree nor disagree
##      4                   Disagree
##      5          Disagree strongly
##  NA(d)                  No answer&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;write_dta(data.frame(freehms = tst), &amp;quot;test.dta&amp;quot;, version = 13)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If I load this in Stata and type tab freehms, all labels are correct:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/stata1.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now, if I take the code above and add another tagged NA value, then &lt;code&gt;write_dta&lt;/code&gt; drops the last label for some reason:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(haven)

tst &amp;lt;-
  labelled(c(1:5,
             tagged_na(&amp;#39;d&amp;#39;),
             ## Only added this
             tagged_na(&amp;#39;c&amp;#39;)
          ),
        c(&amp;#39;Agree Strongly&amp;#39; = 1,
          &amp;#39;Agree&amp;#39; = 2,
          &amp;#39;Neither agree nor disagree&amp;#39; = 3,
          &amp;#39;Disagree&amp;#39; = 4,
          &amp;#39;Disagree strongly&amp;#39; = 5,
          &amp;#39;No answer&amp;#39; = tagged_na(&amp;#39;d&amp;#39;),
            ## And this
          &amp;#39;Dont know&amp;#39; = tagged_na(&amp;#39;c&amp;#39;)
          )
        )

tst&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;Labelled double&amp;gt;
## [1]     1     2     3     4     5 NA(d) NA(c)
## 
## Labels:
##  value                      label
##      1             Agree Strongly
##      2                      Agree
##      3 Neither agree nor disagree
##      4                   Disagree
##      5          Disagree strongly
##  NA(d)                  No answer
##  NA(c)                  Dont know&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;write_dta(data.frame(freehms = tst), &amp;quot;test.dta&amp;quot;, version = 13)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/img/stata2.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Well, the bug is evident (notice the 5 without a label?). However, since the project is on a deadline I had to come up with a solution. It’s very simple: avoid tagged NA’s but recode them as traditional labels. Here’s a solution:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(sjlabelled)
library(sjmisc)

# Labels tags present in the ESS data
old_label_names &amp;lt;- c(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;, &amp;quot;d&amp;quot;)

# Grab the labels with tagged NA&amp;#39;s with a regex
na_available &amp;lt;- unname(gsub(&amp;quot;NA|\\(|\\)&amp;quot;, &amp;quot;&amp;quot;, get_na(tst, TRUE)))

# Identify which of the existent labels are actually valid ESS missings
which_ones_use &amp;lt;- old_label_names %in% na_available

# Subset only the ones which need recoding
value_code &amp;lt;- c(666, 777, 888, 999)[which_ones_use]
new_label_names &amp;lt;- c(&amp;quot;.a&amp;quot;, &amp;quot;.b&amp;quot;, &amp;quot;.c&amp;quot;, &amp;quot;.d&amp;quot;)[which_ones_use]

# Recode them
for (i in seq_along(na_available)) {
  tst &amp;lt;- replace_na(tst,
                    value = value_code[i],
                    na.label = new_label_names[i],
                    tagged.na = na_available[i]
                    )
}

tst&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;Labelled double&amp;gt;
## [1]   1   2   3   4   5 888 999
## 
## Labels:
##  value                      label
##      1             Agree Strongly
##      2                      Agree
##      3 Neither agree nor disagree
##      4                   Disagree
##      5          Disagree strongly
##    888                         .c
##    999                         .d&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There we go. Those labels would clearly be interpreted as missings and Stata would read them as traditional labels (well, it’s not perfect, but it’s a workaround). What I did was wrap the above code into a function and apply it to all questions in all rounds (&amp;gt; 1300!).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;recode_stata_labels &amp;lt;- function(x) {
  # Labels tags present in the ESS data
  old_label_names &amp;lt;- c(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;, &amp;quot;d&amp;quot;)

  # Grab the labels with tagged NA&amp;#39;s with a regex
  na_available &amp;lt;- unname(gsub(&amp;quot;NA|\\(|\\)&amp;quot;, &amp;quot;&amp;quot;, get_na(x, TRUE)))

  # Identify which of the existent labels are actually valid ESS missings
  which_ones_use &amp;lt;- old_label_names %in% na_available

  # Subset only the ones which need recoding
  value_code &amp;lt;- c(666, 777, 888, 999)[which_ones_use]
  new_label_names &amp;lt;- c(&amp;quot;.a&amp;quot;, &amp;quot;.b&amp;quot;, &amp;quot;.c&amp;quot;, &amp;quot;.d&amp;quot;)[which_ones_use]

  for (i in seq_along(na_available)) {
    x &amp;lt;- replace_na(x,
                    value = value_code[i],
                    na.label = new_label_names[i],
                    tagged.na = na_available[i]
    )
  }

  x
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, what happens if a &lt;code&gt;labelled&lt;/code&gt; class only has tagged NA’s?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tst &amp;lt;-
  labelled(c(1:5,
             tagged_na(&amp;#39;d&amp;#39;),
             tagged_na(&amp;#39;c&amp;#39;)
             ),
           c(&amp;#39;No answer&amp;#39; = tagged_na(&amp;#39;d&amp;#39;), &amp;#39;Dont know&amp;#39; = tagged_na(&amp;#39;c&amp;#39;)))

tst&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;Labelled double&amp;gt;
## [1]     1     2     3     4     5 NA(d) NA(c)
## 
## Labels:
##  value     label
##  NA(d) No answer
##  NA(c) Dont know&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;recode_stata_labels(tst)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Error: `x` must be a double vector&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s weird. I was in such a rush that I didn’t really want to debug the source code in &lt;code&gt;haven&lt;/code&gt;. However, I had the intuition that this was related to the fact that there were only tagged NA’s as labels. How do I fixed it? Just add a toy label at the beginning of the function and remove it after the recoding.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;recode_stata_labels &amp;lt;- function(x) {
    # I add a random label (here) and delete it at the end (end of the function)
    x &amp;lt;- add_labels(x, labels = c(&amp;#39;test&amp;#39; = 111111))

    # Note that this vector is in the same order as the `value_code` and `new_label_names`
    # because they&amp;#39;re values correspond to each other in this order.
    old_label_names &amp;lt;- c(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;, &amp;quot;d&amp;quot;)

    na_available &amp;lt;- unname(gsub(&amp;quot;NA|\\(|\\)&amp;quot;, &amp;quot;&amp;quot;, sjlabelled::get_na(x, TRUE)))
    which_ones_use &amp;lt;- old_label_names %in% na_available

    value_code &amp;lt;- c(666, 777, 888, 999)[which_ones_use]
    new_label_names &amp;lt;- c(&amp;quot;.a&amp;quot;, &amp;quot;.b&amp;quot;, &amp;quot;.c&amp;quot;, &amp;quot;.d&amp;quot;)[which_ones_use]

    for (i in seq_along(na_available)) {
      x &amp;lt;- replace_na(x, value = value_code[i], na.label = new_label_names[i], tagged.na = na_available[i])
    }

    x &amp;lt;- remove_labels(x, labels = &amp;quot;test&amp;quot;)

  x
}

recode_stata_labels(tst)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;Labelled double&amp;gt;
## [1]   1   2   3   4   5 888 999
## 
## Labels:
##  value label
##    888    .c
##    999    .d&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There we are. The &lt;code&gt;replace_na&lt;/code&gt; function is actually doing most of the work and I found it extremely useful (comes from the &lt;code&gt;sjmisc&lt;/code&gt; package).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why does R drop attributes when subsetting?</title>
      <link>/blog/2019-03-17-why-does-r-drop-attributes-when-subsetting/one-thing-i-hate-about-r/</link>
      <pubDate>Sat, 16 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019-03-17-why-does-r-drop-attributes-when-subsetting/one-thing-i-hate-about-r/</guid>
      <description>


&lt;p&gt;I had to spend about 1 hour yesterday because R did something completely unpredictable (for my taste). It dropped an attribute without a warning.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df &amp;lt;- data.frame(x = rep(c(1, 2), 20))

attr(df$x, &amp;quot;label&amp;quot;) &amp;lt;- &amp;quot;This is clearly a label&amp;quot;

df$x&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1
## [36] 2 1 2 1 2
## attr(,&amp;quot;label&amp;quot;)
## [1] &amp;quot;This is clearly a label&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The label is clearly there. To my surprise, if I subset this data frame, R drops the attribute.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;new_df &amp;lt;- df[df$x == 2, , drop = FALSE]

new_df$x&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It doesn’t matter if it’s using bracket subsetting (&lt;code&gt;[&lt;/code&gt;) or &lt;code&gt;subset&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;new_df &amp;lt;- subset(df, x == 2)

new_df$x&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s not good. R’s dropping attributes silently. For my specific purpose I ended up using &lt;code&gt;dplyr::filter&lt;/code&gt; which safely enough preserves attributes.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)

df %&amp;gt;% 
  filter(df, x == 2) %&amp;gt;% 
  pull(x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
## attr(,&amp;quot;label&amp;quot;)
## [1] &amp;quot;This is clearly a label&amp;quot;&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
